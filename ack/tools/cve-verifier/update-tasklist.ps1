# Update Tasklist Script
# Generates separate tasklists for CVE descriptors and analyses based on completion status

param(
    [ValidateSet("Descriptor", "Analysis")]
    [string]$Tasklist_type,
    [string]$Blackduck_CSV,
    [string]$ProjectRoot
)

# Validate required parameters
if (-not $Tasklist_type) {
    throw "Tasklist_type parameter is required. Must be 'Descriptor' or 'Analysis'"
}

if (-not $Blackduck_CSV) {
    throw "Blackduck_CSV parameter is required. Provide path to BlackDuck CSV file"
}

if (-not (Test-Path $Blackduck_CSV)) {
    throw "BlackDuck CSV file not found at: $Blackduck_CSV"
}

# Auto-detect workspace root if not provided
if (-not $ProjectRoot) {
    $currentDir = Get-Location
    $searchDir = $currentDir
    
    # Look for workspace indicators (ack and ads folders)
    while ($searchDir -and $searchDir.Path -ne $searchDir.Root) {
        $ackPath = Join-Path $searchDir.Path "ack"
        $adsPath = Join-Path $searchDir.Path "ads"
        
        if ((Test-Path $ackPath) -and (Test-Path $adsPath)) {
            $ProjectRoot = $searchDir.Path
            break
        }
        
        $searchDir = $searchDir.Parent
    }
    
    if (-not $ProjectRoot) {
        throw "Could not auto-detect workspace root. Please provide -ProjectRoot parameter or run from within a workspace containing 'ack' and 'ads' folders."
    }
    
    Write-Host "Auto-detected workspace root: $ProjectRoot"
}

# Function to read JSON files safely
function Read-JsonSafe {
    param([string]$Path)
    try {
        if (Test-Path $Path) {
            return Get-Content $Path -Raw | ConvertFrom-Json
        }
    } catch {
        Write-Warning "Failed to read JSON from $Path"
    }
    return $null
}

# Function to check if descriptor exists
function Test-CVEDescriptor {
    param([string]$CveId)
    
    $descriptorPath = Join-Path $ProjectRoot "ads\findings\cve-verifier\individual-cve-descriptors\$CveId-descriptor.json"
    return Test-Path $descriptorPath
}

# Function to check if analysis exists
function Test-CVEAnalysis {
    param([string]$CveId)
    
    # Look for analysis files with pattern: <project_name>_<CVE-ID>-analysis.json
    $analysisDir = Join-Path $ProjectRoot "ads\findings\cve-verifier\individual-cve-analyses"
    $analysisPattern = "*_$CveId-analysis.json"
    $analysisFiles = Get-ChildItem -Path $analysisDir -Filter $analysisPattern -ErrorAction SilentlyContinue
    return ($analysisFiles.Count -gt 0)
}

# Function to get CVE classification from analysis file
function Get-CVEClassification {
    param([string]$CveId)
    
    # Look for analysis files with pattern: <project_name>_<CVE-ID>-analysis.json
    $analysisDir = Join-Path $ProjectRoot "ads\findings\cve-verifier\individual-cve-analyses"
    $analysisPattern = "*_$CveId-analysis.json"
    $analysisFiles = Get-ChildItem -Path $analysisDir -Filter $analysisPattern -ErrorAction SilentlyContinue
    
    if ($analysisFiles.Count -gt 0) {
        $analysisPath = $analysisFiles[0].FullName
        $analysis = Read-JsonSafe $analysisPath
        
        if ($analysis -and $analysis.executive_summary -and $analysis.executive_summary.risk_classification) {
            return $analysis.executive_summary.risk_classification
        }
    }
    
    return "PENDING"
}

# Import and process BlackDuck CSV data
$blackduckData = Import-Csv $Blackduck_CSV

# Extract unique CVE-dependency mappings
$cveData = $blackduckData | Where-Object { 
    $_.CVE -and $_.CVE -match "CVE-\d{4}-\d{4,7}" 
} | Select-Object @{
    Name="CVE"; Expression={$_.CVE}
}, @{
    Name="Component"; Expression={$_.Library}
}, @{
    Name="Version"; Expression={$_.Version}
}, @{
    Name="Severity"; Expression={$_.Severity}
}, @{
    Name="DependencyStatus"; Expression={"CONFIRMED_PRESENT"}
} | Sort-Object CVE -Unique

Write-Host "Found $($cveData.Count) CVE entries from BlackDuck CSV"

# Categorize CVEs based on tasklist type
$completed = @()
$pending = @()

foreach ($cve in $cveData) {
    $hasDescriptor = Test-CVEDescriptor $cve.CVE
    $hasAnalysis = Test-CVEAnalysis $cve.CVE
    $classification = Get-CVEClassification $cve.CVE
    
    $status = @{
        CVE = $cve.CVE
        Component = $cve.Component
        Version = $cve.Version
        Severity = $cve.Severity
        DependencyStatus = $cve.DependencyStatus
        HasDescriptor = $hasDescriptor
        HasAnalysis = $hasAnalysis
        Classification = $classification
    }
    
    # Determine completion based on tasklist type
    if ($Tasklist_type -eq "Descriptor") {
        $status.IsCompleted = $hasDescriptor
        $status.NextAction = if ($hasDescriptor) { "Descriptor Complete" } else { "Create Descriptor" }
    } elseif ($Tasklist_type -eq "Analysis") {
        $status.IsCompleted = $hasAnalysis
        $status.NextAction = if ($hasAnalysis) { "Analysis Complete" } else { "Create Analysis" }
    }
    
    if ($status.IsCompleted) {
        $completed += $status
    } else {
        $pending += $status
    }
}

# Sort pending by severity (Critical first, then High, then Medium/Low)
$severityOrder = @{ "Critical" = 1; "High" = 2; "Medium" = 3; "Low" = 4 }
$pending = $pending | Sort-Object { $severityOrder[$_.Severity] }, CVE

# Generate tasklist content
$tasklistTitle = if ($Tasklist_type -eq "Descriptor") { "CVE Descriptor Creation" } else { "CVE Analysis" }
$output = @"
# CVE $tasklistTitle Tasklist - jal-dapi-ext
**Generated**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**Type**: $Tasklist_type
**Source**: $Blackduck_CSV

## Summary
- **Total CVEs**: $($cveData.Count)
- **Completed**: $($completed.Count)
- **Pending**: $($pending.Count)
- **Progress**: $(if ($cveData.Count -gt 0) { [math]::Round(($completed.Count / $cveData.Count) * 100, 1) } else { 0 })%

"@

# Add classification summary for Analysis tasklists
if ($Tasklist_type -eq "Analysis") {
    $output += "`n## Classification Summary`n"
    
    $classificationCounts = @{}
    foreach ($cve in $completed) {
        $classification = $cve.Classification
        if ($classification -and $classification.Trim() -ne "" -and $classification -ne "PENDING") {
            if ($classificationCounts.ContainsKey($classification)) {
                $classificationCounts[$classification]++
            } else {
                $classificationCounts[$classification] = 1
            }
        }
    }
    
    if ($classificationCounts.Count -gt 0) {
        foreach ($pair in $classificationCounts.GetEnumerator()) {
            $output += "- **$($pair.Key)**: $($pair.Value)`n"
        }
    } else {
        $output += "- **No completed analyses yet**`n"
    }
}

# Add completed section
$completedIcon = if ($Tasklist_type -eq "Descriptor") { "üìÑ" } else { "‚úÖ" }
$output += "`n## Completed $Tasklist_type $completedIcon`n"
$output += "| CVE | Component | Severity | Status | Date |`n"
$output += "|-----|-----------|----------|--------|------|`n"

foreach ($cve in $completed) {
    $statusText = if ($Tasklist_type -eq "Descriptor") { "Descriptor Created" } else { $cve.Classification }
    $output += "| $($cve.CVE) | $($cve.Component) | $($cve.Severity) | $statusText | - |`n"
}

if ($completed.Count -eq 0) {
    $output += "| - | - | - | No completed $($Tasklist_type.ToLower())s yet | - |`n"
}

# Add pending section
$output += "`n## Pending $Tasklist_type (Priority Order)`n"
$output += "| CVE | Component | Severity | Has Descriptor | Next Action |`n"
$output += "|-----|-----------|----------|----------------|-------------|`n"

foreach ($cve in $pending) {
    $descriptorStatus = if ($cve.HasDescriptor) { "‚úÖ" } else { "‚ùå" }
    $output += "| $($cve.CVE) | $($cve.Component) | $($cve.Severity) | $descriptorStatus | $($cve.NextAction) |`n"
}

if ($pending.Count -eq 0) {
    $output += "| - | - | - | - | All $($Tasklist_type.ToLower())s completed |`n"
}

# Add next recommended CVE
if ($pending.Count -gt 0) {
    $nextCve = $pending[0]
    $output += "`n## Next Recommended CVE`n"
    $output += "**$($nextCve.CVE)** - $($nextCve.Component) ($($nextCve.Severity) priority)`n"
    if ($Tasklist_type -eq "Descriptor") {
        $output += "- Path: individual-cve-descriptors/$($nextCve.CVE)-descriptor.json`n"
    } else {
        $output += "- Descriptor: individual-cve-descriptors/$($nextCve.CVE)-descriptor.json`n"
        $output += "- Analysis: individual-cve-analyses/$($nextCve.CVE)-analysis.json`n"
    }
}

# Add usage instructions
$output += "`n## Usage Instructions`n"
$output += "1. **For completed CVEs**: Check files in individual-cve-$($Tasklist_type.ToLower())s/`n"
$output += "2. **For pending CVEs**: Follow priority order above`n"
$output += "3. **Update this list**: Run update-tasklist.ps1 -Tasklist_type $Tasklist_type -Blackduck_CSV `"$Blackduck_CSV`"`n"

# Add file locations
$output += "`n## File Locations`n"
if ($Tasklist_type -eq "Descriptor") {
    $output += "- **Descriptors**: `ads/findings/cve-verifier/individual-cve-descriptors/`n"
    $output += "- **Global Index**: `ads/findings/cve-verifier/global-cve-index.json`n"
} else {
    $output += "- **Descriptors**: `ads/findings/cve-verifier/individual-cve-descriptors/`n"
    $output += "- **Analyses**: `ads/findings/cve-verifier/individual-cve-analyses/`n"
    $output += "- **Summary**: `ads/findings/cve-verifier/cve-exposure-analysis-summary.md`n"
}

# Save output file
$outputPath = Join-Path $ProjectRoot "ads\findings\cve-verifier\jal-dapi-ext-cve-tasklist-$Tasklist_type.md"
$outputDir = Split-Path $outputPath -Parent
if (-not (Test-Path $outputDir)) {
    New-Item -Path $outputDir -ItemType Directory -Force | Out-Null
}

$output | Out-File -FilePath $outputPath -Encoding UTF8

Write-Host "Generated $Tasklist_type tasklist: $outputPath"
Write-Host "Total CVEs: $($cveData.Count), Completed: $($completed.Count), Pending: $($pending.Count)"
if ($pending.Count -gt 0) {
    Write-Host "Next recommended: $($pending[0].CVE) ($($pending[0].Component), $($pending[0].Severity))"
}
