{
  "cve_id": "CVE-2020-10683",
  "description": "dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j.",
  "severity": "CRITICAL",
  "cvss_score": 9.8,
  "affected_component": "org.dom4j:dom4j",
  "affected_versions": "<2.0.3, 2.1.0-2.1.2",
  "fixed_version": "2.0.3, 2.1.3",
  "vulnerability_type": "XXE (XML External Entity) Injection",
  "discovery_patterns": [
    "import org.dom4j",
    "org.dom4j.io.SAXReader",
    "SAXReader",
    "new SAXReader()",
    "SAXReader.read",
    "DocumentHelper.parseText",
    "DocumentHelper.createDocument",
    "org.dom4j.Document",
    "org.dom4j.Element",
    "dom4j.jar",
    "dom4j:dom4j",
    "org.dom4j:dom4j",
    "XMLReader",
    "external-general-entities",
    "external-parameter-entities",
    "load-external-dtd",
    "createDefault()",
    "setFeature"
  ],
  "reference_sources": [
    "https://nvd.nist.gov/vuln/detail/CVE-2020-10683",
    "https://github.com/advisories/GHSA-hwj3-m3p6-hj38",
    "https://www.wiz.io/vulnerability-database/cve/cve-2020-10683",
    "https://security.snyk.io/vuln/SNYK-JAVA-ORGDOM4J-565810",
    "https://github.com/dom4j/dom4j/commit/a8228522a99a02146106672a34c104adbda5c658",
    "https://bugzilla.redhat.com/show_bug.cgi?id=1694235",
    "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
    "https://security.netapp.com/advisory/ntap-20200518-0002/",
    "https://usn.ubuntu.com/4575-1/",
    "https://www.oracle.com/security-alerts/cpujul2020.html"
  ],
  "dependency_context": {
    "dependency_type": "direct or transitive",
    "usage_likelihood": "high",
    "framework_integration": "true",
    "alternative_search_patterns": [
      "XML parsing with dom4j library",
      "Document parsing and manipulation",
      "SAXReader usage patterns",
      "XML document creation and processing"
    ]
  },
  "technical_details": {
    "root_cause": "dom4j's SAXReader uses system default XMLReader with its defaults, which allows external DTDs and External Entities by default",
    "attack_vector": "Network-based XXE attacks through XML input processing",
    "prerequisites": "Application must process XML input using vulnerable dom4j versions with default SAXReader configuration",
    "fix_mechanism": "Introduction of SAXReader.createDefault() method with secure defaults that disable external entity processing"
  },
  "exploitation_scenario": "An attacker would craft malicious XML input containing external entity references to exploit this vulnerability. For example, they could submit XML like '<?xml version=\"1.0\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><root>&xxe;</root>' to a web application that processes XML using dom4j's default SAXReader. The vulnerable parser would attempt to resolve the external entity, potentially exposing sensitive files like /etc/passwd, internal network resources via HTTP requests to internal URLs, or causing denial of service through resource exhaustion. The attack is particularly effective because dom4j's default configuration enables external entity processing without explicit developer action.",
  "supply_chain_context": {
    "transitive_risk": "Very High - dom4j is widely used as both direct and transitive dependency in enterprise Java applications, XML processing frameworks, web services, and numerous open source projects. It's commonly included in application servers and middleware platforms.",
    "future_usage_risk": "High - XML processing remains fundamental to enterprise applications, web services, configuration management, and data interchange. Applications processing XML from external sources are particularly at risk."
  },
  "cwe_mapping": ["CWE-611"]
}
