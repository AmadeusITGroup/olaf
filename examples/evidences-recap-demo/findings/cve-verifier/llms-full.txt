# jal-dapi-ext Documentation

Generated: 08/06/2025 11:15:16

## Overview

# JAL-DAPI-EXT

## Explanation of the project

JAL-DAPI-EXT is a project that aims to extend the Digital API. It is a project that is based on the Digital API, and that aims to add new features to it for the JAL project.

## Installation


### Pre-requisites:

- Having Podman installed on your machine, with a machine correclty installed (please refer to jal-int for this part : https://rndwww.nce.amadeus.net/git/projects/DDSJAL/repos/jal-int/browse)
- Java 17 installed on your machine. You can download it from the following link : https://www.oracle.com/java/technologies/javase-jdk17-downloads.html


### How to build the project

First step after cloning the project is to build it. To do so, you need to run the following command. 

For a build with tests performed, run the command  :

``` bash
./dapi.sh build
```

For a build without any test performed, run the command  :

``` bash
./dapi.sh quick-build
```

If the **Java version is not 17** or greater, **the build will fail**.

If the podman environment is not correctly set up, the script will run your machine, ask you to **shutdown jal-int** if it's running and **creating the podman environment** for jal-dapi-ext.

If the script can't find the cloned project **digital-api-helm**, it will ask you to clone it. This project is necessary for the **deployment** of jal-dapi-ext.

Sometimes, the module **mox-compaign** can fail to build. In this case, the script will ask you if you want to skip the build of this module. If you choose to skip it, the **build will continue without this module**. If you choose to not skip it, **the build will fail**.

The build will also load the docker image into the podman environment after the build, and clean old images to save space.

## How to deploy in local

After your build, you can deploy the project in your local environment. To do so, you need to run the following command :

``` bash
./dapi.sh deploy
```

If you want to be alerted when the deployment is finished, you can add the -a option :

``` bash
./dapi.sh deploy -a
```

As for the build, if the podman environment is not correctly set up, the script will run your machine, ask you to **shutdown jal-int** if it's running and **creating the podman environment** for jal-dapi-ext.

If the script can't find the cloned project **digital-api-helm**, it will ask you to clone it. This project is necessary for the **deployment** of jal-dapi-ext.

Then, the script will **clean previous deployments** and **deploy the project** in your local environment using **digital-api-helm**.

In the end, the script will forward the port **2004/TPC of lcl-localsi** to your port 9000, so you can access the project (through http://localhost:9000/1ASIUJLPGENSECS as exemple).


## How to debug in local

As for Jal-int project, you can debug the project in your local environment. To do so, you need to run the following command :

``` bash
./dapi.sh debug
```

It's working the same way as for jal-int in intellij, you can set breakpoints and debug the project.

However, **hot swap is not working for this project**, so you will need to build and deploy again the project after your modifications.

## Troubleshooting

In case of any issue, please run this command before asking for help :

``` bash
./dapi.sh doctor
```

As for jal-int, this command will check if your installation is correct by running a list of tests. Feel free to ask a question if you have any issue.


## Generate Postman collection & environment for your local deployment

To generate the postman collection and environment for your local deployment, you need to run the following command :

``` bash
./dapi.sh postman generate-postman
```

This command will retrieve the swagger file corresponding of the version of the spec you are using. However, the collection generated **will not include endpoint specific to the JAL extension**. This is something we need to fix. 

So, you can also specify the **swagger file path** you want to use to generate the collection :

``` bash
./dapi.sh postman generate-postman --swagger-file <path>
```

This command will generate a postman collection and environment in the root of the project. You can import them in Postman to test the endpoints of the project.

## Display the logs of the project

Logs can be available in the folder **/c/sharedref/helm-logs/**. But you can also display the logs of the project by running the following command :

``` bash
./dapi.sh logs
```

This command will display the logs of the project in your terminal.

## Analyse duplicate dependencies

You can analyse the duplicate dependencies of the project by running the following command :

``` bash
mvn -T 4 duplicate-finder:check  ==> (slow process but checks classes and resources, -T option is for multi-threading process)
mvn dependency:analyze-duplicate  ==> (fast process but checks only declared dependencies)
```

## Source : 

[Podman for JLP - Windows](https://amadeus.atlassian.net/wiki/spaces/JAL/pages/1383880893/Podman+for+JLP+-+Windows)

[Troubleshooting Docker/Helm based environment - Digital API for Airlines - Amadeus Confluence Platform](https://rndwww.nce.amadeus.net/confluence/pages/viewpage.action?pageId=2213183616)



## File: blueprint\src\main\helm\du-helm.tmpl.json

```
{
    "organization": "${DMOrganization}",
    "name": "jal-dapi-ext",
    "version": "${version}",
    "loadUnits": [
      {
        "order": 1,
        "name": "jal-dapi-ext-acs",
        "ltc": {
          "name": "ACS",
          "version": "v1"
        },
        "content": {
          "targets": [
            {
              "name": "NET6_DEV",
              "openShiftUrl": "https://api.net6.paas.westeurope.rnd.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-dev",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-net6-jal-ext-dev.yaml",
              "environment": "RND"
            },
            {
              "name": "NLD7_UAT",
              "openShiftUrl": "https://api.nld7.paas.westeurope.tstcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-uat",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld7-jal-ext-uat.yaml",
              "environment": "TST"
            },
            {
              "name": "NLD7_PDT",
              "openShiftUrl": "https://api.nld7.paas.westeurope.tstcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-pdt",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld7-jal-ext-pdt.yaml",
              "environment": "TST"
            },
            {
              "name": "NLD7_DEV",
              "openShiftUrl": "https://api.nld7.paas.westeurope.tstcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-dev",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld7-jal-ext-dev.yaml",
              "environment": "RND"
            },
            {
              "name": "NLD8_UAT",
              "openShiftUrl": "https://api.nld8.paas.westeurope.tstcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-uat",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld8-jal-ext-uat.yaml",
              "environment": "TST"
            },
            {
              "name": "NLD8_PDT",
              "openShiftUrl": "https://api.nld8.paas.westeurope.tstcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-pdt",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld8-jal-ext-pdt.yaml",
              "environment": "TST"
            },
            {
              "name": "NLD8_DEV",
              "openShiftUrl": "https://api.nld8.paas.westeurope.tstcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-dev",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld8-jal-ext-dev.yaml",
              "environment": "RND"
            },
            {
              "name": "MUC5_UAT",
              "openShiftUrl": "https://openshift.muc5.paas.amadeus.net:8443",
              "openShiftNamespace": "jal-ext-uat",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc5-jal-ext-uat.yaml",
              "environment": "TST"
            },
            {
              "name": "MUC9_UAT",
              "openShiftUrl": "https://api.muc9.paas.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-uat",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc9-jal-ext-uat.yaml",
              "environment": "TST"
            },
            {
              "name": "MUC5_PDT",
              "openShiftUrl": "https://openshift.muc5.paas.amadeus.net:8443",
              "openShiftNamespace": "jal-ext-pdt",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc5-jal-ext-pdt.yaml",
              "environment": "TST"
            },
            {
              "name": "MUC9_PDT",
              "openShiftUrl": "https://api.muc9.paas.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-pdt",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc9-jal-ext-pdt.yaml",
              "environment": "TST"
            },
            {
              "name": "NLD9_PRD",
              "openShiftUrl": "https://api.nld9.paas.westeurope.prdcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-prd",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld9-jal-ext-prd.yaml",
              "environment": "PRD"
            },
            {
              "name": "NLD10_PRD",
              "openShiftUrl": "https://api.nld10.paas.westeurope.prdcur.az.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-prd",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-nld10-jal-ext-prd.yaml",
              "environment": "PRD"
            },
            {
              "name": "MUC6_PRD",
              "openShiftUrl": "https://openshift.muc6.paas.amadeus.net:8443",
              "openShiftNamespace": "jal-ext-prd",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc6-jal-ext-prd.yaml",
              "environment": "PRD"
            },
            {
              "name": "MUC10_PRD",
              "openShiftUrl": "https://api.muc10.paas.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-prd",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc10-jal-ext-prd.yaml",
              "environment": "PRD_OTHERS"
            },
            {
              "name": "MUC8_PRD",
              "openShiftUrl": "https://openshift.muc8.paas.amadeus.net:8443/",
              "openShiftNamespace": "jal-ext-prd",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc8-jal-ext-prd.yaml",
              "environment": "PRD"
            },
            {
              "name": "MUC12_PRD",
              "openShiftUrl": "https://api.muc12.paas.amadeus.net:6443",
              "openShiftNamespace": "jal-ext-prd",
              "openShiftToken": "${openShiftToken}",
              "propertiesUrl": "dga-maven-all-adt/com/amadeus/pelican/jal-dapi-ext-blueprint/${version}/jal-dapi-ext-blueprint-${version}-values-muc12-jal-ext-prd.yaml",
              "environment": "PRD_OTHERS"
            }
          ],
          "chartPath": "helm-aekacs/jal-dapi-ext/${version}/jal-dapi-ext-${version}.tgz"
        }
      }
    ]
  }
```

---

## File: blueprint\src\main\os\du.json

```
{
    "name": "jal-dapi-ext",
    "version": "${webapp.version}",
    "loadUnits": [
        {
            "order": 1,
            "ltc": {
                "name": "ACS",
                "version": "v1"
            },
            "content": {
                "targets": [
                    {
                        "name": "jal-ext-dev_nce2",
                        "openShiftUrl": "https://openshift.nce2.paas.amadeus.net:8443",
                        "openShiftNamespace": "jal-ext-dev",
                        "openShiftToken": "${JAL_EXT_NCE2_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-dev-nce2.properties",
                        "environment": "RND"
                    },
                    {
                        "name": "jal-ext-uat_muc5",
                        "openShiftUrl": "https://openshift.muc5.paas.amadeus.net:8443",
                        "openShiftNamespace": "jal-ext-uat",
                        "openShiftToken": "${JAL_EXT_MUC5_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-uat-muc5.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-pdt_muc5",
                        "openShiftUrl": "https://openshift.muc5.paas.amadeus.net:8443",
                        "openShiftNamespace": "jal-ext-pdt",
                        "openShiftToken": "${JAL_EXT_MUC5_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-pdt-muc5.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-uat_muc7",
                        "openShiftUrl": "https://openshift.muc7.paas.amadeus.net:8443",
                        "openShiftNamespace": "jal-ext-uat",
                        "openShiftToken": "${JAL_EXT_MUC7_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-uat-muc7.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-pdt_muc7",
                        "openShiftUrl": "https://openshift.muc7.paas.amadeus.net:8443",
                        "openShiftNamespace": "jal-ext-pdt",
                        "openShiftToken": "${JAL_EXT_MUC7_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-pdt-muc7.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-mig_muc5",
                        "openShiftUrl": "https://openshift.muc5.paas.amadeus.net:8443",
                        "openShiftNamespace": "jal-ext-mig",
                        "openShiftToken": "${JAL_EXT_MUC5_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-mig-muc5.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-ppt_muc6",
                        "openShiftUrl": "https://openshift.muc6.paas.amadeus.net:8443/",
                        "openShiftNamespace": "jal-ext-ppt",
                        "openShiftToken": "${JAL_EXT_MUC6_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-ppt-muc6.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-ppt_muc8",
                        "openShiftUrl": "https://openshift.muc8.paas.amadeus.net:8443/",
                        "openShiftNamespace": "jal-ext-ppt",
                        "openShiftToken": "${JAL_EXT_MUC8_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-ppt-muc8.properties",
                        "environment": "TST"
                    },
                    {
                        "name": "jal-ext-prd_muc6",
                        "openShiftUrl": "https://openshift.muc6.paas.amadeus.net:8443/",
                        "openShiftNamespace": "jal-ext-prd",
                        "openShiftToken": "${JAL_EXT_MUC6_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-prd-muc6.properties",
                        "environment": "PRD"
                    },
                    {
                        "name": "jal-ext-prd_muc8",
                        "openShiftUrl": "https://openshift.muc8.paas.amadeus.net:8443/",
                        "openShiftNamespace": "jal-ext-prd",
                        "openShiftToken": "${JAL_EXT_MUC8_OC_TOKEN}",
                        "propertiesUrl": "${blueprintUrl}/jal-ext-prd-muc8.properties",
                        "environment": "PRD"
                    }
                ],
                "templateUrl": "${blueprintUrl}/jal-dapi-ext-template.yml"
            }
        }
    ]
}
```

---

## File: blueprint\src\main\os\pelican-config.json

```
{
  "Name": "pelican-sample-app",
  "Interfaces": [
    {
      "name": "jal-core-edge",
      "type": "external",
      "restOperations": [
        {
          "name": "plc_status_get",
          "path": "status",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_office_get",
          "path": "self/office-id",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_search_air_offers_2_get",
          "path": "search/air-offers",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_search_air_calendars_2_post",
          "path": "search/air-calendars,",
          "method": "POST",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_shopping_multicarts_2_get",
          "path": "shopping/multicarts",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_shopping_carts_2_get",
          "path": "shopping/carts",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_shopping_carts_2_post",
          "path": "shopping/carts",
          "method": "POST",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_purchase_orders_2_get",
          "path": "purchase/orders",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_rules_discount_2_get",
          "path": "rules/discount",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        },
        {
          "name": "plc_rfd_country_2_get",
          "path": "rfd/country",
          "method": "GET",
          "version" : 2,
          "settings": null,
          "publicationSettings": [
            [
              {
                "key": "--portfolio",
                "value": "PELICAN_REST_PORTFOLIO"
              }
            ]
          ]
        }
      ],
      "settings": [
        {
          "key": "--conversation",
          "value": "stateless"
        },
        {
          "key": "--protocol",
          "value": "ISO-9735"
        },
        {
          "key": "--destination",
          "value": "*"
        },
        {
          "key": "--dcxHandling"
        }
      ],
      "service": {
        "name": "jal-core-edge"
      }
    }
  ]
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\builder\FrequentFlyerProfileBuilder.java

```
package com.amadeus.dapi.jalext.impl.authorization.builder;

import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Birthday;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Mail;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2MemberProfileBase;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2MobTel;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Name;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2ResponseData;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Tel;
import com.amadeus.jal.dapi.model.base.NameViewPrivate;
import com.amadeus.jal.dapi.model.core.EmailView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileBaseView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileBirthdayView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileMilesInfoView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileView;
import com.amadeus.jal.dapi.model.core.NameView;
import com.amadeus.jal.dapi.model.core.PhoneView;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang.StringUtils;

import javax.inject.Named;
import java.util.List;

/**
 * FrequentFlyerProfileBuilder class to build FrequentFlyerProfileView
 * from MemberProfileV2ResponseData
 */
@Named
public class FrequentFlyerProfileBuilder {

  public FrequentFlyerProfileView buildFrequentFlyerProfile(MemberProfileV2ResponseData memberProfileV2ResponseData) {
    FrequentFlyerProfileView result = new FrequentFlyerProfileView();
    if (memberProfileV2ResponseData != null) {
      result.setBirthday(buildFrequentFlyerProfileBirthday(memberProfileV2ResponseData.getBirthday()));
      result.setEmail(buildEmail(memberProfileV2ResponseData.getMail()));
      result.setFrequentFlyerProfileBase(
          buildFrequentFlyerProfileBase(memberProfileV2ResponseData.getMemberProfileBase())
      );
      result.setFrequentFlyerProfileMilesInfo(
          buildFrequentFlyerProfileMilesInfo(memberProfileV2ResponseData));
      result.setName(
          buildFrequentFlyerProfileName(memberProfileV2ResponseData.getName()));
      result.setMobilePhone(
          buildMobilePhone(memberProfileV2ResponseData.getMobTel()));
      result.setPhone(
          buildPhone(memberProfileV2ResponseData.getTel()));
    }
    return result;
  }

  public EmailView buildEmail(MemberProfileV2Mail memberProfileMail) {
    EmailView result = new EmailView();
    if (memberProfileMail != null) {
      result.setAddress(memberProfileMail.getMailAddress());
    }
    return result;
  }

  public FrequentFlyerProfileBaseView buildFrequentFlyerProfileBase(
      MemberProfileV2MemberProfileBase memberProfileBase) {
    FrequentFlyerProfileBaseView result = new FrequentFlyerProfileBaseView();
    if (memberProfileBase != null) {
      result.setMemberNo(memberProfileBase.getMemberNo());
      result.setRegion(memberProfileBase.getRegion());
    }
    return result;
  }

  public FrequentFlyerProfileMilesInfoView buildFrequentFlyerProfileMilesInfo(
      MemberProfileV2ResponseData memberProfileV2ResponseData) {
    FrequentFlyerProfileMilesInfoView result = new FrequentFlyerProfileMilesInfoView();
    if (memberProfileV2ResponseData != null) {
      if (memberProfileV2ResponseData.getMileInfo() != null
          && StringUtils.isNotBlank(memberProfileV2ResponseData.getMileInfo().getEffectiveMile())) {
        result.setEffectiveMile(
            Integer.parseInt(memberProfileV2ResponseData.getMileInfo().getEffectiveMile()));
      }
      if (memberProfileV2ResponseData.getEJalPoint() != null
          && StringUtils.isNotBlank(memberProfileV2ResponseData.getEJalPoint().getRestJP())) {
        result.setRestPoint(
            Integer.parseInt(memberProfileV2ResponseData.getEJalPoint().getRestJP()));
      }
      if (memberProfileV2ResponseData.getMileInfo() != null
          && StringUtils.isNotBlank(memberProfileV2ResponseData.getMileInfo().getTotalEffectiveMile())) {
        result.setTotalEffectiveMile(
            Integer.parseInt(memberProfileV2ResponseData.getMileInfo().getTotalEffectiveMile()));
      }
    }
    return result;
  }

  public FrequentFlyerProfileBirthdayView buildFrequentFlyerProfileBirthday(
      MemberProfileV2Birthday memberProfileBirthday) {
    FrequentFlyerProfileBirthdayView result = new FrequentFlyerProfileBirthdayView();
    if (memberProfileBirthday != null) {
      if (StringUtils.isNotBlank(memberProfileBirthday.getBirthdayDay())) {
        result.setDay(Integer.parseInt(memberProfileBirthday.getBirthdayDay()));
      }
      if (StringUtils.isNotBlank(memberProfileBirthday.getBirthdayMonth())) {
        result.setMonth(Integer.parseInt(memberProfileBirthday.getBirthdayMonth()));
      }
      if (StringUtils.isNotBlank(memberProfileBirthday.getBirthdayYear())) {
        result.setYear(Integer.parseInt(memberProfileBirthday.getBirthdayYear()));
      }
    }
    return result;
  }

  public NameView buildFrequentFlyerProfileName(
      List<MemberProfileV2Name> memberProfileNames) {
    NameView result = new NameView();
    if (CollectionUtils.isNotEmpty(memberProfileNames)) {
      MemberProfileV2Name memberProfileV2Name = memberProfileNames.get(0);
      result.setFirstName(memberProfileV2Name.getFirstname());
      result.setLastName(memberProfileV2Name.getLastname());
      result.setMiddleName(memberProfileV2Name.getMiddlename());
      result.setNameType(buildNameTypeEnum(memberProfileV2Name.getNameType()));
    }
    return result;
  }

  public NameViewPrivate.NameTypeEnum buildNameTypeEnum(
      String memberProfileV2NameType) {
    return NameViewPrivate.NameTypeEnum.UNIVERSAL;
  }

  public PhoneView buildPhone(MemberProfileV2Tel tel) {
    PhoneView result = new PhoneView();
    if (tel != null) {
      result.setNumber(tel.getTelNumber());
    }
    return result;
  }

  public PhoneView buildMobilePhone(MemberProfileV2MobTel mobTel) {
    PhoneView result = new PhoneView();
    if (mobTel != null) {
      result.setNumber(mobTel.getMobTelNumber());
    }
    return result;
  }

}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\Authorization.java

```
package com.amadeus.dapi.jalext.impl.authorization.conf.model;

import java.util.Map;

import lombok.Data;

@Data
public class Authorization {

  private Map<String, PlatformConfig> environments;
  private Map<String, String> paths;
}


```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\JalAuthorizationProperties.java

```
package com.amadeus.dapi.jalext.impl.authorization.conf.model;

import lombok.Data;

@Data
public class JalAuthorizationProperties {
  private Authorization authorization;
  private MemberProfile memberProfile;
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\MemberProfile.java

```
package com.amadeus.dapi.jalext.impl.authorization.conf.model;

import java.util.Map;

import lombok.Data;

@Data
public class MemberProfile {

  private Map<String, PlatformConfig> environments;

}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\PlatformConfig.java

```
package com.amadeus.dapi.jalext.impl.authorization.conf.model;

import lombok.Data;

@Data
public class PlatformConfig {
  private String id;

  private String secret;

  private String url;

}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\AuthorizationConfig.java

```
package com.amadeus.dapi.jalext.impl.authorization.conf;

import javax.annotation.PostConstruct;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import com.amadeus.dapi.jalext.impl.authorization.conf.model.JalAuthorizationProperties;
import com.amadeus.dapi.jalext.impl.authorization.conf.model.PlatformConfig;

@Configuration
@EnableConfigurationProperties(AuthorizationConfig.class)
@ConfigurationProperties(prefix = "external-providers-config.jal-authorization")
@ComponentScan({ "com.amadeus.dapi.jalext.impl.authorization.conf"})
public class AuthorizationConfig extends JalAuthorizationProperties {

  @Autowired
  private PlaceHolderResolver placeHolderResolver;

  @PostConstruct
  public void init() {
    if (this.getAuthorization() != null && this.getAuthorization().getEnvironments() != null) {
      for (Map.Entry<String, PlatformConfig> env : this.getAuthorization().getEnvironments().entrySet()) {
        env.getValue().setId(placeHolderResolver.resolvePlaceholder(env.getValue().getId()));
        env.getValue().setSecret(placeHolderResolver.resolvePlaceholder(env.getValue().getSecret()));
      }
    }
    if (this.getMemberProfile() != null && this.getMemberProfile().getEnvironments() != null) {
      for (Map.Entry<String, PlatformConfig> env : this.getMemberProfile().getEnvironments().entrySet()) {
        env.getValue().setId(placeHolderResolver.resolvePlaceholder(env.getValue().getId()));
        env.getValue().setSecret(placeHolderResolver.resolvePlaceholder(env.getValue().getSecret()));
      }
    }
  }
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\PlaceHolderResolver.java

```
package com.amadeus.dapi.jalext.impl.authorization.conf;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

@Component
public class PlaceHolderResolver {


  private Environment springEnvironment;

  @Autowired
  public PlaceHolderResolver(Environment springEnvironment) {
    this.springEnvironment = springEnvironment;
  }

  public String resolvePlaceholder(String placeholder) {
    if (placeholder != null && placeholder.startsWith("${") && placeholder.endsWith("}")) {
      String propertyKey = placeholder.substring(2, placeholder.length() - 1);
      return springEnvironment.getProperty(propertyKey);
    }
    return placeholder;
  }
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\retrievememberprofile\RetrieveMemberProfileCommand.java

```
package com.amadeus.dapi.jalext.impl.authorization.service.retrievememberprofile;

import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.REQMemberProfile;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.RESMemberProfile;
import com.amadeus.ocg.standard.access.CommandException;
import com.amadeus.ocg.standard.access.webservices.ng.WebServiceNGCommandMultipleInputs;
import javax.xml.ws.Holder;

public class RetrieveMemberProfileCommand extends WebServiceNGCommandMultipleInputs<RESMemberProfile> {

  private static final String TARGETED_METHOD = "getMemberProfile";

  public RetrieveMemberProfileCommand(RetrieveMemberProfileService vh) {
    super(vh, TARGETED_METHOD);
  }

  public void execute(Holder<String> userId, Holder<String> password, Holder<String> ipAddress,
                      Holder<String> jSessionId, Holder<String> region, Holder<String> memberNo,
                      Holder<String> language, Holder<String> channel,
                      Holder<String> requestCreateDate, Holder<String> responseCreateDate,
                      REQMemberProfile reqMemberProfile,
                      Holder<RESMemberProfile> resMemberProfile) throws CommandException {
    super.execute(new Object[]{userId, password, ipAddress, jSessionId, region, memberNo, language, channel,
            requestCreateDate, responseCreateDate, reqMemberProfile, resMemberProfile});
  }
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\retrievememberprofile\RetrieveMemberProfileService.java

```
package com.amadeus.dapi.jalext.impl.authorization.service.retrievememberprofile;

import com.amadeus.dapi.jalext.impl.authorization.conf.AuthorizationConfig;
import com.amadeus.dapi.jalext.impl.authorization.conf.model.PlatformConfig;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.service.GetMemberProfile;
import com.amadeus.edc.jal.webservice.models.AuthenticationBackEndType;
import com.amadeus.ocg.standard.access.webservices.ng.NGBindingProviderContext;
import com.amadeus.ocg.standard.access.webservices.ng.NGWebServiceVerbHandler;
import com.amadeus.ocg.util.dictionary.DataMap;
import com.amadeus.ocg.util.exceptions.BadClassInitException;
import lombok.Data;
import lombok.EqualsAndHashCode;
import webservice.access.client.handler.MemberProfileHandlerV2;

import javax.xml.ws.handler.Handler;
import java.util.List;
import java.util.Map;

@Data
@EqualsAndHashCode(callSuper = false)
public class RetrieveMemberProfileService extends NGWebServiceVerbHandler {

    private static final Class<?> PORT_CLASS = GetMemberProfile.class;
    private static final String RESOURCE_NAME = "memberProfile";
    private static final String WSDL_LOCATION = "GetMemberProfileWebServiceV2.wsdl";
    private static final String NAME = "GetMemberProfile";
    private static final int CONNECT_TIME_OUT_DURATION = 50000;
    private static final int REQUEST_TIME_OUT_DURATION = 50000;
    private static final String PORT_NAME = "PORT_NAME";
    private static final String USERNAME = "USERNAME";
    private static final String PASSWORD = "PASSWORD";
    private static final String SESSION_MAINTAIN = "SESSION_MAINTAIN";
    private static final String DEFAULT_PLATFORM = "http://163.211.32.32/rsvInterWeb/getMemberProfile";

    private AuthenticationBackEndType authenticationBackEndType;
    
    private AuthorizationConfig authorizationConfig;

    public RetrieveMemberProfileService(Map apiParameters) throws BadClassInitException {
      super(apiParameters);
    }

    protected String getEndPoint() {
    String endpoint = DEFAULT_PLATFORM;
    
    PlatformConfig environment = authorizationConfig.getMemberProfile().getEnvironments().get(authenticationBackEndType.getValue());
    if (environment != null) {
      endpoint = environment.getUrl();
    }
    return endpoint;
  }

    public String getGdsName() {
      return NAME;
    }

    public String getWSDLLocation() {
      if (this.getClass().getClassLoader().getResource(WSDL_LOCATION) != null) {
        return this.getClass().getClassLoader().getResource(WSDL_LOCATION).toString();
      }
      return null;
    }

    public Class<?> getPortClass() {
      return PORT_CLASS;
    }

    protected void setPort(DataMap apiSiteParameters, NGBindingProviderContext context) {
      setAuthorizationConfig((AuthorizationConfig)apiSiteParameters.get(AuthorizationConfig.class.toString()));
      setAuthenticationBackEndType(
          (AuthenticationBackEndType)apiSiteParameters.get(AuthenticationBackEndType.class.toString()));
      context.setServer_endpoint(getEndPoint());
      context.setPort_name(apiSiteParameters.getString(PORT_NAME));
      context.setUsername(apiSiteParameters.getString(USERNAME));
      context.setPassword(apiSiteParameters.getString(PASSWORD));
      context.setSession_maintain(Boolean.parseBoolean(apiSiteParameters.getString(SESSION_MAINTAIN)));
      context.setConnectTimeout(CONNECT_TIME_OUT_DURATION);
      context.setRequestTimeout(REQUEST_TIME_OUT_DURATION);
    }

    public void setHandlerChain(List<Handler> handlerChain) {
      MemberProfileHandlerV2 namespaceHander = new MemberProfileHandlerV2();
      handlerChain.add(namespaceHander);
    }
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\retrievememberprofile\RetrieveMemberProfileServiceProxy.java

```
package com.amadeus.dapi.jalext.impl.authorization.service.retrievememberprofile;

import com.amadeus.dapi.jalext.impl.authorization.conf.AuthorizationConfig;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.REQMemberProfile;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.RESMemberProfile;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.service.GetMemberProfile;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.service.IntSystemException;
import com.amadeus.edc.jal.webservice.JalWebServiceProxy;
import com.amadeus.edc.jal.webservice.models.AuthenticationBackEndType;
import com.amadeus.ocg.standard.access.CommandException;
import com.amadeus.ocg.util.exceptions.BadClassInitException;
import lombok.extern.java.Log;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.ws.Holder;
import javax.xml.ws.handler.Handler;


@Log
public class RetrieveMemberProfileServiceProxy extends JalWebServiceProxy implements GetMemberProfile {

  private Map apiParameters;
  private static final String PORT_NAME = "getMemberProfilePort";
  
  private final AuthorizationConfig authorizationConfig;

  public RetrieveMemberProfileServiceProxy(AuthorizationConfig authorizationConfig) {
    apiParameters = new HashMap<>();
    prepareConstructor(apiParameters, PORT_NAME);
    this.authorizationConfig = authorizationConfig;
  }

  public void getMemberProfile(Holder<String> userId, Holder<String> password, Holder<String> ipAddress,
                               Holder<String> jSessionId, Holder<String> region, Holder<String> memberNo,
                               Holder<String> language, Holder<String> channel, Holder<String> requestCreateDate,
                               Holder<String> responseCreateDate, REQMemberProfile reqMemberProfile,
                               Holder<RESMemberProfile> resMemberProfile) throws IntSystemException {
    getMemberProfile(userId, password, ipAddress,
            jSessionId, region, memberNo, language, channel,
            requestCreateDate, responseCreateDate,
            reqMemberProfile, resMemberProfile,
            AuthenticationBackEndType.PRODUCTION);
  }

  public void getMemberProfile(Holder<String> userId, Holder<String> password, Holder<String> ipAddress,
                               Holder<String> jSessionId, Holder<String> region, Holder<String> memberNo,
                               Holder<String> language, Holder<String> channel, Holder<String> requestCreateDate,
                               Holder<String> responseCreateDate, REQMemberProfile reqMemberProfile,
                               Holder<RESMemberProfile> resMemberProfile,
                               AuthenticationBackEndType authenticationBackEndType) throws IntSystemException {
    RetrieveMemberProfileService retrieveMemberProfileService = null;
    List<Handler> handlerChain = new ArrayList();

    try {
      apiParameters.put(AuthenticationBackEndType.class.toString(), authenticationBackEndType);
      apiParameters.put(AuthorizationConfig.class.toString(), authorizationConfig);
      retrieveMemberProfileService = new RetrieveMemberProfileService(apiParameters);
      retrieveMemberProfileService.setHandlerChain(handlerChain);
      RetrieveMemberProfileCommand command = new RetrieveMemberProfileCommand(retrieveMemberProfileService);
      command.execute(userId, password, ipAddress, jSessionId, region, memberNo, language, channel,
              requestCreateDate, responseCreateDate, reqMemberProfile, resMemberProfile);
      log.info("Member profile retrieved successfully");
    } catch (BadClassInitException | CommandException ex) {
      log.severe("Error while retrieving member profile: " + ex.getMessage());
      throw new IntSystemException(ex.getMessage(), null, ex.getCause());
    } finally {
      if (retrieveMemberProfileService != null) {
        retrieveMemberProfileService.release();
      }
    }
  }
}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\FrequentFlyerProfilesService.java

```
package com.amadeus.dapi.jalext.impl.authorization.service;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;
import javax.xml.ws.Holder;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

import lombok.extern.java.Log;

import org.apache.commons.lang.StringUtils;
import org.joda.time.LocalDateTime;

import com.amadeus.dapi.jalext.impl.authorization.builder.FrequentFlyerProfileBuilder;
import com.amadeus.dapi.jalext.impl.authorization.conf.AuthorizationConfig;
import com.amadeus.dapi.jalext.impl.authorization.conf.model.PlatformConfig;
import com.amadeus.dapi.jalext.impl.authorization.service.retrievememberprofile.RetrieveMemberProfileServiceProxy;
import com.amadeus.dapi.jalext.impl.authorization.util.StaticAuthenticationServiceVerbHandler;
import com.amadeus.edc.jal.authentication.access.client.api.TokenRequestAcceptance;
import com.amadeus.edc.jal.authentication.access.client.api.UserInformationReference;
import com.amadeus.edc.jal.authentication.access.client.impl.TokenRequestAcceptanceImpl;
import com.amadeus.edc.jal.authentication.access.client.impl.UserInformationReferenceImpl;
import com.amadeus.edc.jal.authentication.models.api.CodeVerifier;
import com.amadeus.edc.jal.authentication.models.api.TokenAcceptanceResponse;
import com.amadeus.edc.jal.authentication.models.api.UserReferenceResponse;
import com.amadeus.edc.jal.authentication.models.impl.S256CodeVerifier;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2RequestData;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.REQMemberProfile;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.RESMemberProfile;
import com.amadeus.edc.jal.webservice.models.AuthenticationBackEndType;
import com.amadeus.jal.dapi.model.base.LoginUrlConstructionsRequestViewPrivate;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfilesReplyView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfilesRequestView;

/**
 * FrequentFlyerProfilesService class to handle the request for FrequentFlyerProfiles.
 */
@Named
@Log
public class FrequentFlyerProfilesService {

  private static final String REGION = "JR";
  private static final String LANGUAGE = "GB";
  private static final String CHANNEL = "WEB";

  private static final String JAL_WEBSERVICE_DATE_PATTERN = "yyyyMMddHHmmss";
  private static final String JAPAN_TIMEZONE = "Asia/Tokyo";

  private static final String SEPARATOR = ";";

  private static final Integer MAX_JSESSIONID_LENGTH = 40;

  private TokenRequestAcceptance tokenRequestAcceptance;

  private UserInformationReference userInformationReference;

  private RetrieveMemberProfileServiceProxy retrieveMemberProfileServiceProxy;

  private FrequentFlyerProfileBuilder frequentFlyerProfileBuilder;

  private StaticAuthenticationServiceVerbHandler staticAuthenticationServiceVerbHandler;
  
  private final AuthorizationConfig authorizationConfig;

  @Inject
  public FrequentFlyerProfilesService(FrequentFlyerProfileBuilder frequentFlyerProfileBuilder, AuthorizationConfig authorizationConfig) {
    this.staticAuthenticationServiceVerbHandler = new StaticAuthenticationServiceVerbHandler(authorizationConfig);
    this.tokenRequestAcceptance = new TokenRequestAcceptanceImpl(staticAuthenticationServiceVerbHandler);
    this.userInformationReference = new UserInformationReferenceImpl(staticAuthenticationServiceVerbHandler);
    this.retrieveMemberProfileServiceProxy = new RetrieveMemberProfileServiceProxy(authorizationConfig);
    this.frequentFlyerProfileBuilder = frequentFlyerProfileBuilder;
    this.authorizationConfig = authorizationConfig; 
  }


  public Response handleRequest(FrequentFlyerProfilesRequestView request) {
    try {
      String encryptedCodeVerifier = request.getEncryptedCodeVerifier();
      AuthenticationBackEndType authenticationBackEndType = retrieveAuthenticationBackEndType(encryptedCodeVerifier);
      PlatformConfig authorizationPlatformConfig = authorizationConfig.getAuthorization().getEnvironments().get(authenticationBackEndType.getValue());
      PlatformConfig memberProfilePlatformConfig = authorizationConfig.getMemberProfile().getEnvironments().get(authenticationBackEndType.getValue());
      CodeVerifier codeVerifier = retrieveCodeVerifier(encryptedCodeVerifier, authorizationPlatformConfig);
      String callbackUrl = retrieveCallbackUrl(encryptedCodeVerifier);

      staticAuthenticationServiceVerbHandler.setAuthenticationBackEndType(authenticationBackEndType);

      TokenAcceptanceResponse tokenAcceptanceResponse =
              tokenRequestAcceptance.retrieveJalToken(request.getFrequentFlyerCode(), callbackUrl, codeVerifier);

      UserReferenceResponse userReferenceResponse =
              userInformationReference.retrieveUserInformation(tokenAcceptanceResponse.getAccessToken());

      Holder<RESMemberProfile> resMemberProfile = new Holder<>();

      /** Log the request */
      log.info("-----  Retrieve Member Profile Request  -----");
      log.info("\tRequest to retrieve member profile");
      log.info("\tUser Reference : " + userReferenceResponse.getJmbNo());
      log.info("\tToken Acceptance Access Token : " + tokenAcceptanceResponse.getAccessToken());
      log.info("\tToken Acceptance Refresh Token : " + tokenAcceptanceResponse.getRefreshToken());
      log.info("\tEncrypted Code Verifier : " + encryptedCodeVerifier);
      log.info("\tClient Id : " + authorizationPlatformConfig.getId());
      log.info("\tClient Secret : " + authorizationPlatformConfig.getSecret());
      log.info("\tUser Id : " + memberProfilePlatformConfig.getId());
      log.info("\tUser Password : " + memberProfilePlatformConfig.getSecret());
      log.info("\tJSessionID : " + generateJSessionID(codeVerifier));
      log.info("\tCallback URL : " + callbackUrl);
      log.info("\tPlatform : " + authenticationBackEndType);
      log.info("\tIP Address : " + retrieveIPAddress());
      log.info("\tRequest Create Date : " + getRequestCreateDate());
      log.info("-----  End Retrieve Member Profile Request  -----");

      retrieveMemberProfileServiceProxy.getMemberProfile(
              new Holder<>(memberProfilePlatformConfig.getId()),
              new Holder<>(memberProfilePlatformConfig.getSecret()),
              new Holder<>(retrieveIPAddress()),
              new Holder<>(generateJSessionID(codeVerifier)), new Holder<>(REGION),
              new Holder<>(userReferenceResponse.getJmbNo()), new Holder<>(LANGUAGE),
              new Holder<>(CHANNEL), new Holder<>(getRequestCreateDate()),
              new Holder<>(""),
              createReqMemberProfile(tokenAcceptanceResponse),  resMemberProfile, authenticationBackEndType);

      log.info("-----  Retrieve Member Profile Response  -----");
      if (resMemberProfile.value != null) {
        log.info("\tMember Profile Response : " + resMemberProfile.value);
        if (resMemberProfile.value.getErrorOrWarningInfo() != null) {
          log.info("\tError Or Warning Info : " + resMemberProfile.value.getErrorOrWarningInfo());
          log.info("\tError Code : " + resMemberProfile.value.getErrorOrWarningInfo().getErrorCode());
          log.info("\tError Message : " + resMemberProfile.value.getErrorOrWarningInfo().getFreeText());
        }
        if (resMemberProfile.value.getResponseData() != null) {
          log.info("\tMember Profile Response Data : " + resMemberProfile.value.getResponseData());
          if (resMemberProfile.value.getResponseData().getMemberProfileBase() != null) {
            log.info("\tMember Profile Base No : "
                + resMemberProfile.value.getResponseData().getMemberProfileBase().getMemberNo());
          }
        }
      }
      log.info("-----  End Retrieve Member Profile Response  -----");

      if (resMemberProfile.value != null) {
        if (resMemberProfile.value.getErrorOrWarningInfo() != null
                && StringUtils.isNotBlank(resMemberProfile.value.getErrorOrWarningInfo().getErrorCode())) {
          log.severe("Error while retrieving member profile");
          log.severe("Error Code : " + resMemberProfile.value.getErrorOrWarningInfo().getErrorCode());
          throw new RuntimeException("Error while retrieving member profile: " + resMemberProfile.value.getErrorOrWarningInfo());
        }

        if (resMemberProfile.value.getResponseData() != null) {
          FrequentFlyerProfileView frequentFlyerProfileView = frequentFlyerProfileBuilder
                  .buildFrequentFlyerProfile(resMemberProfile.value.getResponseData());
          FrequentFlyerProfilesReplyView reply = new FrequentFlyerProfilesReplyView();
          reply.setFrequentFlyerProfile(frequentFlyerProfileView);
          return Response.ok(reply).build();
        }

        throw new RuntimeException("Error while retrieving member profile: No response data value");
      }

    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    return Response.serverError().build();
  }

  /** Retrieve the code verifier from the request */
  private CodeVerifier retrieveCodeVerifier(String codeVerifier, PlatformConfig environment) {
    String randomValue = codeVerifier.split(SEPARATOR)[0];
    String date = codeVerifier.split(SEPARATOR)[1];
    LocalDateTime localDateTime = LocalDateTime.parse(date);
    return new S256CodeVerifier(environment.getId(), environment.getSecret(), randomValue, localDateTime);
  }

  /** Retrieve the callback URL from the request */
  private static String retrieveCallbackUrl(String codeVerifier) {
    return codeVerifier.split(SEPARATOR)[2];
  }

  /** Retrieve the authentication back end type from the request */
  public static AuthenticationBackEndType retrieveAuthenticationBackEndType(String codeVerifier) {
    String platform = codeVerifier.split(SEPARATOR)[3];
    LoginUrlConstructionsRequestViewPrivate.AuthenticationPlatformEnum authenticationPlatformEnum =
            LoginUrlConstructionsRequestViewPrivate.AuthenticationPlatformEnum.fromValue(platform);
    if (authenticationPlatformEnum != null) {
      AuthenticationBackEndType authenticationBackEndType =
              AuthenticationBackEndType.valueOfIgnoreCase(authenticationPlatformEnum.toString());
      if (authenticationBackEndType != null) {
        return authenticationBackEndType;
      }
    }
    return AuthenticationBackEndType.PRODUCTION;
  }

  /** Create the REQMemberProfile object with the token acceptance response */
  private static REQMemberProfile createReqMemberProfile(TokenAcceptanceResponse tokenAcceptanceResponse) {
    REQMemberProfile reqMemberProfile = new REQMemberProfile();
    MemberProfileV2RequestData requestData = new MemberProfileV2RequestData();

    if (tokenAcceptanceResponse != null) {
      requestData = requestData
              .withAccessToken(tokenAcceptanceResponse.getAccessToken())
              .withRefreshToken(tokenAcceptanceResponse.getRefreshToken());
    }

    reqMemberProfile.setRequestData(requestData);

    return reqMemberProfile;
  }

  /** Get the current date in the JAL WebService format */
  private static String getRequestCreateDate() {
    TimeZone japanTimeZone = TimeZone.getTimeZone(JAPAN_TIMEZONE);
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(JAL_WEBSERVICE_DATE_PATTERN);
    simpleDateFormat.setTimeZone(japanTimeZone);
    return simpleDateFormat.format(new Date()) + "JST";
  }

  /** Generate a JSessionID */
  private static String generateJSessionID(CodeVerifier codeVerifier) {
    return codeVerifier.getRandomValue().substring(0, MAX_JSESSIONID_LENGTH);
  }

  private String retrieveIPAddress() {
    try {
      return InetAddress.getLocalHost().getHostAddress();
    } catch (UnknownHostException e) {
      throw new RuntimeException(e);
    }
  }

}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\LoginUrlConstructionsService.java

```
package com.amadeus.dapi.jalext.impl.authorization.service;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;

import com.amadeus.dapi.jalext.impl.authorization.conf.AuthorizationConfig;
import com.amadeus.dapi.jalext.impl.authorization.conf.model.PlatformConfig;
import com.amadeus.dapi.jalext.impl.authorization.util.StaticAuthenticationServiceVerbHandler;
import com.amadeus.edc.jal.authentication.access.client.api.AuthenticationRequestAcceptance;
import com.amadeus.edc.jal.authentication.access.client.impl.AuthenticationRequestAcceptanceImpl;
import com.amadeus.edc.jal.authentication.models.api.AuthenticationContextRequest;
import com.amadeus.edc.jal.authentication.models.api.AuthenticationResponse;
import com.amadeus.edc.jal.authentication.models.api.AuthenticationState;
import com.amadeus.edc.jal.authentication.models.api.CodeVerifier;
import com.amadeus.edc.jal.authentication.models.impl.AuthenticationStateImpl;
import com.amadeus.edc.jal.authentication.models.impl.HttpRequestException;
import com.amadeus.edc.jal.authentication.models.impl.S256CodeVerifier;
import com.amadeus.edc.jal.webservice.models.AuthenticationBackEndType;
import com.amadeus.jal.dapi.model.core.LoginUrlConstructionsReplyView;
import com.amadeus.jal.dapi.model.core.LoginUrlConstructionsRequestView;
import lombok.extern.java.Log;

/**
 * LoginUrlConstructionsService class to handle the request for LoginUrlConstructions.
 */
@Named
@Log
public class LoginUrlConstructionsService {

  private final AuthorizationConfig authorizationConfig;

  private static final String SEPARATOR = ";";

  private StaticAuthenticationServiceVerbHandler staticAuthenticationServiceVerbHandler;

  private AuthenticationRequestAcceptance authenticationRequestAcceptance;

  @Inject
  public LoginUrlConstructionsService(AuthorizationConfig authorizationConfig) {
    this.staticAuthenticationServiceVerbHandler = new StaticAuthenticationServiceVerbHandler(authorizationConfig);
    this.authenticationRequestAcceptance =
            new AuthenticationRequestAcceptanceImpl(staticAuthenticationServiceVerbHandler);
    this.authorizationConfig = authorizationConfig;
  }


  public Response handleRequest(LoginUrlConstructionsRequestView request) {
    try {
      AuthenticationBackEndType authenticationBackEndType = AuthenticationBackEndType.PRODUCTION;
      if (request.getAuthenticationPlatform() != null) {
        AuthenticationBackEndType fromRequest =
                AuthenticationBackEndType.valueOfIgnoreCase(request.getAuthenticationPlatform().toString());
        if (fromRequest != null) {
          authenticationBackEndType = fromRequest;
        }
      }
      PlatformConfig environment =
          authorizationConfig.getAuthorization().getEnvironments().get(authenticationBackEndType.getValue());

      CodeVerifier codeVerifier = new S256CodeVerifier(environment.getId(), environment.getSecret());

      staticAuthenticationServiceVerbHandler.setAuthenticationBackEndType(authenticationBackEndType);

      // Useless in a stateless context like DAPI,
      // But AuthenticationRequestAcceptance would throw an exception if the state is empty
      AuthenticationState state = new AuthenticationStateImpl("", "", "", "");

      AuthenticationResponse authenticationResponse = this.authenticationRequestAcceptance
              .proceedAuthenticationRequestAcceptance(request.getCallbackUrl(),
                      request.getGuestUrl(), codeVerifier, state, request.getLang(),
                      request.isIsAutoLogin() ? AuthenticationContextRequest.AUTO_LOGIN.getValue() : AuthenticationContextRequest.DEFAULT.getValue());
      LoginUrlConstructionsReplyView reply = new LoginUrlConstructionsReplyView();
      reply.setUrlConstructed(authenticationResponse.getLocation());
      reply.setEncryptedCodeVerifier(getEncryptedCodeVerifierValues(codeVerifier, request));

      return Response.ok(reply).build();
    } catch (HttpRequestException e) {
      throw new RuntimeException(e);
    }
  }

  private static String getEncryptedCodeVerifierValues(CodeVerifier codeVerifier,
                                                       LoginUrlConstructionsRequestView request) {
    return codeVerifier.getRandomValue() + SEPARATOR + codeVerifier.getDate().toString() + SEPARATOR
            + request.getCallbackUrl() + SEPARATOR + request.getAuthenticationPlatform();
  }

}

```

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\util\StaticAuthenticationServiceVerbHandler.java

```
package com.amadeus.dapi.jalext.impl.authorization.util;

import com.amadeus.dapi.jalext.impl.authorization.conf.AuthorizationConfig;
import com.amadeus.dapi.jalext.impl.authorization.conf.model.PlatformConfig;
import com.amadeus.edc.jal.authentication.AuthenticationServiceVerbHandler;
import com.amadeus.edc.jal.authentication.models.api.JmbLoginEndpointNames;
import com.amadeus.edc.jal.authentication.models.api.StubEndpointURIs;
import com.amadeus.edc.jal.webservice.models.AuthenticationBackEndType;
import lombok.Data;

import javax.inject.Inject;
import javax.inject.Named;

@Named("authenticationServiceVerbHandler")
@Data
public class StaticAuthenticationServiceVerbHandler implements AuthenticationServiceVerbHandler {

  private static final String DEFAULT_PLATFORM = "https:/jallogin.jal.co.jp";
  private static final String DEFAULT_ENDPOINT = "/";

  private final AuthorizationConfig authorizationConfig;
  private AuthenticationBackEndType authenticationBackEndType;

  @Inject
  public StaticAuthenticationServiceVerbHandler(AuthorizationConfig authorizationConfig) {
    this.authorizationConfig = authorizationConfig;
  }

  @Override
  public String getEndPoint(AuthenticationBackEndType authenticationBackEndType,
      JmbLoginEndpointNames jmbLoginEndpointNames, StubEndpointURIs stubEndpointURIs) {

    String endpoint = DEFAULT_ENDPOINT;
    String url = DEFAULT_PLATFORM;

    PlatformConfig environment =
        authorizationConfig.getAuthorization().getEnvironments().get(authenticationBackEndType.getValue());
    if (environment != null) {
      url = environment.getUrl();
      if (jmbLoginEndpointNames != null) {
        endpoint = authorizationConfig.getAuthorization().getPaths().get(jmbLoginEndpointNames.getValue());
      }
    }
    return url + endpoint;
  }

  public void setAuthenticationBackEndType(AuthenticationBackEndType authenticationBackEndType) {
    this.authenticationBackEndType = authenticationBackEndType;
  }

  @Override
  public String getEndPoint(JmbLoginEndpointNames jmbLoginEndpointNames,
                              StubEndpointURIs stubEndpointURIs) {
    if (authenticationBackEndType == null) {
      return getEndPoint(AuthenticationBackEndType.PRODUCTION, jmbLoginEndpointNames, stubEndpointURIs);
    }
    return getEndPoint(authenticationBackEndType, jmbLoginEndpointNames, stubEndpointURIs);
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\configuration\ACPRequestHandler.java

```
package com.amadeus.dapi.jalext.common.configuration;

import java.rmi.RemoteException;
import java.util.Optional;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.digital.api.config.sitecontext.SiteContext;
import com.amadeus.digital.api.config.sitecontext.SiteContextException;
import com.amadeus.digital.api.config.sitecontext.SiteContextHelper;
import com.amadeus.digital.api.lib.ezt.configuration.implementation.EztConfigurationProvider;
import com.amadeus.digital.api.util.dictionary.DataList;
import com.amadeus.digital.api.util.exceptions.KeyNotFoundException;
import com.amadeus.middleware.securitycontext.SecurityContext;

/**
 * Class to retrieve site parameter and global lists
 * 
 * @author smallick
 */
@Named("acpRequestHandler")
public class ACPRequestHandler {  

  private static final Logger LOGGER = LoggerFactory.getLogger(ACPRequestHandler.class);

  private EztConfigurationProvider configurationProvider;

  private SecurityContext securityContext;  
  
  /**
   * Constructor to inject required context details
   * 
   * @param configurationProvider
   *          configurationProvider
   * @param securityContext
   *          securityContext
   */
  @Inject
  public ACPRequestHandler(EztConfigurationProvider configurationProvider, SecurityContext securityContext) {
    this.configurationProvider = configurationProvider;
    this.securityContext = securityContext;
  }

  /**
   * Method returns the param value for a site parameter
   *
   * @param paramId
   * @return
   */
  public String getParamValue(String paramId, String defaultValue) {
    String paramValue = defaultValue;
    try {
      SiteContext siteContext = configurationProvider.initSiteContext(securityContext);
      paramValue = SiteContextHelper.getParameter(siteContext, String.class, defaultValue, paramId);
    } catch (SiteContextException e) {
      LOGGER.error("Cannot read the site param {}: {}", paramId, ExceptionUtils.getStackTrace(e));
    }
    return paramValue;
  }
  
  public boolean getBooleanValue(String paramId, boolean defaultValue) {
    boolean paramValue = defaultValue;
    try {
      SiteContext siteContext = configurationProvider.initSiteContext(securityContext);
      paramValue = SiteContextHelper.getParameter(siteContext, Boolean.class, defaultValue, paramId);
    } catch (SiteContextException e) {
      LOGGER.error("Cannot read the site param {}: {}", paramId, ExceptionUtils.getStackTrace(e));
    }
    return paramValue;
  }  
  
    public Integer getIntegerValue(String paramId, Integer defaultValue) {
    Integer paramValue = defaultValue;
    try {
      SiteContext siteContext = configurationProvider.initSiteContext(securityContext);
      paramValue = SiteContextHelper.getParameter(siteContext, Integer.class, defaultValue, paramId);
    } catch (SiteContextException e) {
      LOGGER.error("Cannot read the site param {}: {}", paramId, ExceptionUtils.getStackTrace(e));
    }
    return paramValue;
  } 

  /**
   * Method returns the DataList for a globalListName
   *
   * @param globalListName
   * @return
   */
  public Optional<DataList> getGlobalList(String globalListName) {
    try {
      SiteContext context = configurationProvider.initSiteContext(securityContext);
      return Optional.ofNullable(context.getList(globalListName));
    } catch (SiteContextException | KeyNotFoundException | RemoteException e) {
      LOGGER.error("Cannot read the gloal list {}: {}", globalListName, ExceptionUtils.getStackTrace(e));
      return Optional.empty();
    }
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\configuration\SiteParameters.java

```
/**
 *
 */
package com.amadeus.dapi.jalext.common.configuration;

/**
 * One place definition of site parameters
 */
public final class SiteParameters {
  
  /**
   * Site Parameter to check if prices of the ancillaries to be displayed in both miles & cash
   */
  public static final String SERVICES_AND_SEATS_PRICING_M_AND_C = "SITE_SERVICES_AND_SEATS_PRICING_IN_MILES_AND_CASH";

  public static final String RETRIEVE_PROMOCODE_ELIGIBILITY = "SITE_RETRIEVE_PROMOCODE_ELIGIBILITY";

  /**
   * Site Parameter to check if the confirmation email should be sent for disruption & cancellation calls
   */
  public static final String SEND_CONFIRMATION_EMAIL = "SITE_SEND_CONFIRMATION_EMAIL";

  /**
   * Preventing instances of this class to be created
   */
  private SiteParameters() {
  }

  // Chaining payment to issuance. This is an orchestration parameter so should not be set in the issuance component
  public static final String SITE_CHAIN_ISSUANCE_AFTER_PAYMENT = "SITE_CHAIN_ISSUANCE_AFTER_PAYMENT";
  
  public static final String SITE_SKIP_ISSUANCE_FOR_FOP_CODES = "SITE_SKIP_ISSUANCE_FOR_FOP_CODES";

  public static final String REQUIRE_PAYMENT_METHOD_FOR_ORDER = "SITE_REQUIRE_PAYMENT_METHOD_FOR_ORDER";

  public static final String LINK_BASE_URL = "SITE_LINK_BASE_URL";

  // Specify if lastName check should be avoided. If it is TRUE, check lastName is not done.
  public static final String SITE_AVOID_LASTNAME_CHECK = "SITE_AVOID_LASTNAME_CHECK";

  public static final String SITE_ALLOW_DELETION_OF_CHARGEABLE_SEATS = "SITE_ALLOW_DELETION_OF_CHARGEABLE_SEATS";

  // Services
  public static final String SITE_ALLOW_DELETION_OF_CHARGEABLE_SERVICES = "SITE_ALLOW_DELETION_OF_CHARGEABLE_SERVICES";

  /**
   * When booking and pricing of a free service, if anything goes wrong and this parameter is true, the Order will
   * be created displaying a warning message with the IDs of the failed free services. However, if the parameter
   * is false the Order will not be created and an Error message will be returned.
   */
  public static final String FREESERVICE_BOOKING_FAILURE_ALLOWED = "SITE_FREESERVICE_BOOKING_FAILURE_ALLOWED";

  /**
   * When booking and pricing of a chargeable service if anything goes wrong and this parameter is true, the Order will be
   * created displaying a warning message with the IDs of the failed chargeable services. However, if the parameter is false
   * the Order will not be created and an Error message will be returned.
   */
  public static final String CHARGEABLESERVICE_BOOKING_FAILURE_ALLOWED = "SITE_CHARGEABLESERVICE_BOOKING_FAILURE_ALLOWED";


  /**
   * @since CR 15207228 - AAAS 6525/6562 POST/Order Service: Book Only + TPISGQ
   * This site parameter enables to send manage trip with option book only then explicitly call pricing verb TPISGQ</br>
   * and TSM creation verb TAUSCQ in post order, as opposed to manage trip with bookandprice, which lets CS do </br>
   * the booking, pricing and TSM creation
   *
   */
  public static final String SERVICES_BOOK_THEN_PRICE = "SITE_SERVICES_BOOK_THEN_PRICE";

  public static final String SEPARATE_SURCHARGES_FROM_TAXES = "SITE_SEPARATE_SURCHARGES_FROM_TAXES";

  /**
   * Allows or blocks payment with Miles using the frequent flyer card of a non-traveler
   */
  public static final String SITE_ALLOW_REDEEM_FOR_SOMEONE_ELSE = "SITE_ALLOW_REDEEM_FOR_SOMEONE_ELSE";
  
  /**
   * Allows or blocks Frequent flyers details in input
   */
  public static final String SITE_ALLOW_FF_FROM_INPUT = "SITE_ALLOW_FF_FROM_INPUT";

  /**
   * This parameter is used to define a maximum slider rank position to be requested while calling Miles&cash Slider
   * rank.
   */
  public static final String SLD_NUM_RANKS = "SITE_SLD_NUM_RANKS";

  /**
   * This parameter is used to define the slider rank values (partitions) to be requested while calling Miles&cash
   * Slider rank. It take precedence over the parameter SLD_NUM_RANKS, if both are defined.
   */
  public static final String SLD_RANK_LIST = "SITE_SLD_RANK_LIST";

  public static final String SITE_ENABLE_SEATMAP_PERPAX = "SITE_ENABLE_SEATMAP_PERPAX";

  /**
   * Enables or disables miles and cash payment single slider
   */
  public static final String SITE_ENABLE_SINGLE_SLIDER = "SITE_ENABLE_SINGLE_SLIDER";

  /**
   * Enables or disables creation of FQTR SSRs when paying with miles and cash
   */
  public static final String SITE_CREATE_FQTR_IN_MILES_CASH = "SITE_CREATE_FQTR_IN_MILES_CASH";

  /**
   * When this parameter is enabled, cart checkout will create an SSR FQTR element to represent the FF card that
   * was used to bias the offer
   */
  public static final String SITE_ENABLE_FQTR_FROM_OFFER_FFN = "SITE_ENABLE_FQTR_FROM_OFFER_FFN";

  /**
   * When this parameter is enabled, cart checkout will create an SSR FQTO element to represent the FF card that
   * was used to bias the offer
   */
  public static final String SITE_ENABLE_FQTO_FROM_OFFER_FFN = "SITE_ENABLE_FQTO_FROM_OFFER_FFN";

  // Payment Methods

  /**
   * Enables FOP Catalog message (TFPCGQ) to display available Forms of Payment
   */
  public static final String SITE_PAY_USE_FOP_CATALOG = "SITE_PAY_USE_FOP_CATALOG";

  /**
   * Site parameter to check if Payment SDK is supported.
   */
  public static final String SITE_PAY_USE_PAYMENT_SDK = "SITE_PAY_USE_PAYMENT_SDK";

  /**
   * Site parameter to configure session timeout when creating a session in Checkout Form Payment
   */
  public static final String SITE_PAYMENT_SDK_SESSION_TIMEOUT = "SITE_PAYMENT_SDK_SESSION_TIMEOUT";

  /**
   * Enables Seat multiCoupons option
   */
  public static final String ENABLE_SEAT_MULTICOUPON = "SITE_ENABLE_SEAT_MULTICOUPON";

  /**
   * Return 00 as seat number for seat SSRs with no seat number instead of filtering them out
   */
  public static final String RETURN_SEATS_WITH_NO_SEATNUMBER = "SITE_RETURN_SEATS_WITH_NO_SEATNUMBER";

  /**
   * @since CR15207228 It's used in Dynamic Bundle context to allow the delete of non issued TSMs and the repricing of
   *        all non issued services.
   */
  public static final String SERVICES_REPRICE_ALL_NON_ISSUED_SERVICES = "SITE_SERVICES_REPRICE_ALL_NON_ISSUED_SERVICES";

  /**
   * Activates the repricing of services and seats at Order repricing time (regardless of the presence of AAS promocode
   * or empty promocode (delete promocode usecase) in user input)
   */
  public static final String ENABLE_SERVICES_REPRICING_IN_ORDER =
      "SITE_ENABLE_SERVICES_REPRICING_IN_ORDER";
  
  /**
   * @since CR15207228/AAAS-6766. It contains SSRs codes separated by ";", for which TSMs should not be deleted.
   */
  public static final String SERVICES_EXCLUDED_SSR_CODES_FOR_REPRICING =
      "SITE_SERVICES_EXCLUDED_SSR_CODES_FOR_REPRICING";

  /**
   * Contains SSRs codes separated by ";", for which TSMs should be deleted.
   */
  public static final String SERVICES_INCLUDED_SSR_CODES_FOR_REPRICING
      = "SITE_SERVICES_INCLUDED_SSR_CODES_FOR_REPRICING";

  /**
   * Activation of Air offer and services auto revalidation (repricing) when Frequent flyer gets added/removed from
   * Order.<BR>
   * NB: Same parameter also used for Cart
   */
  public static final String ENABLE_OFF_AND_SERV_AUTO_REVAL = "SITE_ENABLE_OFF_AND_SERV_AUTO_REVAL"; 
  
  /**
   * @since DAPI-7095 Stores Value of Expiry dates for different versions of both keys for each airline, contains the
   *        expiry date of the key version in parameter_value.
   */
  public static final String SITE_EXTPAY_KEY_1_EXP_DATE = "SITE_EXTPAY_KEY_1_EXP_DATE";
  public static final String SITE_EXTPAY_KEY_2_EXP_DATE = "SITE_EXTPAY_KEY_2_EXP_DATE";

  /**
   * @since DAPI-7099 Stores the value of the buffer period for
   * expired keys for each airline, represents the number of
   * days the expired key can still be used after it's expiry date.
   * It is of type integer with default value 1.
   */
  public static final String EXTPAY_KEY_BUFFER_PERIOD = "SITE_EXTPAY_KEY_BUFFER_PERIOD";

  /**
   * Site parameter determining whether or not checksum validation
   * should be performed.
   *
   * @since DAPI-7094
   */
  public static final String PAY_VERIFY_CHECKSUM = "SITE_PAY_VERIFY_CHECKSUM";

  /**
   * SERVICES_OUTPUT_MODE site param value specifies how services should be exposed in Service Catalogue Output.
   *
   * @since DAPI-9267
   */
  public static final String SERVICES_OUTPUT_MODE = "SITE_SERVICES_OUTPUT_MODE";

  public static final String FREESEAT_BOOKING_FAILURE_ALLOWED = "SITE_FREESEAT_BOOKING_FAILURE_ALLOWED";

  public static final String CHARGSEAT_BOOKING_FAILURE_ALLOWED = "SITE_CHARGSEAT_BOOKING_FAILURE_ALLOWED";

  public static final String SSR_CONF_STATUS_LIST = "SITE_SSR_CONF_STATUS_LIST";

  public static final String SSR_PENDING_STATUS_LIST = "SITE_SSR_PENDING_STATUS_LIST";

  /**
   * Site parameter determining whether or not external payment enabled for add seat or services
   *
   * @since DAPI-11095
   */
  public static final String ENABLE_EXTPAY_SEATS_SERVICES = "SITE_ENABLE_EXTPAY_SEATS_SERVICES";

  /**
   * Site parameter determining whether or not transaction requires
   * a manual approval code.
   *
   * @since DAPI-11223
   */
  public static final String MANUAL_APPROVAL_CODE_ALLOWED = "SITE_MANUAL_APPROVAL_CODE_ALLOWED";

  /**
   * Parameter which enables the creation of TSM to match the number of services added to a cart. Services are grouped
   * based on their recommendation index and then priced accordingly.
   *
   * @since DAPI-11310
   */
  public static final String SERVICES_ENABLE_GROUPING_IN_PRICING = "SITE_SERVICES_ENABLE_GROUPING_IN_PRICING";

  /**
   * Parameter which defines the time buffer (ms) for the wait between retries in case of EOT error after void/refund
   */
  public static final String REFUND_TIME_BUFFER = "SITE_REFUND_TIME_BUFFER";

  /**
   * Parameter which enables the computation of OPC in TK XL computation
   *
   * @since DAPI-10460
   */
  public static final String USE_OPC_IN_TK_DATE = "SITE_USE_OPC_IN_TK_DATE";
  
  /**
   * Requests OPC/OPW addition to the PNR before the EOT in exchange flows (both revalidation and reissue)
   */
  public static final String USE_OPC_BEFORE_ATC_COMMIT = "SITE_USE_OPC_BEFORE_ATC_COMMIT";

  /**
   * Parameters which fetch the value for the Office ID
   *
   * @since DAPI-10460
   */
  public static final String SITE_OFFICE_ID = "SITE_OFFICE_ID";

  public static final String SITE_PBK_TK_ARGT_OFFICE = "SITE_PBK_TK_ARGT_OFFICE";

  /**
   * Paramter which determines whether or not to call the fop list verb TFPLCQ and retrieve generic mops.
   *
   * @since DAPI-11892
   */
  public static final String PAY_USE_FOP_LIST = "SITE_PAY_USE_FOP_LIST";

  /**
   * Parameter used to determine the Non interactive inventory air segments
   *
   * @since DAPI-12129
   */
  public static final String IS_SEGMENT_NON_INTERACTIVE_INVENTORY = "SITE_NON_INTERACTIVE_INVENTORY_SEGMENTS";

  /**
   * Used for to wait after some time for configured amount of time to get the status of PNR
   */
  public static final String SITE_MINIMUM_WAIT_TIME = "SITE_MINIMUM_WAIT_TIME";

  /**
   * Parameter used to determine the Non interactive inventory Seats and Services
   *
   * @since DAPI-12954
   */
  public static final String NON_INTERACTIVE_INVENTORY_SEAT_SERVICE = "SITE_NON_INTERACTIVE_INVENTORY_SEAT_SERVICE";

  public static final String ANCILLARY_ELEMENTS_NON_INTERACTIVE_LIST = "SITE_ANCILLARY_ELEMENTS_NON_INTERACTIVE_LIST";

  /**
   * Used to configure whether bounds are computed based on the disruption context details from the self-reaccomodation
   * done on Central system
   */
  public static final String RETURN_DISRUPTION_CONTEXT_DETAILS = "SITE_RETURN_DISRUPTION_CONTEXT_DETAILS";

  /**
   * Parameter used to determine if SSR FQTV line in an order should be trusted as it is, or not.
   * SSR FQTV line in PNR if prefixed by <b>*</b> it is validated FQTV, otherwise it is not validated FQTV.
   *
   * @Since DAPI-13535
   */
  public static final String TRUST_NONVALIDATED_FQTV = "SITE_TRUST_NONVALIDATED_FQTV";


  /**
   * Allows the default Expiration Datetime (generated using another Site Parameter SITE_PBK_TK_ARGT_EXP_TIME) to be
   * overridden by the requested Expiration Datetime
   *
   * @since DAPI-12152
   */
  public static final String ALLOW_OVERRIDE_EXP_DATE = "SITE_ALLOW_OVERRIDE_EXP_DATE";

  /**
   * Indicates if miles and cash slider/payment is enabled or not.
   */
  public static final String ENABLE_MILES_CASH_SLIDER = "SITE_ENABLE_MILES_CASH_SLIDER";


  /**
   * Indicates if  award payment is enabled or not.
   */
  public static final String ENABLE_AWARD_CONVERTER_PAYMENT = "SITE_ENABLE_AWARD_CONVERTER_PAYMENT";

  /**
   * Indicates if warnings are enabled or not.
   */
  public static final String SHOW_WARNINGS_AT_ORDER_CREATION = "SITE_SHOW_WARNINGS_AT_ORDER_CREATION";


  /**
   * Tells if the baggage in weight concept must be excluded from the price discrepancy check when a form of payment is
   * passed while adding a service to order.It has no effect when no form of payment is passed in input (services' *
   * pre-order).
   *
   * @since AAS-15
   */
  public static final String SERVICES_BAGGAGE_WEIGHT_CONCEPT_KF_WHEN_FOP_ALLOWED =
      "SITE_SERVICES_BAGGAGE_WEIGHT_CONCEPT_KF_WHEN_FOP_ALLOWED";

  /**
   * Boolean. Determines whether or not acknowledge functionality is allowed in the reacc flow.
   */
  public static final String ALLOW_ACKNOWLEDGE = "SITE_ALLOW_ACKNOWLEDGE";
  
  /**
   * Boolean. Determines whether or not acknowledge functionality is allowed for wait-list segments.
   */
  public static final String ALLOW_WAITLIST_ACKNOWLEDGE = "SITE_ALLOW_WAITLIST_ACKNOWLEDGE";

  /**
   * Boolean. Determines whether or not acknowledge seats functionality is allowed.
   */
  public static final String ALLOW_SEAT_ACKNOWLEDGE = "SITE_ALLOW_SEAT_ACKNOWLEDGE";

  /**
   * List of allowed confirmed status codes for reacc flow.
   */
  public static final String ALLOW_ACK_CONFIRMED_STATUSES = "SITE_ALLOW_ACK_CONFIRMED_STATUSES";

  /**
   * Boolean for whether or not hotel cancel functionality is enabled.
   */
  public static final String ALLOW_DELETION_OF_HOTELS = "SITE_ALLOW_DELETION_OF_HOTELS";
  
  /**
   * Boolean indicating if full traveler contacts should be sent at hotel booking time (On top of traveler email sent as
   * travel arranger email, we can send traveler phone number as travel arranger phone and traveler email as traveler
   * contact information). False by default to keep backward compatibility
   */
  public static final String HOTEL_SEND_FULL_TRAVELER_CONTACTS = "SITE_HOTEL_SEND_FULL_TRAVELER_CONTACTS";

  
  /**
   * API parameter to determine if Present-Credit-Card indicator should be sent when requested in input.
   */
  public static final String ENABLE_PAY_REQ_PRESENT_CC = "SITE_ENABLE_PAY_REQ_PRESENT_CC";

  /**
   * Site parameter determining whether or not use carrier code from segment in the osi element
   */
  public static final String USE_CARRIER_CODE_FROM_SEGMENT_IN_OSI = "SITE_USE_CARRIER_CODE_FROM_SEGMENT_IN_OSI";
  
  /**
   * Site parameter determining whether an approval code is mandatory
   * 
   */
  public static final String MANUAL_APPROVAL_CODE_MANDATORY = "SITE_MANUAL_APPROVAL_CODE_MANDATORY";

  public static final String VALID_GMOP_ONLINE_LIST = "SITE_VALID_GMOP_ONLINE_LIST";

  /**
   * Site parameter to set allowed remarks to be displayed
   */
  public static final String ALLOWED_REMARKS_PUBLIC_DISPLAY = "SITE_ALLOWED_REMARKS_PUBLIC_DISPLAY";

  /**
   * Site parameter to check configuration enabled to allow remarks or not
   */
  public static final String ALLOW_REMARK_REQUEST = "SITE_ALLOW_REMARK_IN_REQUEST";

  /**
   * Site parameter to enable expanded CC options: VendorCode and ID etc.
   */

  public static final String ALLOW_EXPANDED_CC = "SITE_ALLOW_EXPANDED_CC";

  /**
   * Site parameter to check configuration enabled to allow OSIs or not
   */
  public static final String ALLOW_OSI_REQUEST = "SITE_ALLOW_OSIS_IN_REQUEST";

  /**
   * Site parameter to check configuration enabled to allow SSRs or not
   */
  public static final String ALLOW_SSR_REQUEST = "SITE_ALLOW_SSRS_IN_REQUEST";

  /**
   * Site parameter to check configuration enabled to allow SKs or not
   */
  public static final String ALLOW_SK_REQUEST = "SITE_ALLOW_SKS_IN_REQUEST";
  
  /**
   * Site parameter to filter allowed SSRs. Regular expression to match special service request codes for public
   * display. null value will block all SSRs.
   */
  public static final String ALLOWED_SSR_CODES_PUBLIC_DISPLAY = "SITE_ALLOWED_SSR_CODES_PUBLIC_DISPLAY";

  /**
   * Site parameter to filter allowed Special Keywords. Regular expression to match special keywords code. null value
   * will block all special keywords.
   */
  public static final String ALLOWED_SPECIAL_KEYWORDS_PUBLIC_DISPLAY = "SITE_ALLOWED_SPECIAL_KEYWORDS_PUBLIC_DISPLAY";

  /**
   * Site Parameter to send extra fraud data in TFPICQ
   */
  public static final String PAY_EXTRA_FRAUD_DATA = "SITE_PAY_EXTRA_FRAUD_DATA";
  
  public static final String PAY_FRAUD_TRAVELER_PHONE_EMAIL = "SITE_PAY_FRAUD_TRAVELER_PHONE_EMAIL";

  /**
   * Site parameter to check if approval type have been setup to External
   */
  public static final String EXTERNAL_APPROVAL_TYPE = "SITE_EXTERNAL_APPROVAL_TYPE";
  
  public static final String THREEDS_USE = "SITE_THREEDS_USE";

  public static final String USER_NOTIF_HANDLING_AT = "SITE_USER_NOTIF_HANDLING_AT";
  
  public static final String ENABLE_FACTS_FOR_EMAIL_NOTIF = "SITE_ENABLE_FACTS_FOR_EMAIL_NOTIF";

  public static final String ORDER_FINISHING_MULTI_ENDPOINTS = "SITE_ORDER_FINISHING_MULTI_ENDPOINTS";
  
  public static final String VALID_GMOP_ATC_OFFLINE_LIST = "SITE_VALID_GMOP_ATC_OFFLINE_LIST";

  /**
   * Site parameter to check if we're allowed to send 3DS data to the insurance provider
   */
  public static final String ENABLE_3DS_TRANSPORTATION_INS = "SITE_ENABLE_3DS_TRANSPORTATION_INS";
  /**
   * Site parameter to check whether to check for any discrepancy warning present in PNR Reply
   */
  public static final String ATC_TICKET_DISCREPANCY_CHECK = "SITE_ATC_TICKET_DISCREPANCY_CHECK";
  
  /**
   * Allow name update in ATC flow
   */
  public static final String ATC_ALLOW_NAME_UPDATE = "SITE_ATC_ALLOW_NAME_UPDATE";
  
  /**
   * Allow name change in ATC flow
   */
  public static final String ATC_ALLOW_PASSENGER_CHANGE = "SITE_ATC_ALLOW_PASSENGER_CHANGE";
  
  /**
   * Allow name change in ATC flow when Order contains several pax
   */
  public static final String ATC_ALLOW_PASSENGER_CHANGE_MULTIPAX = "SITE_ATC_ALLOW_PASSENGER_CHANGE_MULTIPAX";
  
  /**
   * Site parameter to fetch automatic SSR document type.
   */
  public static final String SITE_AUTOMATIC_SSR_DOCTYPE = "SITE_AUTOMATIC_SSR_DOCTYPE";
  
  /**
   * Site parameter to get Disruption context mode.
   */
  public static final String DISRUPTION_CONTEXT_MODE = "SITE_DISRUPTION_CONTEXT_MODE";
  
  public static final String USE_LEGACY_BOUND_DETERMINATION = "SITE_USE_LEGACY_BOUND_DETERMINATION";

  /**
   * Site parameter to check if TSM in miles for seats and services are supported
   */
  public static final String SERV_TSM_IN_MILES = "SITE_SERV_TSM_IN_MILES";
  
  /**
   * Site parameter to check whether to ignore insurance price discrepancy between shopping and booking for US market
   */
  public static final String INSURANCE_IGNORE_PRICE_DISCREPANCY_FOR_US = 
      "SITE_INSURANCE_IGNORE_PRICE_DISCREPANCY_FOR_US";
  
  /**
   * Site parameter to determine the time interval for polling for ancillary elements
   */
  public static final String ANCILLARIES_POLLING_TIME = "SITE_ANCILLARIES_POLLING_TIME";

  /**
   * Site parameter activating prebook of merchant Insurance
   */
  public static final String INSURANCE_QUEUE_PREBOOK = "SITE_INSURANCE_QUEUE_PREBOOK";
  /**
   * Site parameter to check if TSTs for infants needs to be deleted
   */
  public static final String DELETE_INFANT_TST_AFTER_PRICING = "SITE_DELETE_INFANT_TST_AFTER_PRICING";
  
  /**
   * Site parameter throw a warning on the unconfirmed chargeable seats / services and remove the same if needed (in
   * payment-records endpoint)
   */
  public static final String PAYMENT_DISCARD_UNCONFIRMED_ANCILLARIES = "SITE_PAYMENT_DISCARD_UNCONFIRMED_ANCILLARIES";
 
  /**
   * Site parameter to avoid the service price discrepancy
   */
  public static final String AVOID_MINOR_SERVICE_PRICE_DISCREPANCY = "SITE_AVOID_MINOR_SERVICE_PRICE_DISCREPANCY";
  /**
   * Site parameter to populate service parameters from DisplayTripRs
   */
  public static final String SITE_SERVICES_STRUCTURED_PARAMETERS = "SITE_SERVICES_STRUCTURED_PARAMETERS";

  /**
   * Site parameter to enable payment method of PRI(PaymentReferenceId)
   */
  public static final String ALLOW_PRI_PAYMENT_METHOD = "SITE_ALLOW_PRI_PAYMENT_METHOD";

  /**
   * Site parameter to check the time(in hours) till which we will allow Past Dated Segments.
   */
  public static final String PAST_HOUR_FLIGHTS_PREVIEW = "SITE_PAST_HOUR_FLIGHTS_PREVIEW";

  /**
   * Site parameter to check PNR search (PAUSRQ) request out parameter options.
   */
  public static final String PNR_SEARCH_OUT_OPTION = "SITE_PNR_SEARCH_OUT_OPTION";

  /**
   * Site parameter to check if display warning when queuing fails
   */
  public static final String WARNING_IF_QUEUING_FAILS = "SITE_WARNING_IF_QUEUING_FAILS";
  
  /**
   * Site parameter to skip RCFSRQ call during retrieve order flow
   */
  public static final String CAR_SKIP_RCFSRQ_RETRIEVE_ORDER = "SITE_CAR_SKIP_RCFSRQ_RETRIEVE_ORDER";

  /**
   * Site parameter to do EMD Reconciliation TSERUQ call during add service to services/seats
   */
  public static final String SERVICES_AND_SEATS_EMD_RECONCILE = "SITE_SERVICES_AND_SEATS_EMD_RECONCILE";
  
  /**
   * Site parameter to know time between bounds in case of domestic flight.
   */
  public static final String SONDGQ_PARAM_DD = "SITE_SONDGQ_PARAM_DD";

  /**
   * Site parameter to allow retrieval of partial travel documents when full travel documents are inaccessible
   */
  public static final String ALLOW_TRAVEL_DOCS_WITH_LIMITED_ACCESS = "SITE_ALLOW_TRAVEL_DOCS_WITH_LIMITED_ACCESS";

  /**
   * Boolean. Site parameter to allow seat Change
   */
  public static final String ALLOW_SEAT_CHANGE = "SITE_ALLOW_SEAT_CHANGE";

  /**
   * Boolean. Site parameter to allow service Change
   */
  public static final String ALLOW_SERVICE_CHANGE = "SITE_ALLOW_SERVICE_CHANGE";

  /**
   * String. Site parameter to allow ASC Exchange.
   */
  public static final String ALLOW_ASC_ACTIVATION = "SITE_ALLOW_ASC_ACTIVATION";

}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\CheckInEndpoint.java

```
package com.amadeus.dapi.jalext.common.endpoint;

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.ParameterStyle;

import com.amadeus.middleware.connector.client.annotation.AmadeusServiceConfiguration;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRQ;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;

/**
 * Responsible for TTR_GetQuiC_CheckInMethod verb call.
 */
@AmadeusServiceConfiguration(name = "TTR_GetQuiC_CheckInMethod", serviceId = "WS", version = "1.0", orgUsed = true)
@WebService(targetNamespace = "http://xml.amadeus.com/2010/06/TTR_Analysis_v1")
@SOAPBinding(parameterStyle = ParameterStyle.BARE)
public interface CheckInEndpoint {
  /**
   * This method is responsible for the TTR_GetQuiC_CheckInMethod verb call
   * 
   * @param request
   *          AMA_TTR_GetQuiC_CheckInMethodRQ
   * @return AMA_TTR_GetQuiC_CheckInMethodRS
   */
  @WebMethod(operationName = "AMA_TTR_GetQuiC_CheckInMethodRQ")
  @WebResult(name = "AMA_TTR_GetQuiC_CheckInMethodRS",
      targetNamespace = "http://xml.amadeus.com/2010/06/TTR_Analysis_v1")
  AMA_TTR_GetQuiC_CheckInMethodRS checkInMethods(AMA_TTR_GetQuiC_CheckInMethodRQ request);
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\EmptyResource.java

```
package com.amadeus.dapi.jalext.common.endpoint;

import javax.ws.rs.Path;

/**
 * This class is there because for "generic" forwarding call, OJF requires an object with at least one method
 */
@Path("/")
public interface EmptyResource {

  /**
   * CXF checks that JAX-RS interface have at least one method
   */
  @Path("unexisting")
  void someMethodToHaveAtLeastOneResource();

}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\FopGetPaymentSummaryEndpoint.java

```
package com.amadeus.dapi.jalext.common.endpoint;

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.ParameterStyle;

import com.amadeus.middleware.connector.client.annotation.AmadeusServiceConfiguration;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRQ;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;

/**
 * End point to get FOP(Form Of Payment) payment summary details
 * 
 * @author ysiva
 */
@AmadeusServiceConfiguration(name = "FOP_GetPaymentSummary", serviceId = "WS", version = "1.0", orgUsed = true)
@WebService(targetNamespace = "http://xml.amadeus.com/2010/06/FOP_PaymentSummary_v1")
@SOAPBinding(parameterStyle = ParameterStyle.BARE)
public interface FopGetPaymentSummaryEndpoint {

  /**
   * @param request
   *          request
   * @return FOPPaymentSummaryRS
   */
  @WebMethod(operationName = "AMA_FOP_GetPaymentSummaryRQ")
  @WebResult(name = "AMA_FOP_GetPaymentSummaryRS",
      targetNamespace = "http://xml.amadeus.com/2010/06/FOP_PaymentSummary_v1")
  AMA_FOP_GetPaymentSummaryRS getPaymentSummary(AMA_FOP_GetPaymentSummaryRQ request);
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\PnrRetrieveEndpoint.java

```
package com.amadeus.dapi.jalext.common.endpoint;

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

import com.amadeus.middleware.connector.client.annotation.AmadeusServiceConfiguration;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve;

/**
 * PNR Retrieve service Endpoint for version PNRRET 19.1 1A
 */
@AmadeusServiceConfiguration(name = "PNRRET", serviceId = "19.1", version = "1A")
@WebService(targetNamespace = "http://xml.amadeus.com/PNRRET_19_1_1A")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface PnrRetrieveEndpoint {

  /**
   * Method to retrieve PNR details based on the record locator given in request.
   * 
   * @param pnrRetrieveRequest
   *          to get the PNR reply response
   * @return PNR_Reply object holds the PNR related details.
   */
  @WebMethod(operationName = "PNR_Retrieve")
  @WebResult(name = "PNR_Reply", targetNamespace = "http://xml.amadeus.com/PNRACC_19_1_1A")
  PNR_Reply retrievePNR(PNR_Retrieve pnrRetrieveRequest);
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\TicketRepricePNRWithBookingClassEndpoint.java

```
package com.amadeus.dapi.jalext.common.endpoint;

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

import com.amadeus.middleware.connector.client.annotation.AmadeusServiceConfiguration;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;


/**
 * Send TARIPQ_19_1_1A. This verb is used to perform a Ticket Reprice for ATC in DxAPI.
 */

@AmadeusServiceConfiguration(name = "TARIPQ", serviceId = "19.1", version = "1A", orgUsed = true)
@WebService(targetNamespace = "http://xml.amadeus.com/TARIPQ_19_1_1A")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface TicketRepricePNRWithBookingClassEndpoint {

  /**
   * To get repricePNR details from request
   * 
   * @param request
   *          request
   * @return response
   */
  @WebMethod(operationName = "Ticket_RepricePNRWithBookingClass")
  @WebResult(name = "Ticket_RepricePNRWithBookingClassReply", targetNamespace = "http://xml.amadeus.com/TARIPR_19_1_1A")
  Ticket_RepricePNRWithBookingClassReply getRepricePNR(Ticket_RepricePNRWithBookingClass request);
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\errors\CannedError.java

```
package com.amadeus.dapi.jalext.common.errors;

import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.lang3.StringUtils;

/**
 * Enum to hold the error codes and detail messages for currency converter
 * 
 * @author ysiva
 */
public enum CannedError {

  UNABLE_TO_REPRICE_ORDER(Constants.UNABLE_TO_REPRICE_ORDER, Constants.UNABLE_TO_REPRICE_ORDER,
      "Unable To Reprice Order"),
  LAST_NAME_SHOULD_BE_PROVIDED(Constants.LAST_NAME_SHOULD_BE_PROVIDED, Constants.LAST_NAME_SHOULD_BE_PROVIDED,
      "LAST_NAME"),
  INVALID_BOUND_ID(Constants.INVALID_BOUND_ID, Constants.INVALID_BOUND_ID,
      "Please provide valid airbound id"),
  ORDER_NOT_FOUND(Constants.ORDER_NOT_FOUND, Constants.ORDER_NOT_FOUND,
      "Order Not Found"),
  ORDER_REPRICING_NOT_ALLOWED(Constants.ORDER_REPRICING_NOT_ALLOWED, Constants.ORDER_REPRICING_NOT_ALLOWED,
      "An additional collection or a penalty is found during the repricing"),
  PAYMENT_RECORD_HISTORY_INCOMPLETE(Constants.PAYMENT_RECORD_HISTORY_INCOMPLETE,
      Constants.PAYMENT_RECORD_HISTORY_INCOMPLETE, "Payment Records History Incomplete"),
  INVALID_TRAVELER_INFORMATION(Constants.INVALID_TRAVELER_INFORMATION, Constants.INVALID_TRAVELER_INFORMATION,
      "FirstName and LastName are mandatory and should be present in the PNR"),
  INVALID_FLIGHT_NUMBER(Constants.INVALID_FLIGHT_NUMBER, Constants.INVALID_FLIGHT_NUMBER,
      "Flight number is mandatory and should be present in the PNR"),
  RETURN_URL_IS_EMPTY(Constants.RETURN_URL_IS_EMPTY, Constants.RETURN_URL_IS_EMPTY,
      "Return URL is mandatory");

  private final String cannedCode;

  private final String serviceErrorCode;

  private final String detailMessage;

  /**
   * constructor to create the InstantSearchCannedError with given inputs
   * 
   * @param cannedCode
   * @param serviceErrorCode
   * @param detailMessage
   */
  CannedError(String cannedCode, String serviceErrorCode, String detailMessage) {
    this.cannedCode = cannedCode;
    this.serviceErrorCode = serviceErrorCode;
    this.detailMessage = detailMessage;
  }

  public String getCannedCode() {
    return cannedCode;
  }

  public String getServiceErrorCode() {
    return serviceErrorCode;
  }

  public String getDetailMessage() {
    return detailMessage;
  }

  /**
   * Class holds the error code constants
   */
  private static final class Constants {
    public static final String UNABLE_TO_REPRICE_ORDER = "40568";
    public static final String ORDER_NOT_FOUND = "36894";
    public static final String LAST_NAME_SHOULD_BE_PROVIDED = "36962";
    public static final String INVALID_BOUND_ID = "39445";
    public static final String ORDER_REPRICING_NOT_ALLOWED ="40567";
    public static final String PAYMENT_RECORD_HISTORY_INCOMPLETE = "40786";
    public static final String INVALID_TRAVELER_INFORMATION = "39911";
    public static final String INVALID_FLIGHT_NUMBER = "29069";
    public static final String RETURN_URL_IS_EMPTY = "36895";
  }

  /**
   * Method to get the status code based on the error code
   * 
   * @param errorCode
   *          errorCode
   * @return status code
   */
  public static Status getStatus(String errorCode) {
    Map<String, Status> errorCodeToStatus = new HashMap<>();
    errorCodeToStatus.put(Constants.UNABLE_TO_REPRICE_ORDER, Response.Status.OK);
    errorCodeToStatus.put(Constants.ORDER_NOT_FOUND, Response.Status.NOT_FOUND);
    errorCodeToStatus.put(Constants.LAST_NAME_SHOULD_BE_PROVIDED, Response.Status.BAD_REQUEST);
    errorCodeToStatus.put(Constants.INVALID_BOUND_ID, Response.Status.BAD_REQUEST);
    errorCodeToStatus.put(Constants.ORDER_REPRICING_NOT_ALLOWED, Response.Status.BAD_REQUEST);
    errorCodeToStatus.put(Constants.PAYMENT_RECORD_HISTORY_INCOMPLETE, Response.Status.BAD_REQUEST);
    return errorCodeToStatus.get(errorCode);
  }

  /**
   * To find the matching error code from CannedError and return it
   * 
   * @param errorCode
   *          error code
   * @return CannedError CannedError
   */
  public static CannedError getCannedErrorCode(String errorCode) {
    for (CannedError error : CannedError.values()) {
      if (StringUtils.equals(error.getServiceErrorCode(), errorCode)) {
        return error;
      }
    }
    return null;
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\invoker\DapiClient.java

```
package com.amadeus.dapi.jalext.common.invoker;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.amadeus.digital.api.cartdapibox.rs.v2.endpoints.CommunicationApi;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.AcknowledgeRequest;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.StandaloneNotificationRequest;
import org.apache.cxf.jaxrs.client.WebClient;
import org.springframework.beans.factory.annotation.Value;

import com.amadeus.dapi.jalext.common.endpoint.EmptyResource;
import com.amadeus.digital.api.cartdapibox.rs.v2.endpoints.OrderApi;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirExchangeRequest;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundRequest;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Remark;
import com.amadeus.digital.api.lib.client.connection.api.RestClientConnectivityHandler;
import com.amadeus.middleware.connector.client.ClientSettings;
import com.amadeus.middleware.connector.client.JaxRsProvider;

/**
 * Class to handle rest call to dapi
 * 
 * @author smallick
 */
@Named("dapiClient")
public class DapiClient {

  private RestClientConnectivityHandler connectivityHandler;

  @Value("${dapi.collateral.iso9735.sap.rest:}")
  private String dapiSap;

  @Value("${connectors.origin:}")
  private String originConnector;

  /** Response Timeout for DAPI calls **/
  private static final int DAPI_TIMEOUT = 90 * 1000;

  private JaxRsProvider provider;

  @Inject
  public DapiClient(RestClientConnectivityHandler connectivityHandler, JaxRsProvider provider) {
    this.connectivityHandler = connectivityHandler;
    this.provider = provider;
  }

  /**
   * Makes a rest call to dapi retrieve order endpoint
   * 
   * @param orderId
   * @param languageCode
   * @param lastName
   * @param firstName
   * @param showOrderEligibility
   * @return Response recieved from dapi
   */
  public Response getOrder(String orderId, String languageCode, String lastName, String firstName,
      Boolean showOrderEligibility) {
    OrderApi api = connectivityHandler.initialize(dapiSap)
        .getProxyOnPseudoDCX(OrderApi.class);
    return api.retrieveOrder(orderId, languageCode, lastName, firstName, showOrderEligibility, null, false);
  }
  
  /**
   * Makes a rest call to dapi retrieve air bound exchange confirmation end point
   * 
   * @param orderAirExchangeRequest
   *          orderAirExchangeRequest
   * @param orderId
   *          orderId
   * @param lastName
   *          lastName
   * @param firstName
   *          firstName
   * @param lang
   *          lang
   * @return response
   */
  public Response airBoundExchangesConfirmation(OrderAirExchangeRequest orderAirExchangeRequest,
      String orderId, String lastName, String firstName, String lang) {
    OrderApi api = connectivityHandler.initialize(dapiSap)
        .getProxyOnPseudoDCX(OrderApi.class);
    return api.airBoundExchangesConfirmation(orderId, orderAirExchangeRequest, lastName, firstName, lang);
  }

  public Response cancelAndRefundOrder(String orderId, String lastName, String lang,
      OrderCancelAndRefundRequest orderCancelAndRefundRequest) {
    OrderApi api = connectivityHandler.initialize(dapiSap).getProxyOnPseudoDCX(OrderApi.class);
    return api.cancelAndRefundOrder(orderId, lastName, lang, orderCancelAndRefundRequest);
  }

  public Response getAlternativeOfferConfirmationJob(String orderId, String confirmationJobId, List<String> include) {
    OrderApi api = connectivityHandler.initialize(dapiSap).getProxyOnPseudoDCX(OrderApi.class);
    return api.getAlternativeOfferConfirmationJob(orderId, confirmationJobId, include);
  }

  public Response acknowledge(String orderId, AcknowledgeRequest acknowledgeRequest) {
    OrderApi api = connectivityHandler.initialize(dapiSap).getProxyOnPseudoDCX(OrderApi.class);
    return api.acknowledge(orderId, acknowledgeRequest);
  }

  public Response orderEligibilities(String orderId, List<String> targetAction, String lastName, String lang) {
    OrderApi api = connectivityHandler.initialize(dapiSap).getProxyOnPseudoDCX(OrderApi.class);
    return api.getOrderEligibilities(orderId, targetAction, lastName, lang);
  }

  public Response addRemarksToOrder(String orderId, @Valid List<Remark> remarks, String lang, String lastName) {
    OrderApi api = connectivityHandler.initialize(dapiSap).getProxyOnPseudoDCX(OrderApi.class);
    return api.addRemarksToOrder(orderId, remarks, lang, lastName);
  }

  /**
   * Forwards the call to DxAPI through SI Collateral call
   */
  public Response forwardRequest(HttpServletRequest request, String requestBody) {
    EmptyResource resource = provider.create(EmptyResource.class, getClientSettings());
    WebClient client = WebClient.fromClient(WebClient.client(resource))
        .path(request.getPathInfo());
    addQueryParams(client, request.getParameterMap());
    client = client.accept(MediaType.APPLICATION_JSON)
        .type(MediaType.APPLICATION_JSON);
    return client.invoke(request.getMethod(), requestBody);
  }

  /**
   * Method to add query param to WebClient
   * 
   * @param client
   * @param parameterMap
   */
  private static void addQueryParams(WebClient client, Map<String, String[]> parameterMap) {
    for (Entry<String, String[]> param : parameterMap.entrySet()) {
      client.query(param.getKey(), param.getValue());
    }
  }

  /**
   * For collateral calls, you need to provide the target SAP, and an origin needs to be provided too.
   */
  private ClientSettings getClientSettings() {
    return new ClientSettings.ClientSettingsBuilder().origin(originConnector)
        .destination(dapiSap)
        .receiveTimeout(DAPI_TIMEOUT)
        .build();
  }
  
  public Response retrieveTravelDocuments(String orderId, String lastName, String firstName, String lang) {
    OrderApi api = connectivityHandler.initialize(dapiSap)
        .getProxyOnPseudoDCX(OrderApi.class);
    return api.retrieveTravelDocuments(orderId, lastName, firstName, lang);
  }

  public Response notificationByOrder(StandaloneNotificationRequest standaloneNotificationRequest) {
    CommunicationApi api = connectivityHandler.initialize(dapiSap)
            .getProxyOnPseudoDCX(CommunicationApi.class);
    return api.sendNotifications(standaloneNotificationRequest);
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\invoker\XmlWebservicesClient.java

```
package com.amadeus.dapi.jalext.common.invoker;

import javax.inject.Inject;
import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.dapi.jalext.common.endpoint.CheckInEndpoint;
import com.amadeus.dapi.jalext.common.endpoint.FopGetPaymentSummaryEndpoint;
import com.amadeus.dapi.jalext.common.endpoint.TicketRepricePNRWithBookingClassEndpoint;
import com.amadeus.dapi.jalext.common.service.PNRRetrieveService;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRQ;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRQ;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Class to make xml collateral calls
 * 
 * @author smallick
 */
@Named("xmlWebservicesClient")
public class XmlWebservicesClient {

  private static final Logger LOGGER = LoggerFactory.getLogger(XmlWebservicesClient.class);

  private PNRRetrieveService pnrRetrieveService;

  /**
   * To inject required client conversation handlers
   * 
   * @param clientConversationHandlerFactory
   *          clientConversationHandlerFactory
   * @param pnrRetrieveService
   *          pnrRetrieveService
   */
  @Inject
  public XmlWebservicesClient(PNRRetrieveService pnrRetrieveService) {
    this.pnrRetrieveService = pnrRetrieveService;
  }

  /**
   * Call TTR_GetQuiC_CheckInMethod endpoint The exception here is suppressed as it shouldn't affect the retrieve order
   * call
   *
   * @param request
   * @return AMA_TTR_GetQuiC_CheckInMethodRS
   */
  public AMA_TTR_GetQuiC_CheckInMethodRS checkinMethod(AMA_TTR_GetQuiC_CheckInMethodRQ request,
      ClientConversationHandler clientConversationHandler) {
    try {
      CheckInEndpoint endpoint = clientConversationHandler.getPort(CheckInEndpoint.class);
      return endpoint.checkInMethods(request);
    } catch (Exception ex) {
      LOGGER.error("Error occured while retrieving checkinMethods:", ex);
    }
    return null;
  }

  /**
   * Call TicketRepricePNRWithBookingClassEndpoint endpoint The exception here is suppressed as it shouldn't affect the
   * retrieve order call
   *
   * @param request
   *          request
   * @return Ticket_RepricePNRWithBookingClassReply
   */
  public Ticket_RepricePNRWithBookingClassReply informativePricingMethod(Ticket_RepricePNRWithBookingClass request,
      ClientConversationHandler clientConversationHandler) {
    try {
      TicketRepricePNRWithBookingClassEndpoint ticketRepricePNRWithBookingClassEndpoint = clientConversationHandler
          .getPort(TicketRepricePNRWithBookingClassEndpoint.class);
      return ticketRepricePNRWithBookingClassEndpoint.getRepricePNR(request);
    } catch (Exception ex) {
      LOGGER.error("Error occured while Ticket_RepricePNRWithBookingClassReply:", ex);
    }
    return null;
  }

  /**
   * Method to get PNR details
   * 
   * @param orderId
   *          orderId
   * @return pnrReply
   */
  public PNR_Reply getPNRDetails(String orderId, ClientConversationHandler clientConversationHandler) {
    try {
      return pnrRetrieveService.getPNRResponse(orderId, clientConversationHandler).orElse(new PNR_Reply());
    } catch (Exception ex) {
      LOGGER.error("Error occured while retrieving getPNRDetails:", ex);
    }
    return null;
  }

  /**
   * Method to get payment summary details from verb call
   * 
   * @param request
   *          request
   * @return verb response
   */
  public AMA_FOP_GetPaymentSummaryRS getPaymentSummary(AMA_FOP_GetPaymentSummaryRQ request,
      ClientConversationHandler clientConversationHandler) {
    try {
      FopGetPaymentSummaryEndpoint endpoint = clientConversationHandler.getPort(FopGetPaymentSummaryEndpoint.class);
      return endpoint.getPaymentSummary(request);
    } catch (RuntimeException ex) {
      LOGGER.error("Error occured while retrieving FOP summary details:", ex);
    }
    return null;
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\service\CommonDapiRetrieveService.java

```
package com.amadeus.dapi.jalext.common.service;

import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

/**
 * Service to retrieve response for non implemented endpoints in this extension
 * 
 * @author smallick
 */
@Named
public class CommonDapiRetrieveService {

  private DapiClient dapiClient;
  private HttpServletRequest httpServletRequest;
  private RfdCannedMessageRepository rfdCannedMessageRepository;
  private static final Logger LOG = LoggerFactory.getLogger(CommonDapiRetrieveService.class);
  private static final String ERROR_MESSAGE = "Error occured while retriving order";

  /**
   * Constructor
   * 
   * @param dapiClient
   * @param httpServletRequest
   * @param rfdCannedMessageRepository
   */
  @Inject
  public CommonDapiRetrieveService(DapiClient dapiClient, HttpServletRequest httpServletRequest,
      RfdCannedMessageRepository rfdCannedMessageRepository) {
    this.dapiClient = dapiClient;
    this.httpServletRequest = httpServletRequest;
    this.rfdCannedMessageRepository = rfdCannedMessageRepository;
  }

  /**
   * Method to forward request to dapi and return the response
   * 
   * @param request
   * @return
   */
  public Response getCommonDapiResponse(String request) {
    try {
      return dapiClient.forwardRequest(httpServletRequest, request);
    } catch (RuntimeException e) {
      LOG.error(ERROR_MESSAGE, e);
      return ErrorResponseUtils.buildInternalErrorResponse(rfdCannedMessageRepository);
    }
  }

}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\service\PNRRetrieveService.java

```
package com.amadeus.dapi.jalext.common.service;

import java.math.BigDecimal;
import java.util.Optional;

import javax.inject.Named;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.common.endpoint.PnrRetrieveEndpoint;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve.RetrievalFacts;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve.RetrievalFacts.ReservationOrProfileIdentifier;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve.RetrievalFacts.ReservationOrProfileIdentifier.Reservation;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve.RetrievalFacts.Retrieve;

/**
 * Class is responsible to retrieve the PNR details by using the recloc.
 */
@Named
public class PNRRetrieveService {

  private static final int RETRIEVE_PNR_TYPE = 2;

  /**
   * Method to get the PNR response by using orderId.
   * 
   * @param orderId
   *          is requested order id by user.
   * @param clientConversation
   *          OJF handle to call web service
   * @return PNRReply is the response of passenger record details will be throw if order not found
   */
  public Optional<PNR_Reply> getPNRResponse(String orderId, ClientConversationHandler handler) {
    if (StringUtils.isBlank(orderId)) {
      return Optional.empty();
    }
    PNR_Retrieve pnrRetrieveRequest = mapRetrieveRequest(orderId);
    PnrRetrieveEndpoint pnrRetrieveEndpoint = handler.getPort(PnrRetrieveEndpoint.class);
    return Optional.ofNullable(pnrRetrieveEndpoint.retrievePNR(pnrRetrieveRequest));
  }

  /**
   * Method to map the PNR Retrieve request.
   * 
   * @param orderId
   * @return pnrRetrieveRequest
   */
  private static PNR_Retrieve mapRetrieveRequest(String orderId) {
    PNR_Retrieve pnrRetrieveRequest = new PNR_Retrieve();
    Retrieve retrievePNRType = new Retrieve();
    retrievePNRType.withType(BigDecimal.valueOf(RETRIEVE_PNR_TYPE));
    Reservation reservation = new Reservation();
    reservation.setControlNumber(orderId);
    ReservationOrProfileIdentifier profileIdentifier = new ReservationOrProfileIdentifier();
    profileIdentifier.getReservation().add(reservation);
    RetrievalFacts retrieveFacts = new RetrievalFacts();
    retrieveFacts.withRetrieve(retrievePNRType);
    retrieveFacts.withReservationOrProfileIdentifier(profileIdentifier);
    pnrRetrieveRequest.withRetrievalFacts(retrieveFacts);
    return pnrRetrieveRequest;
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\util\DateTimeUtils.java

```
package com.amadeus.dapi.jalext.common.util;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;

import com.amadeus.middleware.rfd.TimeZone;

/**
 * This is a utility class which provides the utility methods for date and time related conversions.
 */
public final class DateTimeUtils {

  public static final DateTimeFormatter DATE_TIME_FORMATTER = ISODateTimeFormat.dateTimeParser();
  private static final String DATE_TIME_FORMAT = "ddMMyyHHmm";
  private static final String DATE_TIME_FORMAT_DD_MMM_YY = "ddMMMyy";
  
  private static final String DATE_FORMAT_WITH_TIMEZONE = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";

  private DateTimeUtils() {
  }

  /**
   * This method builds the DateTime with time zone
   * 
   * @param timeZones
   *          TimeZoneRecord to where time zone to be identified
   * @param flightDateTime
   *          date time a which time zone to be identified
   * @return date time with date zone
   */
  public static DateTime buildDateWithTimeZone(List<TimeZone> timeZones, LocalDateTime flightDateTime) {
    return flightDateTime.toDateTime(RefTimeZoneUtils.getTimeZone(timeZones, flightDateTime));
  }

  /**
   * Method to get the parsed date and time.
   * 
   * @param date
   *          date required to build the dateTime
   * @param time
   *          time required to build the dateTime
   * @return converted DateTime
   */
  public static DateTime buildDateTime(String date, String time) {
    DateTime parsedDateTime = null;
    if (StringUtils.isBlank(date) || StringUtils.isBlank(time)) {
      return parsedDateTime;
    }
    return DateTime.parse(date + time, DateTimeFormat.forPattern(DATE_TIME_FORMAT));
  }

  /**
   * Method to get parsed LocalDate
   * 
   * @param date
   *          date required to build the localDate
   * @return converted LocalDate
   */
  public static LocalDate buildLocalDate(String date) {
    LocalDate localDate = null;
    if (StringUtils.isBlank(date)) {
      return localDate;
    }
    return LocalDate.parse(date, DateTimeFormat.forPattern(DATE_TIME_FORMAT_DD_MMM_YY));
  }

  /**
   * This method builds the local date time
   * 
   * @param dateTime
   *          dateTime in string
   * @return LocalDateTime
   */
  public static LocalDateTime buildDateTime(String dateTime) {
    LocalDateTime localDateTime = null;
    if (StringUtils.isBlank(dateTime)) {
      return localDateTime;
    }
    return LocalDateTime.parse(dateTime, DateTimeFormat.forPattern(DATE_FORMAT_WITH_TIMEZONE));
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\util\ErrorResponseUtils.java

```
package com.amadeus.dapi.jalext.common.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.common.errors.CannedError;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Messages;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Source;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolationImpl;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import com.amadeus.jal.dapi.model.core.SourceView;
import com.amadeus.middleware.rfd.CannedMessage;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

/**
 * Util class for building retrieve order message
 * 
 * @author smallick
 */
public final class ErrorResponseUtils {

  private static final String INTERNAL_ERROR_DESC = "Generic error - The system encountered an internal error";

  private static final String LANGUAGE_ENGLISH = "EN";

  private static final String GENERIC_ERROR_CODE = "65019";

  private static final String GENERIC_ERROR_TITLE = "UNABLE TO PROCESS";

  public static final String REMARK_NOT_ALLOWED_CODE = "39698";

  public static final String REMARK_NOT_ALLOWED_TITLE = "REMARK NOT ALLOWED";

  public static final String LAST_NAME_SHOULD_BE_PROVIDED_CODE = "36962";

  public static final String LAST_NAME_SHOULD_BE_PROVIDED_TITLE = "LAST NAME SHOULD BE PROVIDED";

  public static final String EMAIL_ADDRESS_SHOULD_BE_PROVIDED_CODE = "42909";

  public static final String EMAIL_ADDRESS_SHOULD_BE_PROVIDED_TITLE = "EMAIL ADDRESS SHOULD BE PROVIDED";

  public static final String MARKET_SHOULD_BE_PROVIDED_CODE = "42908";

  public static final String MARKET_SHOULD_BE_PROVIDED_TITLE = "MARKET SHOULD BE PROVIDED";

  public static final String INVALID_EMAIL_ADDRESS_PROVIDED_CODE = "34120";

  public static final String INVALID_EMAIL_ADDRESS_PROVIDED_TITLE = "INVALID EMAIL ADDRESS";

  public static final String CONFIRMATION_EMAIL_COULD_NOT_BE_SENT_CODE = "42910";

  public static final String CONFIRMATION_EMAIL_COULD_NOT_BE_SENT_TITLE = "CONFIRMATION EMAIL COULD NOT BE SENT";
  
  public static final int INVALID_FLIGHT_NUMBER = 29069;

  public static final String INVALID_FLIGHT_NUMBER_ERROR_MESSAGE =
      "Flight number is mandatory and should be present in the PNR";

  public static final int INVALID_TRAVELER_INFORMATION = 39911;

  public static final String INVALID_TRAVELER_INFORMATION_ERROR_MESSAGE =
      "FirstName and LastName are mandatory and should be present in the PNR";

  public static final int RETURN_URL_IS_EMPTY = 36895;

  public static final String RETURN_URL_IS_EMPTY_ERROR_MESSAGE = "Return URL is mandatory";

  private ErrorResponseUtils() {
    // private constructor to avoid instantiation
  }

  /**
   * Builds an error message from its code and optional detail
   *
   * @param cannedMessageRepository
   *          RFD repository to look up the error title from the code
   * @param code
   *          Error code
   * @param fallbackTitle
   *          Fallback title for when the title could not be found in the RFD repository
   * @param detail
   *          Optional detail, title is used when null
   * @return The error message
   */
  public static Messages buildErrorMessage(RfdCannedMessageRepository cannedMessageRepository, String code,
      String fallbackTitle, String detail) {
    CannedMessage cannedMessage = cannedMessageRepository.getCannedMessage(Long.parseLong(code),
        LANGUAGE_ENGLISH);
    String title = cannedMessage == null ? fallbackTitle : cannedMessage.getText();
    return buildMessages(title, code, detail);
  }

  /**
   * Method to get the internal error message when any exception occurred.
   * 
   * @param cannedMessageRepository
   *          rfd repository which helps in getting the error data from the DB.
   * @return error messages
   */
  public static Messages buildInternalErrorMessage(RfdCannedMessageRepository cannedMessageRepository) {
    return buildErrorMessage(cannedMessageRepository, GENERIC_ERROR_CODE, GENERIC_ERROR_TITLE, INTERNAL_ERROR_DESC);
  }

  /**
   * Build a message with the text from canned database
   * 
   * @param cannedMessage
   *          cannedMessage
   * @param cannedErrorCode
   *          cannedErrorCode
   * @param detail
   *          detail
   * @return
   */
  private static Messages buildMessages(String cannedMessage, String cannedErrorCode, String detail) {
    Messages messages = new Messages();
    ErrorMessage errorMessage = new ErrorMessage()
        .title(cannedMessage)
        .code(cannedErrorCode)
        .detail(Optional.ofNullable(detail).orElse(cannedMessage));
    messages.errors(Arrays.asList(errorMessage));
    return messages;
  }
  
  /**
   * Construct error message form rfd Canned database
   * 
   * @param errorCode
   *          errorCode
   * @param errorMessage
   *          errorMessage
   * @param cannedMessageRepository
   *          cannedMessageRepository
   * @param lang
   *          language
   * @return canned message
   */
  public static Messages buildCannedMessage(String errorCode, String errorMessage,
      RfdCannedMessageRepository cannedMessageRepository, String lang) {
    String cannedErrorCode = GENERIC_ERROR_CODE;
    CannedMessage cannedMessage = null;
    if (StringUtils.isEmpty(lang)) {
      lang = LANGUAGE_ENGLISH;
    }
    if (StringUtils.isNotBlank(errorCode)) {
      CannedError cannedError = CannedError.getCannedErrorCode(errorCode);
      if (!Objects.isNull(cannedError)) {
        cannedErrorCode = cannedError.getCannedCode();
        cannedMessage = cannedMessageRepository.getCannedMessage(Long.parseLong(cannedErrorCode), lang);
        if (StringUtils.isEmpty(errorMessage)) {
          errorMessage = cannedError.getDetailMessage();
        }
      }
    }
    if (!Objects.isNull(cannedMessage)) {
      return buildMessages(cannedMessage.getText(), cannedErrorCode, errorMessage);
    }
    return buildErrorMessage(cannedMessageRepository, cannedErrorCode, errorMessage, errorMessage);
  }
  
  /**
   * Method to get error response from constraint violations
   * 
   * @param lang
   *          lang
   * @param cannedMessageRepository
   *          cannedMessageRepository
   * @param constraintViolations
   *          constraintViolations
   * @return error response
   */
  public static Response getConstraintViloationsResponse(String lang,
      RfdCannedMessageRepository cannedMessageRepository,
      ConstraintViolationException constraintViolations) {
    String errorCode = getCannedErrorCode(constraintViolations);
    Status status = CannedError.getStatus(errorCode);
    String errorMessage = getCannedMessage(constraintViolations);
    return Response.status(status)
        .entity(buildCannedMessage(errorCode, errorMessage, cannedMessageRepository, lang))
        .build();
  }
  
   /**
    * Method to get error Messages from constraint violations
    *
    * @param lang                    lang
    * @param cannedMessageRepository cannedMessageRepository
    * @param constraintViolations    constraintViolations
    * @return error Messages
    */
  public static Messages getConstraintViolationsMessage(String lang,
      RfdCannedMessageRepository cannedMessageRepository,
      ConstraintViolationException constraintViolations) {
    String errorCode = getCannedErrorCode(constraintViolations);
    String errorMessage = getCannedMessage(constraintViolations);
    return  buildCannedMessage(errorCode, errorMessage, cannedMessageRepository, lang);
  }
  
  /**
   * Method to get the canned error code
   *  
   * @param constraintViolations constraintViolations 
   * @return canned error code
   */
  private static String getCannedErrorCode(ConstraintViolationException constraintViolations) {
    return CollectionUtils.emptyIfNull(constraintViolations.getConstraintViolations())
        .stream()
        .filter(AmadeusConstraintViolationImpl.class::isInstance)
        .map(AmadeusConstraintViolationImpl.class::cast)
        .map(AmadeusConstraintViolationImpl::getCanMessageNumber)
        .filter(Objects::nonNull)
        .findFirst()
        .map(String::valueOf)
        .orElse(StringUtils.EMPTY);
  }
  
  /**
   * Method to get the canned message
   * 
   * @param constraintViolations constraintViolations
   * @return canned message
   */
  private static String getCannedMessage(ConstraintViolationException constraintViolations) {
    return CollectionUtils.emptyIfNull(constraintViolations.getConstraintViolations())
        .stream()
        .map(ConstraintViolation::getMessage)
        .collect(Collectors.joining(","));
  }
  
  /**
   * This method builds the response in case of generic error.
   * 
   * @return Response
   */
  public static Response buildInternalErrorResponse(RfdCannedMessageRepository cannedMessageRepository) {
    return Response.status(Status.INTERNAL_SERVER_ERROR)
        .entity(ErrorResponseUtils.buildInternalErrorMessage(cannedMessageRepository))
        .build();
  }
  
  public static List<ErrorMessageView> getErrorMessages(List<ErrorMessage> errors) {
    List<ErrorMessageView> errorsView = new ArrayList<>();
    CollectionUtils.emptyIfNull(errors).forEach((ErrorMessage error) -> {
      ErrorMessageView errorMessageView = mapErrorMessageView(error);
      errorsView.add(errorMessageView);
    });
    return errorsView;
  }

    /**
   * Method to map error message view
   * 
   * @param error
   * @return
   */
  private static ErrorMessageView mapErrorMessageView(ErrorMessage error) {
    ErrorMessageView errorMessageView = new ErrorMessageView();
    errorMessageView.setCode(error.getCode());
    errorMessageView.setTitle(error.getTitle());
    errorMessageView.setDetail(error.getDetail());
    errorMessageView.setStatus(error.getStatus());
    mapSourceView(error, errorMessageView);
    return errorMessageView;
  }
  
    /**
   * Method to map source message view
   * 
   * @param error
   * @param errorMessageView
   */
  private static void mapSourceView(ErrorMessage error, ErrorMessageView errorMessageView) {
    Source source = error.getSource();
    if (source != null) {
      SourceView sourceView = new SourceView();
      sourceView.setParameter(source.getParameter());
      sourceView.setPointer(sourceView.getPointer());
      errorMessageView.setSource(sourceView);
    }
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\util\RefTimeZoneUtils.java

```
package com.amadeus.dapi.jalext.common.util;

import java.util.List;

import org.apache.commons.collections4.CollectionUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;

import com.amadeus.middleware.rfd.TimeZone;

/**
 * Utility class which helps in getting time zone related things
 */
public final class RefTimeZoneUtils {

  private static final String UNKNOWN_TZ_00_00 = "-00:00";

  private static final int MSEC_IN_MINUTE = 60_000;

  private RefTimeZoneUtils() {
  }

  /**
   * This method helps in getting the time zone based on tzRecord
   * 
   * @param timeZones
   *          tzRecord
   * @param date
   *          date
   * @return date with time zone
   */
  public static DateTimeZone getTimeZone(List<TimeZone> timeZones, LocalDateTime date) {
    return toDateTimeZone(timeZones, date);
  }

  /**
   * This method extracts the DateTimeZone based on TimeZoneRecord and LocalDateTime
   * 
   * @param timeZones
   * @param date
   * @return
   */
  private static DateTimeZone toDateTimeZone(List<TimeZone> timeZones, LocalDateTime date) {
    if (CollectionUtils.isNotEmpty(timeZones)) {
      for (TimeZone tzRecord : timeZones) {
        if (isWithinDates(date, tzRecord.getStartDateTime(), tzRecord.getEndDateTime())) {
          int timeZoneOffset = (int)((tzRecord.getStdUtcVariation() + tzRecord.getDstVariation()) * MSEC_IN_MINUTE);
          return DateTimeZone.forOffsetMillis(timeZoneOffset);
        }
      }
    }
    return DateTimeZone.forID(UNKNOWN_TZ_00_00);
  }

  /**
   * Checks is the provided date falls between minDate and maxDate (both inclusive). If maxDate is null, it checks if
   * the provided date falls after minDate (inclusive).
   * 
   * @param date
   *          a date, must not be null
   * @param minDate
   *          the lower bound date, must not be null
   * @param maxDate
   *          the upper bound date, may be null
   * @return true if minDate <= date <= maxDate or if maxDate == null && date >= minDate
   */
  private static boolean isWithinDates(LocalDateTime date, LocalDateTime minDate, LocalDateTime maxDate) {
    return minDate != null && !date.isBefore(minDate) && (maxDate == null || !date.isAfter(maxDate));
  }
}

```

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\validator\ValidateLastNameInOrderService.java

```
package com.amadeus.dapi.jalext.common.validator;

import java.util.Collection;
import java.util.List;
import java.util.Objects;

import javax.inject.Named;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.TravellerInfo;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.TravellerInfo.PassengerData;
import com.amadeus.xml.pnracc_19_1_1a.TravellerInformationType_185946S;
import com.amadeus.xml.pnracc_19_1_1a.TravellerSurnameInformationType_260693C;

/**
 * Class is responsible to validate provided last name is same or not as present in order
 */
@Named
public class ValidateLastNameInOrderService {

  private static final int NO_LAST_NAME = 36962;

  private static final int ORDER_NOT_FOUND = 36894;

  private static final String LAST_NAME = "LAST_NAME";

  private static final String ORDER_NOT_FOUND_MSG = "Order not found";

  /**
   * If siteCode SITE_AVOID_LASTNAME_CHECK is true -> skip the last name validation If siteCode
   * SITE_AVOID_LASTNAME_CHECK is false -> then validate the lastName coming in the request with the existing travelers
   * lastName present in Order
   * 
   * @param lastNameInRequest
   *          lastNameInRequest
   * @param pnrReply
   *          pnrReply
   * @param constraints
   *          constraints
   * @param avoidLastnameCheck
   *          avoidLastnameCheck
   */
  public void validateLastNameInOrder(String lastNameInRequest, @Valid PNR_Reply pnrReply,
      Constraints constraints,
      boolean avoidLastnameCheck) {
    if (Boolean.FALSE.equals(avoidLastnameCheck)) {
      validateLastNamePresenetInRequest(lastNameInRequest, constraints);
      validateRequestedLastNamePresentInOrder(lastNameInRequest, pnrReply, constraints);
    }
  }

  /**
   * Method to validate last name is present is request or not.
   * 
   * @param lastNameInRequest
   * @param constraints
   */
  private static void validateLastNamePresenetInRequest(String lastNameInRequest, Constraints constraints) {
    constraints.validate(constraints.validator(() -> StringUtils.isBlank(lastNameInRequest),
        () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, LAST_NAME,
            NO_LAST_NAME)));
  }

  /**
   * Method to validate provided last name in request is present in order or not.
   * 
   * @param lastNameInRequest
   * @param pnrReply
   * @param constraints
   */
  private static void validateRequestedLastNamePresentInOrder(String lastNameInRequest, PNR_Reply pnrReply,
      Constraints constraints) {
    constraints.validate(constraints.validator(
        () -> pnrReply != null && Boolean.FALSE
            .equals(isRequestedLastNamePresentInOrder(pnrReply.getTravellerInfo(), lastNameInRequest)),
        () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, ORDER_NOT_FOUND_MSG,
            ORDER_NOT_FOUND)));
  }

  /**
   * Validate the lastName passed in the request is present as the lastName of one of the passengers present in the
   * Order
   *
   * @param travelersInfo
   * @param lastNameInRequest
   * @return
   */
  private static boolean isRequestedLastNamePresentInOrder(List<TravellerInfo> travelersInfo,
      String lastNameInRequest) {
    return travelersInfo.stream()
        .map(TravellerInfo::getPassengerData)
        .flatMap(Collection::stream)
        .map(PassengerData::getTravellerInformation)
        .map(TravellerInformationType_185946S::getTraveller)
        .map(TravellerSurnameInformationType_260693C::getSurname)
        .filter(Objects::nonNull)
        .anyMatch(lastNameFromPNR -> StringUtils.equalsIgnoreCase(lastNameInRequest, lastNameFromPNR));
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\configuration\ACPRequestHandlerTest.java

```
package com.amadeus.dapi.jalext.common.configuration;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.rmi.RemoteException;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.digital.api.config.sitecontext.SiteContext;
import com.amadeus.digital.api.config.sitecontext.SiteContextException;
import com.amadeus.digital.api.lib.ezt.configuration.implementation.EztConfigurationProvider;
import com.amadeus.digital.api.util.dictionary.DataList;
import com.amadeus.digital.api.util.exceptions.KeyNotFoundException;
import com.amadeus.middleware.securitycontext.SecurityContext;

/**
 * Test class for ACPRequestHandler
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class ACPRequestHandlerTest {

  @Mock
  SiteContext siteContext;

  @Mock
  EztConfigurationProvider configurationProvider;

  @Mock
  SecurityContext securityContext;

  @InjectMocks
  private ACPRequestHandler acpRequestHandler;

  private static final String PARAMETER = "PARAM";

  private static final String SITE_PARAMETER = "SITE_PARAM";

  private static final String GLOBAL_LIST = "GLOBAL_LIST";

  private static final String VALUE = "VALUE";

  @BeforeEach
  public void setUp() throws IOException {
    try {
      when(configurationProvider.initSiteContext(any(SecurityContext.class))).thenReturn(siteContext);
      when(siteContext.getStringParameter(eq(SITE_PARAMETER))).thenReturn(VALUE);
      when(siteContext.getList(eq(GLOBAL_LIST))).thenReturn(createDataListForGlobalList());
    } catch (SiteContextException | KeyNotFoundException e) {
      e.printStackTrace();
    } 
  }

  private DataList createDataListForGlobalList() {
    DataList dataList = new DataList();
    DataList subDataList1 = new DataList();
    subDataList1.add("STR11");
    dataList.add(subDataList1);
    DataList subDataList2 = new DataList();
    subDataList2.add("STR21");
    subDataList2.add("STR22");
    dataList.add(subDataList2);
    return dataList;
  }


  @Test
  public void testGlobalList() {
    Optional<DataList> response = acpRequestHandler.getGlobalList(GLOBAL_LIST);
    assertTrue(response.isPresent());
    DataList dataList = response.get();
    assertEquals(2, dataList.size());
    assertEquals(1, dataList.getAsDataListAt(0).size());
    assertEquals(2, dataList.getAsDataListAt(1).size());
  }

  @Test
  public void testParamValue() {
    assertEquals(VALUE, acpRequestHandler.getParamValue(PARAMETER, VALUE));
  }
  
  @Test
  public void testBooleanValue() {
    assertFalse(acpRequestHandler.getBooleanValue(PARAMETER, false));
  }

  @Test
  public void testParamValueException() {
    try {
      when(configurationProvider.initSiteContext(any(SecurityContext.class)))
          .thenThrow(new SiteContextException("throw an exception"));
    } catch (SiteContextException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    assertEquals("anything", acpRequestHandler.getParamValue(PARAMETER, "anything"));
    try {
      when(siteContext.getStringParameter(eq(SITE_PARAMETER))).thenThrow(new KeyNotFoundException(PARAMETER));
    } catch (KeyNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (RemoteException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    assertEquals("anything", acpRequestHandler.getParamValue(PARAMETER, "anything"));
    try {
      when(siteContext.getStringParameter(eq(SITE_PARAMETER))).thenThrow(new RemoteException());
    } catch (KeyNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (RemoteException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    assertEquals("anything", acpRequestHandler.getParamValue(PARAMETER, "anything"));
  }

  @Test
  public void testGlobalListException() {
    try {
      when(configurationProvider.initSiteContext(any(SecurityContext.class)))
          .thenThrow(new SiteContextException("throw an exception"));
    } catch (SiteContextException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    Optional<DataList> response = acpRequestHandler.getGlobalList(GLOBAL_LIST);
    assertFalse(response.isPresent());
    try {
      when(siteContext.getList(eq(GLOBAL_LIST))).thenThrow(new KeyNotFoundException(PARAMETER));
    } catch (KeyNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (RemoteException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    response = acpRequestHandler.getGlobalList(GLOBAL_LIST);
    assertFalse(response.isPresent());
    try {
      when(siteContext.getList(eq(GLOBAL_LIST))).thenThrow(new RemoteException());
    } catch (KeyNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (RemoteException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    response = acpRequestHandler.getGlobalList(GLOBAL_LIST);
    assertFalse(response.isPresent());
  }

}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\invoker\DapiClientTest.java

```
package com.amadeus.dapi.jalext.common.invoker;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;

import javax.ws.rs.core.Response;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.digital.api.cartdapibox.rs.v2.endpoints.OrderApi;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirExchangeRequest;
import com.amadeus.digital.api.lib.client.connection.api.RestClientConnectivityHandler;

/**
 * Test class for DapiClient
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DapiClientTest {

  @Mock
  private RestClientConnectivityHandler restClientConnectivityHandler;

  @Mock
  private OrderApi orderApi;

  @Mock
  private Response response;

  @InjectMocks
  private DapiClient dapiClient;
  
  @Mock
  private OrderAirExchangeRequest orderAirExchangeRequest;
  
  private static final String ORDER_ID = "W4DLIP";
  private static final String LANG = "EN";
  private static final String LAST_NAME = "Tata";
  private static final  String FIRST_NAME = "Ekojuroku";
  private static final Boolean SHOW_ORDER_ELIGIBILITY = true;

  @Test
  public void testGetOrder() {    
    Mockito.when(restClientConnectivityHandler.initialize(any())).thenReturn(restClientConnectivityHandler);
    Mockito.when(restClientConnectivityHandler.getProxyOnPseudoDCX(OrderApi.class))
        .thenReturn(orderApi);
    Mockito.when(orderApi.retrieveOrder(ORDER_ID, LANG, LAST_NAME, FIRST_NAME, SHOW_ORDER_ELIGIBILITY, null, false))
        .thenReturn(response);
    Response orderResponse = dapiClient.getOrder(ORDER_ID, LANG, LAST_NAME, FIRST_NAME, SHOW_ORDER_ELIGIBILITY);
    assertEquals(response, orderResponse);
    Mockito.verify(restClientConnectivityHandler)
        .getProxyOnPseudoDCX(OrderApi.class);
    Mockito.verify(orderApi)
        .retrieveOrder(ORDER_ID, LANG, LAST_NAME, FIRST_NAME, SHOW_ORDER_ELIGIBILITY, null, false);
  }
  
  @Test
  public void testAirBoundExchangesConfirmation() {
    Mockito.when(restClientConnectivityHandler.initialize(any())).thenReturn(restClientConnectivityHandler);
    Mockito.when(restClientConnectivityHandler.getProxyOnPseudoDCX(OrderApi.class))
        .thenReturn(orderApi);
    Mockito.when(orderApi.airBoundExchangesConfirmation(ORDER_ID, orderAirExchangeRequest, LANG, LAST_NAME, FIRST_NAME))
        .thenReturn(response);
    dapiClient.airBoundExchangesConfirmation(orderAirExchangeRequest, ORDER_ID, LAST_NAME,
        FIRST_NAME, LANG);
    Mockito.verify(restClientConnectivityHandler)
        .getProxyOnPseudoDCX(OrderApi.class);
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\invoker\XmlWebServicesClientTest.java

```
package com.amadeus.dapi.jalext.common.invoker;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;

import java.math.BigDecimal;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.endpoint.CheckInEndpoint;
import com.amadeus.dapi.jalext.common.endpoint.TicketRepricePNRWithBookingClassEndpoint;
import com.amadeus.dapi.jalext.common.service.PNRRetrieveService;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRQ;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Test class for XmlWebServicesClient
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class XmlWebServicesClientTest {

  @Mock
  private ClientConversationHandlerFactory clientConversationHandlerFactory;

  @Mock
  private ClientConversationHandler clientConversationHandler;

  @Mock
  private CheckInEndpoint endpoint;

  @InjectMocks
  private XmlWebservicesClient webservicesClient;

  @Mock
  private AMA_TTR_GetQuiC_CheckInMethodRS response;
  
  @Mock
  private Ticket_RepricePNRWithBookingClass ticketRepricePNRWithBookingClass;
  
  @Mock
  private TicketRepricePNRWithBookingClassEndpoint ticketRepricePNRWithBookingClassEndpoint;
  
  @Mock
  private Ticket_RepricePNRWithBookingClassReply ticketRepricePNRWithBookingClassReply;
  
  @Mock
  private PNRRetrieveService pnrRetrieveService;
  
  private static final String ORDER_ID = "123456";
  
  @BeforeEach
  public void setUp() {
    webservicesClient = new XmlWebservicesClient(pnrRetrieveService);
  }  

  @Test
  public void testCheckinMethod() {
    AMA_TTR_GetQuiC_CheckInMethodRQ request=getRequest();
    Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
        .thenReturn(clientConversationHandler);
    Mockito.when(clientConversationHandler.getPort(CheckInEndpoint.class))
        .thenReturn(endpoint);
    Mockito.when(endpoint.checkInMethods(request))
        .thenReturn(response);
    webservicesClient.checkinMethod(request, clientConversationHandler);
    Mockito.verify(clientConversationHandler)
        .getPort(CheckInEndpoint.class);
    Mockito.verify(endpoint)
        .checkInMethods(request);
  }

  @Test
  public void testCheckinMethodException() {
    AMA_TTR_GetQuiC_CheckInMethodRQ request = getRequest();
    Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
        .thenThrow(new NullPointerException());
    assertNull(webservicesClient.checkinMethod(request, clientConversationHandler));
  }  

  @Test
  public void testGetPNRDetailsMethod() {
    Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
        .thenReturn(clientConversationHandler);
    webservicesClient.getPNRDetails(ORDER_ID, clientConversationHandler);
    Mockito.verify(pnrRetrieveService, Mockito.times(1))
        .getPNRResponse(ORDER_ID, clientConversationHandler);
  }

  private AMA_TTR_GetQuiC_CheckInMethodRQ getRequest() {
    return new AMA_TTR_GetQuiC_CheckInMethodRQ().withVersion(BigDecimal.valueOf(1.0))
        .withBookingIdentifier("W4DLIP");
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\service\CommonDapiRetrieveServiceTest.java

```
package com.amadeus.dapi.jalext.common.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

/**
 * Test class for CommonDapiRetrieveService
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class CommonDapiRetrieveServiceTest {

  @Mock
  private DapiClient dapiClient;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private RfdCannedMessageRepository rfdCannedMessageRepository;

  @InjectMocks
  private CommonDapiRetrieveService commonDapiRetrieveService;

  @Test
  public void testGetCommonDapiResponse() {
    String request = "";
    commonDapiRetrieveService.getCommonDapiResponse(request);
    Mockito.verify(dapiClient)
        .forwardRequest(httpServletRequest, request);
  }

  @Test
  public void testGetCommonDapiResponseException() {
    String request = "";
    Mockito.when(dapiClient.forwardRequest(httpServletRequest, request))
        .thenThrow(new RuntimeException());
    Response response = commonDapiRetrieveService.getCommonDapiResponse(request);
    assertEquals(response.getStatus(), Status.INTERNAL_SERVER_ERROR.getStatusCode());
  }

}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\service\PNRRetrieveServiceTest.java

```
package com.amadeus.dapi.jalext.common.service;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.endpoint.PnrRetrieveEndpoint;
import com.amadeus.dapi.jalext.impl.common.endpoint.MockPnrRetrieveEndpoint;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class PNRRetrieveServiceTest {

  @Mock
  private ClientConversationHandler clientConversationHandler;

  @Mock
  private MockPnrRetrieveEndpoint mockPnrRetrieveEndpoint;

  private static final String ORDER_ID = "123456";

  @Test
  public void testPNRResponsePresent() {
    PNRRetrieveService pnrRetrieveService = new PNRRetrieveService();
    PNR_Reply pnrReply = getPNRReply("PNR_Reply.xml");
    Mockito.when(clientConversationHandler.getPort(PnrRetrieveEndpoint.class)).thenReturn(mockPnrRetrieveEndpoint);
    Mockito.when(mockPnrRetrieveEndpoint.retrievePNR(any(PNR_Retrieve.class))).thenReturn(pnrReply);
    Optional<PNR_Reply> response = pnrRetrieveService.getPNRResponse(ORDER_ID, clientConversationHandler);
    assertTrue(response.isPresent());
  }

  @Test
  public void testPNRResponseEmptyIfOrderIdBlank() {
    PNRRetrieveService pnrRetrieveService = new PNRRetrieveService();
    Optional<PNR_Reply> response = pnrRetrieveService.getPNRResponse(null, clientConversationHandler);
    assertFalse(response.isPresent());
  }
  
  private PNR_Reply getPNRReply(String xmlName) {
    return Format.xml().parse(PNR_Reply.class, this.getClass(), xmlName);
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\util\DateTimeUtilsTest.java

```
package com.amadeus.dapi.jalext.common.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.mock;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import com.amadeus.middleware.rfd.TimeZone;

/**
 * This class encloses the junits to test the end to end functionality of DateTimeUtils.
 */
public class DateTimeUtilsTest {

  private List<TimeZone> timeZonesSg;
  private List<TimeZone> timeZonesAu;

  /**
   * This method mocks the required objects before tests
   */
  @BeforeEach
  public void setUp() {
    mockTimeZones();
  }

  /**
   * This method tests the buildDateTime method
   */
  @Test
  public void testBuildDateTime() {
    DateTime dateTime = DateTimeUtils.buildDateTime("180819", "1150");
    assertNotNull(dateTime.toString());
  }

  /**
   * This method tests the buildDateTime method by passing null time
   */
  @Test
  public void testBuildDateTimeWithNullTime() {
    DateTime dateTime = DateTimeUtils.buildDateTime("180719", null);
    assertNull(dateTime);
  }

  /**
   * This method tests the buildLocalDate method
   */
  @Test
  public void testBuildLocalDate() {
    LocalDate localDate = DateTimeUtils.buildLocalDate("15OCT2019");
    assertNotNull(localDate);
  }

  /**
   * This method tests the buildLocalDate method by passing null date
   */
  @Test
  public void testBuildLocalWithNullDate() {
    LocalDate localDate = DateTimeUtils.buildLocalDate(null);
    assertNull(localDate);
  }

  /**
   * This method tests the buildDateTime method by passing null date
   */
  @Test
  public void testBuildDateTimeWithNullDate() {
    DateTime dateTime = DateTimeUtils.buildDateTime(null, "1150");
    assertNull(dateTime);
  }

  /**
   * This method tests the buildDateWithTimeZone method for perth
   */
  @Test
  public void testBuildDateWithTimeZoneForPer() {
    String expectedresult = "2019-08-25T11:50:00.000+08:00";
    DateTime date = DateTimeUtils.buildDateWithTimeZone(timeZonesAu,
        DateTimeUtils.buildDateTime("250819", "1150").toLocalDateTime());
    assertEquals(date.toString(), expectedresult);
  }

  /**
   * This method tests the buildDateWithTimeZone method for Singapore
   */
  @Test
  public void testBuildDateWithTimeZoneForSin() {
    String expectedresult = "2019-08-25T11:50:00.000+08:00";
    DateTime date = DateTimeUtils.buildDateWithTimeZone(timeZonesSg,
        DateTimeUtils.buildDateTime("250819", "1150").toLocalDateTime());
    assertEquals(date.toString(), expectedresult);
  }

  /**
   * This method tests the buildDateWithTimeZone method without passing location
   */
  @Test
  public void testBuildDateWithTimeZoneWithoutPassingLocation() {
    String expectedResult = "2019-08-25T11:50:00.000Z";
    DateTime date = DateTimeUtils.buildDateWithTimeZone(null,
        DateTimeUtils.buildDateTime("250819", "1150").toLocalDateTime());
    assertEquals(expectedResult, date.toString());
  }
  
  @Test
  public void testBuildLocalDateTime() {
    String dateTime = "2019-08-25T11:50:00.000Z";
    LocalDateTime localDateTime = DateTimeUtils.buildDateTime(dateTime);
    LocalDateTime actualLocalDateTime = LocalDateTime.parse("2019-08-25T11:50:00.000");
    assertEquals(actualLocalDateTime, localDateTime);
  }

  @Test
  public void testBuildLocalDateTimeWithNullDate() {
    String dateTime = null;
    LocalDateTime localDateTime = DateTimeUtils.buildDateTime(dateTime);
    assertEquals(null, localDateTime);
  }

  /**
   * This method mocks timeZoneRecords
   */
  private void mockTimeZones() {
    LocalDateTime endDateTime = LocalDateTime.parse("4242-12-31T23:59:00.000000");
    LocalDateTime startDateTime = LocalDateTime.parse("1973-01-01T00:00:00.000000");
    timeZonesSg = new ArrayList<>();
    TimeZone timeZoneSg = mock(TimeZone.class);
    mockTimeZone(endDateTime, startDateTime, timeZoneSg);
    timeZonesSg.add(timeZoneSg);
    timeZonesAu = new ArrayList<>();
    TimeZone timeZoneAu = mock(TimeZone.class);
    mockTimeZone(endDateTime, startDateTime, timeZoneAu);
    timeZonesAu.add(timeZoneAu);
  }

  /**
   * This method mocks the time zone
   * 
   * @param endDateTime
   * @param startDateTime
   * @param tzRecord
   */
  private void mockTimeZone(LocalDateTime endDateTime, LocalDateTime startDateTime, TimeZone tzRecord) {
    Mockito.when(tzRecord.getEndDateTime()).thenReturn(endDateTime);
    Mockito.when(tzRecord.getStartDateTime()).thenReturn(startDateTime);
    Mockito.when(tzRecord.getStdUtcVariation()).thenReturn((long)480);
    Mockito.when(tzRecord.getDstVariation()).thenReturn((long)0);
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\validator\ValidateLastNameInOrderServiceTest.java

```
package com.amadeus.dapi.jalext.common.validator;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import javax.validation.ConstraintViolationException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolation;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;

/**
 * Test class to validate ValidateLastNameInOrderService.java
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class ValidateLastNameInOrderServiceTest {

  private ValidateLastNameInOrderService validateLastNameInOrderService;

  private Constraints constraints;

  private AmadeusConstraintViolation<?> violations;

  private static final String INVALID_LASTNAME = "TEST";

  private static final int ORDER_NOT_FOUND_ERROR_CODE = 36894;

  private static final int LAST_NAME_SHOULD_PROVIDE_ERROR_CODE = 36962;

  @BeforeEach
  public void setUp() {
    constraints = new Constraints(new ConstraintViolationFactoryImpl());
    validateLastNameInOrderService = new ValidateLastNameInOrderService();
  }

  /**
   * Test to assert proper error code populated if last name is not provided or null
   */
  @Test
  public void testIfLastNameisNotProvided() {
    violations = runValidatorAndGetError(null);
    assertNotNull(violations);
    assertEquals(LAST_NAME_SHOULD_PROVIDE_ERROR_CODE, violations.getCanMessageNumber());
  }

  /**
   * Test to assert proper error code populated if last name is not valid
   */
  @Test
  public void testIfLastNameisInvalid() {
    violations = runValidatorAndGetError(INVALID_LASTNAME);
    assertNotNull(violations);
    assertEquals(ORDER_NOT_FOUND_ERROR_CODE, violations.getCanMessageNumber());
  }

  /**
   * Method to validate the request and get the error from constraint
   * 
   * @param pnrReply
   * @return
   */
  private AmadeusConstraintViolation<?>
      runValidatorAndGetError(String lastName) {
    PNR_Reply pnrReply = getPNRReply("PNR_Reply.xml");
    try {
      validateLastNameInOrderService.validateLastNameInOrder(lastName, pnrReply, constraints, false);
    } catch (ConstraintViolationException e) {
      violations = (AmadeusConstraintViolation)e.getConstraintViolations()
          .toArray()[0];
    }
    return violations;
  }

  private PNR_Reply getPNRReply(String xmlName) {
    return Format.xml().parse(PNR_Reply.class, this.getClass(), xmlName);
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\impl\common\endpoint\MockPnrRetrieveEndpoint.java

```
package com.amadeus.dapi.jalext.impl.common.endpoint;

import com.amadeus.dapi.jalext.common.endpoint.PnrRetrieveEndpoint;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve;

/**
 * To mock PnrRetrieveEndpoint class to avoid real calls
 * 
 * @author ysiva
 */
public class MockPnrRetrieveEndpoint implements PnrRetrieveEndpoint {

  private PNR_Reply pnrReply;

  /**
   * Constructor to inject pnrReply
   * 
   * @param pnrReply
   *          pnrReply
   */
  public MockPnrRetrieveEndpoint(PNR_Reply pnrReply) {
    this.pnrReply = pnrReply;
  }

  @Override
  public PNR_Reply retrievePNR(PNR_Retrieve pnrRetrieveRequest) {
    return pnrReply;
  }
}

```

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\impl\common\endpoint\MockTicketRepricePNRWithBookingClassEndpoint.java

```
package com.amadeus.dapi.jalext.impl.common.endpoint;

import com.amadeus.dapi.jalext.common.endpoint.TicketRepricePNRWithBookingClassEndpoint;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * To mock the TicketRepricePNRWithBookingClassEndpoint class to avoid the real calls
 * 
 * @author ysiva
 *
 */
public class MockTicketRepricePNRWithBookingClassEndpoint implements TicketRepricePNRWithBookingClassEndpoint {

  private Ticket_RepricePNRWithBookingClassReply ticketRepricePNRWithBookingClassReply;

  /**
   * Constructor to inject ticketRepricePNRWithBookingClassReply
   * 
   * @param ticketRepricePNRWithBookingClassReply
   *          ticketRepricePNRWithBookingClassReply
   */
  public MockTicketRepricePNRWithBookingClassEndpoint(
      Ticket_RepricePNRWithBookingClassReply ticketRepricePNRWithBookingClassReply) {
    this.ticketRepricePNRWithBookingClassReply = ticketRepricePNRWithBookingClassReply;
  }

  @Override
  public Ticket_RepricePNRWithBookingClassReply getRepricePNR(Ticket_RepricePNRWithBookingClass request) {
    return ticketRepricePNRWithBookingClassReply;
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\builder\DisruptionRepriceRecommendationIdBuilder.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.builder;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters.DocumentsConverter;
import com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters.PricesConverter;
import com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters.RequestedFlightDetailsConverter;
import com.amadeus.dapi.jalext.impl.disruption.reprice.util.AirPricingRecordsViewUtil;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;
import com.amadeus.digital.api.lib.logging.BusinessLogger;
import com.amadeus.jal.dapi.model.core.BoundView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyDataView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyView;
import com.amadeus.jal.dapi.model.core.FlightItemView;
import com.amadeus.jal.dapi.model.core.FlightView;
import com.amadeus.jcp.access.utils.ProtobufSerializationService;
import com.amadeus.proto.ssp.atc.AirBoundsProto.AirBounds;
import com.amadeus.proto.ssp.atc.DocumentsProto.Documents;
import com.amadeus.proto.ssp.atc.FrequentFlyerInformationProto.FrequentFlyerInformation;
import com.amadeus.proto.ssp.atc.OrderAirExchangeRequestProto.OrderAirExchangeRequest;
import com.amadeus.proto.ssp.atc.OrderAirExchangeRequestProto.OrderAirExchangeRequest.Builder;
import com.amadeus.xml.taripr_19_1_1a.CouponDetailsType;
import com.amadeus.xml.taripr_19_1_1a.FareComponentDtlsType;
import com.amadeus.xml.taripr_19_1_1a.PricingOrTicketingSubsequentType;
import com.amadeus.xml.taripr_19_1_1a.RateTariffClassInformationType;
import com.amadeus.xml.taripr_19_1_1a.ReferenceInfoType;
import com.amadeus.xml.taripr_19_1_1a.ReferencingDetailsType;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList;

/**
 * Class is responsible to build recommendation id
 * 
 * @author ysiva
 */
@Named
public class DisruptionRepriceRecommendationIdBuilder {
  
  private static final String INVALID_AIRBOUND_CREATE_ERROR_MESSAGE = "An error occurred while creating airboundId";

  /**
   * Method to build recommendation id
   * 
   * @param disruptionRepricingReplyView
   *          disruptionRepricingReplyView
   * @param flightsHelper
   *          flightsHelper
   * @param reply
   *          reply
   * @param awardFareHelper
   *          awardFareHelper
   */
  public void buildRecommendationId(DisruptionRepricingReplyView disruptionRepricingReplyView,
      FlightsHelper flightsHelper, Ticket_RepricePNRWithBookingClassReply reply, AwardFareHelper awardFareHelper) {
    List<FareList> fareDetails = AirPricingRecordsViewUtil.getFareDetails(reply);
    List<FareComponentDtlsType> fareComponentDetails = getFareComponentDetails(fareDetails);
    Map<String, String> segmnetIdToFareClass = getSegmentIdToFareClass(fareComponentDetails);
    List<BoundView> boundViews = getBoundViews(disruptionRepricingReplyView);
    Map<String, BoundView> boundIdToBoundView = getBoundIdToBoundView(boundViews, flightsHelper);
    List<Documents> documents = getDocuments(flightsHelper.getTicketNumberToTravelerId());
    Set<String> travelerIds = getTravelerIds(flightsHelper);
    Map<String, String> segmentIdToStatusCode = getSegmentIdToFlightStatus(boundViews);
    Map<String, FlightView> flightIdToFlightDetails = disruptionRepricingReplyView.getDictionaries().getFlight();
    AtomicInteger detailsSetCount = new AtomicInteger(1);
    MapUtils.emptyIfNull(boundIdToBoundView).forEach((String boundId, BoundView boundView) -> {
      OrderAirExchangeRequest.Builder orderExchangeRequest = populateAirBound(segmnetIdToFareClass, travelerIds,
          segmentIdToStatusCode, flightIdToFlightDetails, boundId, boundView, flightsHelper);
      addAwardFareDetails(orderExchangeRequest, awardFareHelper);
      addDocumentAndPrices(disruptionRepricingReplyView, documents, detailsSetCount, orderExchangeRequest,
          awardFareHelper);
      try {
        boundView.setAirBoundId(ProtobufSerializationService.encodeToString(orderExchangeRequest.build()));
      } catch (IOException e) {
        BusinessLogger.info(DisruptionRepriceRecommendationIdBuilder.class, INVALID_AIRBOUND_CREATE_ERROR_MESSAGE, e);
      }
    });
  }

  private static void addAwardFareDetails(Builder orderExchangeRequest, AwardFareHelper awardFareHelper) {
    if (awardFareHelper.isAwardFareRequested()) {
      orderExchangeRequest.setIsAwardFare(awardFareHelper.isAwardFareRequested());
      addFrequentFlyerInformation(orderExchangeRequest, awardFareHelper.getFrequentFlyerCardNumber(),
          awardFareHelper.getFrequentFlyerCompanyCode());
      addCorporateCodes(orderExchangeRequest, awardFareHelper.getCorporateCodes());
    }
  }

  private static void addCorporateCodes(Builder orderExchangeRequest, List<String> corporateCodes) {
    CollectionUtils.emptyIfNull(corporateCodes).stream().forEach(orderExchangeRequest::addCorporateCodes);
  }

  private static void addFrequentFlyerInformation(Builder orderExchangeRequest, String frequentFlyerCardNumber,
      String frequentFlyerCompanyCode) {
    FrequentFlyerInformation frequentFlyerInformation = FrequentFlyerInformation.newBuilder()
        .setFrequentFlyerNumber(frequentFlyerCardNumber != null ? frequentFlyerCardNumber : StringUtils.EMPTY)
        .setAirlineCode(frequentFlyerCompanyCode)
        .build();
    orderExchangeRequest.setFrequentFlyerInformation(frequentFlyerInformation);
  }

  /**
   * @param disruptionRepricingReplyView
   * @param documents
   * @param detailsSetCount
   * @param orderExchangeRequest
   * @param awardFareHelper
   */
  private static void addDocumentAndPrices(DisruptionRepricingReplyView disruptionRepricingReplyView,
      List<Documents> documents, AtomicInteger detailsSetCount, OrderAirExchangeRequest.Builder orderExchangeRequest,
      AwardFareHelper awardFareHelper) {
    if (detailsSetCount.get() == 1) {
      orderExchangeRequest.addAllDocuments(documents);
      orderExchangeRequest.setPrices(PricesConverter.INSTANCE.convert(disruptionRepricingReplyView, awardFareHelper));
      detailsSetCount.getAndIncrement();
    }
  }

  /**
   * @param segmnetIdToFareClass
   * @param travelerIds
   * @param segmentIdToStatusCode
   * @param flightIdToFlightDetails
   * @param boundId
   * @param boundView
   * @return
   */
  private static OrderAirExchangeRequest.Builder populateAirBound(Map<String, String> segmnetIdToFareClass,
      Set<String> travelerIds, Map<String, String> segmentIdToStatusCode, 
      Map<String, FlightView> flightIdToFlightDetails, String boundId, BoundView boundView,
       FlightsHelper flightsHelper) {
    AirBounds.Builder boundExchangeRequest = AirBounds.newBuilder();
    boundExchangeRequest.setBoundId(boundId);
    CollectionUtils.emptyIfNull(boundView.getFlights())
        .forEach((FlightItemView flight) -> boundExchangeRequest.addRequestedFlights(
            RequestedFlightDetailsConverter.INSTANCE.convert(flightIdToFlightDetails, flight, segmnetIdToFareClass,
                travelerIds, segmentIdToStatusCode, flightsHelper)));
    OrderAirExchangeRequest.Builder orderExchangeRequest = OrderAirExchangeRequest.newBuilder();
    orderExchangeRequest.setIsRemoveBound(flightsHelper.isRemoveBound());
    orderExchangeRequest.addAirBounds(boundExchangeRequest);
    return orderExchangeRequest;
  }

  /**
   * @param fareComponentDetails
   * @return
   */
  private static Map<String, String> getSegmentIdToFareClass(List<FareComponentDtlsType> fareComponentDetails) {
    Map<String, String> segmentIdToFareClass = new HashMap<>();
    CollectionUtils.emptyIfNull(fareComponentDetails).forEach((FareComponentDtlsType fareComponentDetail) -> {
      String fareClass = getFareclass(fareComponentDetail.getComponentClassInfo());
      CollectionUtils.emptyIfNull(fareComponentDetail.getCouponDetailsGroup())
          .forEach((CouponDetailsType couponDetail) -> {
            ReferencingDetailsType referenceDetails = getReferenceDetails(couponDetail);
            populateSegmentIdToFareClass(segmentIdToFareClass, fareClass, referenceDetails);
          });
    });
    return segmentIdToFareClass;
  }

  /**
   * @param segmentIdToFareClass
   * @param fareClass
   * @param referenceDetails
   */
  private static void populateSegmentIdToFareClass(Map<String, String> segmentIdToFareClass, String fareClass,
      ReferencingDetailsType referenceDetails) {
    if (referenceDetails != null) {
      String segmentId = referenceDetails.getType() + referenceDetails.getValue();
      if (StringUtils.isNotBlank(segmentId) && StringUtils.isNotBlank(fareClass)) {
        segmentIdToFareClass.put(segmentId, fareClass);
      }
    }
  }

  /**
   * @param couponDetail
   * @return
   */
  private static ReferencingDetailsType getReferenceDetails(CouponDetailsType couponDetail) {
    return Optional.ofNullable(couponDetail)
        .map(CouponDetailsType::getProductId)
        .map(ReferenceInfoType::getReferenceDetails)
        .orElse(null);
  }

  /**
   * @param componentClassInfo
   * @return
   */
  private static String getFareclass(PricingOrTicketingSubsequentType componentClassInfo) {
    return Optional.ofNullable(componentClassInfo)
        .map(PricingOrTicketingSubsequentType::getFareBasisDetails)
        .map(RateTariffClassInformationType::getRateTariffClass)
        .orElse(StringUtils.EMPTY);
  }

  /**
   * @param fareDetails
   * @return
   */
  private static List<FareComponentDtlsType> getFareComponentDetails(List<FareList> fareDetails) {
    return CollectionUtils.emptyIfNull(fareDetails)
        .stream()
        .map(FareList::getFareComponentDetailsGroup)
        .flatMap(Collection::stream)
        .collect(Collectors.toList());
  }

  /**
   * @param disruptionRepricingReplyView
   * @return
   */
  private static List<BoundView> getBoundViews(DisruptionRepricingReplyView disruptionRepricingReplyView) {
    return Optional.ofNullable(disruptionRepricingReplyView)
        .map(DisruptionRepricingReplyView::getData)
        .map(DisruptionRepricingReplyDataView::getBounds)
        .orElse(Collections.emptyList());
  }

  /**
   * @param flightsHelper
   * @return
   */
  private static Set<String> getTravelerIds(FlightsHelper flightsHelper) {
    return CollectionUtils.emptyIfNull(flightsHelper.getTravelDocuments())
        .stream()
        .map(TravelDocument::getTravelerIds)
        .flatMap(Collection::stream)
        .collect(Collectors.toSet());
  }

  /**
   * @param boundViews
   * @return
   */
  private static Map<String, BoundView> getBoundIdToBoundView(List<BoundView> boundViews, FlightsHelper flightsHelper) {
    return CollectionUtils.emptyIfNull(boundViews).stream().collect(
        Collectors.toMap(boundView -> flightsHelper.getOriginalBoundId(boundView.getAirBoundId()),
        Function.identity()));
  }

  /**
   * @param ticketNumberToTravelerId
   * @return
   */
  private static List<Documents> getDocuments(Map<String, String> ticketNumberToTravelerId) {
    List<Documents> documents = new ArrayList<>();
    MapUtils.emptyIfNull(ticketNumberToTravelerId).forEach(
        (ticketNumber, travelerId) -> documents.add(DocumentsConverter.INSTANCE.convert(ticketNumber, travelerId)));
    return documents;
  }

  /**
   * @param boundViews
   * @return
   */
  private static Map<String, String> getSegmentIdToFlightStatus(List<BoundView> boundViews) {
    return CollectionUtils.emptyIfNull(boundViews)
        .stream()
        .map(BoundView::getFlights)
        .flatMap(Collection::stream)
        .collect(Collectors.toMap(FlightItemView::getId, FlightItemView::getStatusCode, (old, newVal) -> newVal));
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirOfferDictionaryViewJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.util.HashMap;
import java.util.Map;

import javax.inject.Named;

import org.apache.commons.collections4.MapUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.jal.dapi.model.core.AirOfferDictionaryView;
import com.amadeus.jal.dapi.model.core.BookingStatusDictionaryItemView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyView;
import com.amadeus.jal.dapi.model.core.FlightView;
import com.amadeus.jal.dapi.model.core.OrderDictionaryView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;

/**
 * Mapper class is responsible to map the dictionary details
 * 
 * @author ysiva
 */
@Named
public class AirOfferDictionaryViewJsonResponseMapper {

  /**
   * Method to map dictionary details in json response
   * 
   * @param orderReplyView
   *          orderReplyView
   * @param disruptionRepricingReplyView
   *          disruptionRepricingReplyView
   * @param flightsHelper
   *          flightsHelper
   */
  public void mapDictionary(OrderReplyView orderReplyView,
      DisruptionRepricingReplyView disruptionRepricingReplyView, FlightsHelper flightsHelper) {
    AirOfferDictionaryView airOfferDictionaryView = new AirOfferDictionaryView();
    OrderDictionaryView orderDictionaryView = orderReplyView.getDictionaries();
    airOfferDictionaryView.setFlight(mapFlights(flightsHelper, orderDictionaryView));
    airOfferDictionaryView.setAircraft(orderDictionaryView.getAircraft());
    airOfferDictionaryView.setBookingStatus(mapStatusCodes(flightsHelper, orderDictionaryView));
    airOfferDictionaryView.setCountry(orderDictionaryView.getCountry());
    airOfferDictionaryView.setCurrency(orderDictionaryView.getCurrency());
    airOfferDictionaryView.setAirline(orderDictionaryView.getAirline());
    airOfferDictionaryView.setLocation(orderDictionaryView.getLocation());
    disruptionRepricingReplyView.setDictionaries(airOfferDictionaryView);
  }

  private static Map<String, FlightView> mapFlights(FlightsHelper flightsHelper,
      OrderDictionaryView orderDictionaryView) {
    Map<String, FlightView> flights = orderDictionaryView.getFlight();
    Map<String, FlightView> filteredFlightDetails = new HashMap<>();
    MapUtils.emptyIfNull(flights).forEach((String flightId, FlightView flightDetails) -> {
      if (flightsHelper.getFlightIds().contains(flightId)) {
        FlightView flightView = flights.get(flightId);
        filteredFlightDetails.put(flightId, flightView);
      }
    });
    return filteredFlightDetails;
  }

  private static Map<String, BookingStatusDictionaryItemView> mapStatusCodes(FlightsHelper flightsHelper,
      OrderDictionaryView orderDictionaryView) {
    Map<String, BookingStatusDictionaryItemView> statusCodeDetails = orderDictionaryView.getBookingStatus();
    Map<String, BookingStatusDictionaryItemView> bookingStatusDictionaryItemViews = new HashMap<>();
    MapUtils.emptyIfNull(statusCodeDetails)
        .forEach((String statusCode, BookingStatusDictionaryItemView statusCodeDetail) -> {
          if (flightsHelper.getFlightStatusCodes().contains(statusCode)) {
            BookingStatusDictionaryItemView bookingStatusDictionaryView = statusCodeDetails.get(statusCode);
            bookingStatusDictionaryItemViews.put(statusCode, bookingStatusDictionaryView);
          }
        });
    return bookingStatusDictionaryItemViews;
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirPricingRecordsViewJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import com.amadeus.jal.dapi.model.core.AirPricingRecordsView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyDataView;
import com.amadeus.jal.dapi.model.core.UnitPriceView;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Class is responsible to build air pricing record details
 * 
 * @author ysiva
 */
@Named
public class AirPricingRecordsViewJsonResponseMapper {

  private UnitPriceViewJsonResponseMapper unitPriceViewJsonResponseMapper;

  private TotalPricesViewJsonResponseMapper totalPricesViewJsonResponseMapper;

  private ExchangePriceDetailsViewJsonResponseMapper exchangePriceDetailsViewJsonResponseMapper;

  /**
   * Constructor to inject required prices mappers
   * 
   * @param unitPriceViewJsonResponseMapper
   *          unitPriceViewJsonResponseMapper
   * @param totalPricesViewJsonResponseMapper
   *          totalPricesViewJsonResponseMapper
   * @param exchangePriceDetailsViewJsonResponseMapper
   *          exchangePriceDetailsViewJsonResponseMapper
   */
  @Inject
  public AirPricingRecordsViewJsonResponseMapper(UnitPriceViewJsonResponseMapper unitPriceViewJsonResponseMapper,
      TotalPricesViewJsonResponseMapper totalPricesViewJsonResponseMapper,
      ExchangePriceDetailsViewJsonResponseMapper exchangePriceDetailsViewJsonResponseMapper) {
    this.unitPriceViewJsonResponseMapper = unitPriceViewJsonResponseMapper;
    this.totalPricesViewJsonResponseMapper = totalPricesViewJsonResponseMapper;
    this.exchangePriceDetailsViewJsonResponseMapper = exchangePriceDetailsViewJsonResponseMapper;
  }

  /**
   * Method to map prices details
   * 
   * @param reply
   *          reply
   * @param disruptionRepricingReplyDataView
   *          disruptionRepricingReplyDataView
   * @param isAwardFareRequested
   *          isAwardFareRequested
   */
  public void mapPricesView(Ticket_RepricePNRWithBookingClassReply reply,
      DisruptionRepricingReplyDataView disruptionRepricingReplyDataView, boolean isAwardFareRequested) {
    AirPricingRecordsView airPricingRecordsView = new AirPricingRecordsView();
    List<UnitPriceView> unitPrices = new ArrayList<>();
    unitPriceViewJsonResponseMapper.mapUnitPrices(reply, airPricingRecordsView, unitPrices, isAwardFareRequested);
    totalPricesViewJsonResponseMapper.mapTotalPrices(airPricingRecordsView, unitPrices);
    exchangePriceDetailsViewJsonResponseMapper.mapTotalExchangePrices(airPricingRecordsView, unitPrices,
        isAwardFareRequested);
    disruptionRepricingReplyDataView.setPrices(airPricingRecordsView);
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\BoundsViewJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import javax.inject.Named;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.jal.dapi.model.core.BoundView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyDataView;
import com.amadeus.jal.dapi.model.core.FlightItemView;
import com.amadeus.jal.dapi.model.core.OrderAirItemView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.jal.dapi.model.core.OrderView;

/**
 * Mapper class is responsible to build bound view details in Json response
 * 
 * @author ysiva
 */
@Named
public class BoundsViewJsonResponseMapper {  

  /**
   * Method to map bound details in response
   * 
   * @param orderReplyView
   *          orderReplyView
   * @param disruptionRepricingReplyDataView
   *          disruptionRepricingReplyDataView
   * @param flightsHelper
   *          flightsHelper
   */
  public void mapBoundsView(OrderReplyView orderReplyView,
      DisruptionRepricingReplyDataView disruptionRepricingReplyDataView, FlightsHelper flightsHelper) {
    List<BoundView> bounds = new LinkedList<>();
    List<BoundView> boundsFromOrder = getBoundsFromOrderReply(orderReplyView);
    AtomicInteger boundId = new AtomicInteger(1);
    CollectionUtils.emptyIfNull(boundsFromOrder).forEach((BoundView boundFromOrder) -> {
      List<FlightItemView> flightsView = getFlightsView(boundFromOrder, flightsHelper);
      Set<String> segmentIds = getFlightIds(flightsView);
      if (flightsHelper.getFlightIds().containsAll(segmentIds)) {
        populateFlightHelper(flightsHelper, boundFromOrder, boundId.get());
        populateBoundView(bounds, boundId, boundFromOrder, flightsView);
      }
    });
    disruptionRepricingReplyDataView.setBounds(bounds);
  }

  private static void populateBoundView(List<BoundView> bounds, AtomicInteger boundId, BoundView boundFromOrder, List<FlightItemView> flightsView) {
    BoundView bound = new BoundView();
    bound.setAirBoundId(String.valueOf(boundId.getAndIncrement()));
    bound.setDestinationLocationCode(boundFromOrder.getDestinationLocationCode());
    bound.setOriginLocationCode(boundFromOrder.getOriginLocationCode());
    bound.setDuration(boundFromOrder.getDuration());
    bound.setFlights(flightsView);
    bounds.add(bound);
  }

  private static void populateFlightHelper(FlightsHelper flightsHelper, BoundView boundFromOrder, int boundId) {
    List<FlightItemView> flightsView = getFlightsView(boundFromOrder, flightsHelper);
    Set<String> segmentIds = getFlightIds(flightsView);
    if (flightsHelper.getFlightIds().containsAll(segmentIds)) {
      flightsHelper.addFlightStatusCodes(getStatusCodes(flightsView));
      flightsHelper.addRepricedToOriginalBoundId(String.valueOf(boundId), boundFromOrder.getAirBoundId());
    }
  }

  private static List<FlightItemView> getFlightsView(BoundView boundFromOrder, FlightsHelper flightsHelper) {
    return CollectionUtils.emptyIfNull(boundFromOrder.getFlights())
        .stream()
        .filter(flightItemView -> flightsHelper.getFlightIds().contains(flightItemView.getId()))
        .collect(Collectors.toList());
  }

  private static Set<String> getStatusCodes(List<FlightItemView> flightsView) {
    return flightsView.stream().map(FlightItemView::getStatusCode).collect(Collectors.toSet());
  }

  private static Set<String> getFlightIds(List<FlightItemView> flightsView) {
    return flightsView.stream().map(FlightItemView::getId).collect(Collectors.toSet());
  }

  private static List<BoundView> getBoundsFromOrderReply(OrderReplyView orderReplyView) {
    return Optional.ofNullable(orderReplyView)
        .map(OrderReplyView::getData)
        .map(OrderView::getAir)
        .map(OrderAirItemView::getBounds)
        .orElse(Collections.emptyList());
  } 
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\DisruptionRepricingJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.builder.DisruptionRepriceRecommendationIdBuilder;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.util.AirPricingRecordsViewUtil;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyDataView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.xml.taripr_19_1_1a.CodedAttributeInformationType_281044C;
import com.amadeus.xml.taripr_19_1_1a.CodedAttributeType_202155S;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList;

/**
 * Class is responsible to map the disruptive repricing details in the form of Json, once received reply from TARIPQ
 * verb
 * 
 * @author ysiva
 */
@Named
public class DisruptionRepricingJsonResponseMapper {

  private AirPricingRecordsViewJsonResponseMapper airPricingRecordsViewJsonResponseMapper;

  private BoundsViewJsonResponseMapper boundsViewJsonResponseMapper;

  private AirOfferDictionaryViewJsonResponseMapper airOfferDictionaryViewJsonResponseMapper;

  private DisruptionRepriceRecommendationIdBuilder disruptionRepriceRecommendationIdBuilder;

  private static final int INDEX_7 = 7;

  private static final String END_ATTRIBUTE = "END";

  private static final String WAIVE = "WAIVE";

  /**
   * Constructor to inject other required mappers
   * 
   * @param airPricingRecordsViewJsonResponseMapper
   *          airPricingRecordsViewJsonResponseMapper
   * @param boundsViewJsonResponseMapper
   *          boundsViewJsonResponseMapper
   * @param airOfferDictionaryViewJsonResponseMapper
   *          airOfferDictionaryViewJsonResponseMapper
   * @param disruptionRepriceRecommendationIdBuilder
   *          disruptionRepriceRecommendationIdBuilder
   */
  @Inject
  public DisruptionRepricingJsonResponseMapper(
      AirPricingRecordsViewJsonResponseMapper airPricingRecordsViewJsonResponseMapper,
      BoundsViewJsonResponseMapper boundsViewJsonResponseMapper,
      AirOfferDictionaryViewJsonResponseMapper airOfferDictionaryViewJsonResponseMapper,
      DisruptionRepriceRecommendationIdBuilder disruptionRepriceRecommendationIdBuilder) {
    this.airPricingRecordsViewJsonResponseMapper = airPricingRecordsViewJsonResponseMapper;
    this.boundsViewJsonResponseMapper = boundsViewJsonResponseMapper;
    this.airOfferDictionaryViewJsonResponseMapper = airOfferDictionaryViewJsonResponseMapper;
    this.disruptionRepriceRecommendationIdBuilder = disruptionRepriceRecommendationIdBuilder;
  }

  /**
   * Method to build disruption re-pricing response
   * 
   * @param reply
   *          reply
   * @param orderReplyView
   *          orderReplyView
   * @param awardFareHelper
   *          awardFareHelper
   * @return disruption re-pricing response
   */
  public Response buildDisruptionRepricingResponse(Ticket_RepricePNRWithBookingClassReply reply,
      OrderReplyView orderReplyView, FlightsHelper flightsHelper, AwardFareHelper awardFareHelper) {
    DisruptionRepricingReplyView disruptionRepricingReplyView = new DisruptionRepricingReplyView();
    mapData(orderReplyView, disruptionRepricingReplyView, reply, flightsHelper, awardFareHelper.isAwardFareRequested());
    mapDictionary(orderReplyView, disruptionRepricingReplyView, flightsHelper);
    disruptionRepriceRecommendationIdBuilder.buildRecommendationId(disruptionRepricingReplyView, flightsHelper, reply,
        awardFareHelper);
    return Response.status(Status.OK)
        .entity(disruptionRepricingReplyView)
        .build();
  }

  private void mapData(OrderReplyView orderReplyView, DisruptionRepricingReplyView disruptionRepricingReplyView,
      Ticket_RepricePNRWithBookingClassReply reply, FlightsHelper flightsHelper, boolean isAwardFareRequested) {
    if (reply == null) {
      return;
    }
    DisruptionRepricingReplyDataView disruptionRepricingReplyDataView = new DisruptionRepricingReplyDataView();
    airPricingRecordsViewJsonResponseMapper.mapPricesView(reply, disruptionRepricingReplyDataView,
        isAwardFareRequested);
    boundsViewJsonResponseMapper.mapBoundsView(orderReplyView, disruptionRepricingReplyDataView, flightsHelper);
    disruptionRepricingReplyDataView.setWaiverCodes(getWaiverCodes(reply));
    disruptionRepricingReplyView.setData(disruptionRepricingReplyDataView);
  }

  private void mapDictionary(OrderReplyView orderReplyView, DisruptionRepricingReplyView disruptionRepricingReplyView,
      FlightsHelper flightsHelper) {
    airOfferDictionaryViewJsonResponseMapper.mapDictionary(orderReplyView, disruptionRepricingReplyView,
        flightsHelper);
  }

  private static List<String> getWaiverCodes(Ticket_RepricePNRWithBookingClassReply reply) {
    List<FareList> fareList = AirPricingRecordsViewUtil.getFareDetails(reply);
    return CollectionUtils.emptyIfNull(fareList)
        .stream()
        .map(FareList::getOtherPricingInfo)
        .flatMap(Collection::stream)
        .map(CodedAttributeType_202155S::getAttributeDetails)
        .flatMap(Collection::stream)
        .filter(Objects::nonNull)
        .filter(attributeDetails -> StringUtils.equals(END_ATTRIBUTE, attributeDetails.getAttributeType())
            && StringUtils.startsWith(attributeDetails.getAttributeDescription(), WAIVE))
        .map(CodedAttributeInformationType_281044C::getAttributeDescription)
        .filter(Objects::nonNull)
        .map(DisruptionRepricingJsonResponseMapper::getWaiverCode)
        .collect(Collectors.toList());
  }

  /**
   * Waiver code should read from text like "WAIVEQRCOVID1060A - QAR460.00 NONREF"; first 5 letters are WAIVE and
   * airline code with 2 letter after that waiver code till hyphen. To read this waiver code below code will use and
   * after format the waiver code like "COVID1060A"
   * 
   * @param waiverCodeText
   * @return
   */
  private static String getWaiverCode(String waiverCodeText) {
    String splitDetails = StringUtils.split(waiverCodeText, "-")[0];
    if (StringUtils.isNotBlank(splitDetails)) {
      return StringUtils.substring(splitDetails.trim(), INDEX_7);
    }
    return StringUtils.EMPTY;
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\ExchangePriceDetailsViewJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.util.AirPricingRecordsViewUtil;
import com.amadeus.jal.dapi.model.core.AirPricingRecordsView;
import com.amadeus.jal.dapi.model.core.AmountView;
import com.amadeus.jal.dapi.model.core.ExchangeBalanceView;
import com.amadeus.jal.dapi.model.core.ExchangeMilesDetailsView;
import com.amadeus.jal.dapi.model.core.ExchangePriceDetailsView;
import com.amadeus.jal.dapi.model.core.UnitPriceView;

/**
 * Class is responsible to map total exchange price details into air pricing records
 * 
 * @author ysiva
 */
@Named
public class ExchangePriceDetailsViewJsonResponseMapper {

  private static final String MILES_CURRENCY = "MIL";

  /**
   * To map total exchange prices to air pricing records
   * 
   * @param airPricingRecordsView
   *          airPricingRecordsView
   * @param unitPrices
   *          unitPrices
   * @param isAwardFareRequested
   *          isAwardFareRequested
   */
  public void mapTotalExchangePrices(AirPricingRecordsView airPricingRecordsView,
      List<UnitPriceView> unitPrices, boolean isAwardFareRequested) {
    ExchangePriceDetailsView totalExchangePrices = new ExchangePriceDetailsView();
    List<ExchangePriceDetailsView> exchangePrices = getExchangePricesView(unitPrices);
    mapTotalExchangeBalance(totalExchangePrices, exchangePrices);
    mapTotalAdditionalCollectionAmount(totalExchangePrices, exchangePrices);
    mapTotalPenaltyAmount(totalExchangePrices, exchangePrices);
    mapTotalRefundAmount(totalExchangePrices, exchangePrices);
    if (isAwardFareRequested) {
      mapTotalConvertedMiles(totalExchangePrices, exchangePrices);
    }
    airPricingRecordsView.setExchangePrices(totalExchangePrices);
  }

  /**
   * @param unitPrices
   * @return
   */
  private static List<ExchangePriceDetailsView> getExchangePricesView(List<UnitPriceView> unitPrices) {
    return CollectionUtils.emptyIfNull(unitPrices)
        .stream()
        .map(UnitPriceView::getExchangePrices)
        .collect(Collectors.toList());
  }

  /**
   * @param totalExchangePrices
   * @param exchangePrices
   */
  private static void mapTotalExchangeBalance(ExchangePriceDetailsView totalExchangePrices,
      List<ExchangePriceDetailsView> exchangePrices) {
    List<ExchangeBalanceView> exchangeBalances = getExchangeBalanceView(exchangePrices);
    Long totalExchangeBalanceBase = getTotalExchangeBalanceBase(exchangeBalances);
    Long totalExchangeBalanceTotal = getTotalExchangeBalanceTotal(exchangeBalances);
    Long totalExchangeBalanceTaxes = getTotalExchangeBalanceTaxes(exchangeBalances);
    String exchangeBalanceCurrencyCode = getExchangeBalanceCurrencyCode(exchangeBalances);
    ExchangeBalanceView totalExchangeBalance = new ExchangeBalanceView();
    totalExchangeBalance.setBase(totalExchangeBalanceBase);
    totalExchangeBalance.setTotal(totalExchangeBalanceTotal);
    totalExchangeBalance.setTotalTaxes(totalExchangeBalanceTaxes);
    totalExchangeBalance.setCurrencyCode(exchangeBalanceCurrencyCode);
    totalExchangePrices.setBalance(totalExchangeBalance);
  }

  /**
   * @param exchangePrices
   * @return
   */
  private static List<ExchangeBalanceView> getExchangeBalanceView(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .map(ExchangePriceDetailsView::getBalance)
        .collect(Collectors.toList());
  }

  /**
   * @param exchangeBalances
   * @return
   */
  private static Long getTotalExchangeBalanceBase(List<ExchangeBalanceView> exchangeBalances) {
    return CollectionUtils.emptyIfNull(exchangeBalances)
        .stream()
        .map(ExchangeBalanceView::getBase)
        .mapToLong(Long::longValue)
        .sum();
  }

  /**
   * @param exchangeBalances
   * @return
   */
  private static Long getTotalExchangeBalanceTotal(List<ExchangeBalanceView> exchangeBalances) {
    return CollectionUtils.emptyIfNull(exchangeBalances)
        .stream()
        .map(ExchangeBalanceView::getTotal)
        .mapToLong(Long::longValue)
        .sum();
  }

  /**
   * @param exchangeBalances
   * @return
   */
  private static Long getTotalExchangeBalanceTaxes(List<ExchangeBalanceView> exchangeBalances) {
    return CollectionUtils.emptyIfNull(exchangeBalances)
        .stream()
        .map(ExchangeBalanceView::getTotalTaxes)
        .mapToLong(Long::longValue)
        .sum();
  }

  /**
   * @param exchangeBalances
   * @return
   */
  private static String getExchangeBalanceCurrencyCode(List<ExchangeBalanceView> exchangeBalances) {
    return CollectionUtils.emptyIfNull(exchangeBalances)
        .stream()
        .findFirst()
        .map(ExchangeBalanceView::getCurrencyCode)
        .orElse(StringUtils.EMPTY);
  }

  /**
   * @param totalExchangePrices
   * @param exchangePrices
   */
  private static void mapTotalAdditionalCollectionAmount(ExchangePriceDetailsView totalExchangePrices,
      List<ExchangePriceDetailsView> exchangePrices) {
    Long totalAdditionalCollectionAmount = getTotalAdditionalCollectionAmount(exchangePrices);
    String totalAdditionalCollectionCurrencyCode = getTotalAdditionalCollectionCurrencyCode(exchangePrices);
    AmountView totalAdditionalCollection = AirPricingRecordsViewUtil.getAmountDetails(
        totalAdditionalCollectionCurrencyCode,
        totalAdditionalCollectionAmount);
    totalExchangePrices.setAdditionalCollection(totalAdditionalCollection);
  }

  /**
   * @param totalExchangePrices
   * @param exchangePrices
   */
  private static void mapTotalPenaltyAmount(ExchangePriceDetailsView totalExchangePrices,
      List<ExchangePriceDetailsView> exchangePrices) {
    Long totalPenalty = getTotalPenalty(exchangePrices);
    String totalPenaltyCurrencyCode = getTotalPenaltyCurrencyCode(exchangePrices);
    AmountView totalPenaltyAmount = AirPricingRecordsViewUtil.getAmountDetails(totalPenaltyCurrencyCode, totalPenalty);
    totalExchangePrices.setPenalty(totalPenaltyAmount);
  }

  /**
   * @param totalExchangePrices
   * @param exchangePrices
   */
  private static void mapTotalRefundAmount(ExchangePriceDetailsView totalExchangePrices,
      List<ExchangePriceDetailsView> exchangePrices) {
    Long totalRefundAmount = getTotalRefundAmount(exchangePrices);
    String totalRefundCurrencyCode = getTotalRefundCurrencyCode(exchangePrices);
    AmountView totalRefund = AirPricingRecordsViewUtil.getAmountDetails(totalRefundCurrencyCode, totalRefundAmount);
    totalExchangePrices.setRefund(totalRefund);
  }

  private static Long getTotalAdditionalCollectionAmount(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .map(ExchangePriceDetailsView::getAdditionalCollection)
        .map(AmountView::getValue)
        .mapToLong(Long::longValue)
        .sum();
  }

  private static String getTotalAdditionalCollectionCurrencyCode(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .findFirst()
        .map(ExchangePriceDetailsView::getAdditionalCollection)
        .map(AmountView::getCurrencyCode)
        .orElse(StringUtils.EMPTY);
  }

  private static Long getTotalPenalty(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .map(ExchangePriceDetailsView::getPenalty)
        .map(AmountView::getValue)
        .mapToLong(Long::longValue)
        .sum();
  }

  private static String getTotalPenaltyCurrencyCode(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .findFirst()
        .map(ExchangePriceDetailsView::getPenalty)
        .map(AmountView::getCurrencyCode)
        .orElse(StringUtils.EMPTY);
  }

  private static Long getTotalRefundAmount(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .map(ExchangePriceDetailsView::getRefund)
        .map(AmountView::getValue)
        .mapToLong(Long::longValue)
        .sum();
  }

  private static String getTotalRefundCurrencyCode(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .findFirst()
        .map(ExchangePriceDetailsView::getRefund)
        .map(AmountView::getCurrencyCode)
        .orElse(StringUtils.EMPTY);
  }

  private static void mapTotalConvertedMiles(ExchangePriceDetailsView totalExchangePrices,
      List<ExchangePriceDetailsView> exchangePrices) {
    List<ExchangeBalanceView> exchangeBalancesInMiles = getExchangeBalanceViewInMiles(exchangePrices);
    Long totalExchangeBalanceTotalInMiles = getTotalExchangeBalanceTotal(exchangeBalancesInMiles);
    ExchangeBalanceView totalExchangeBalanceinMiles = new ExchangeBalanceView();
    totalExchangeBalanceinMiles.setTotal(totalExchangeBalanceTotalInMiles);
    totalExchangeBalanceinMiles.setCurrencyCode(MILES_CURRENCY);
    AmountView totalPenaltyInMiles = AirPricingRecordsViewUtil.getAmountDetails(
        MILES_CURRENCY, getTotalPenaltyInMiles(exchangePrices));
    ExchangeMilesDetailsView milesDetails = new ExchangeMilesDetailsView();
    milesDetails.penalty(totalPenaltyInMiles);
    milesDetails.balance(totalExchangeBalanceinMiles);
    totalExchangePrices.setConvertedMiles(milesDetails);
  }

  private static List<ExchangeBalanceView>
      getExchangeBalanceViewInMiles(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .map(ExchangePriceDetailsView::getConvertedMiles)
        .map(ExchangeMilesDetailsView::getBalance)
        .collect(Collectors.toList());
  }

  private static Long getTotalPenaltyInMiles(List<ExchangePriceDetailsView> exchangePrices) {
    return CollectionUtils.emptyIfNull(exchangePrices)
        .stream()
        .map(ExchangePriceDetailsView::getConvertedMiles)
        .map(ExchangeMilesDetailsView::getPenalty)
        .map(AmountView::getValue)
        .mapToLong(Long::longValue)
        .sum();
  }

}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\TicketRepricePNRWithBookingClassQueryBuilder.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.inject.Named;
import javax.validation.Valid;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;

import com.amadeus.dapi.jalext.common.util.DateTimeUtils;
import com.amadeus.dapi.jalext.common.util.RefTimeZoneUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.util.DisruptionRepricingUtil;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml.pnracc_19_1_1a.ElementManagementSegmentType;
import com.amadeus.xml.pnracc_19_1_1a.LocationTypeI_2784C;
import com.amadeus.xml.pnracc_19_1_1a.LongFreeTextType;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.DataElementsMaster;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.DataElementsMaster.DataElementsIndiv;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.OriginDestinationDetails;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.OriginDestinationDetails.ItineraryInfo;
import com.amadeus.xml.pnracc_19_1_1a.ProductDateTimeTypeI_270055C;
import com.amadeus.xml.pnracc_19_1_1a.ReferencingDetailsType_111975C;
import com.amadeus.xml.pnracc_19_1_1a.ReferencingDetailsType_127526C;
import com.amadeus.xml.pnracc_19_1_1a.TravelProductInformationTypeI_193100S;
import com.amadeus.xml.taripq_19_1_1a.AttributeInformationTypeU;
import com.amadeus.xml.taripq_19_1_1a.AttributeType;
import com.amadeus.xml.taripq_19_1_1a.CompanyIdentificationTypeI;
import com.amadeus.xml.taripq_19_1_1a.ItemNumberIdentificationType;
import com.amadeus.xml.taripq_19_1_1a.ItemNumberType;
import com.amadeus.xml.taripq_19_1_1a.PricingOptionKeyType;
import com.amadeus.xml.taripq_19_1_1a.ReferenceInfoType;
import com.amadeus.xml.taripq_19_1_1a.ReferencingDetailsType;
import com.amadeus.xml.taripq_19_1_1a.TicketNumberDetailsTypeI;
import com.amadeus.xml.taripq_19_1_1a.TicketNumberTypeI;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass.ExchangeInformationGroup;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass.ExchangeInformationGroup.DocumentInfoGroup;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass.PricingOption;
import com.amadeus.xml.taripq_19_1_1a.TransportIdentifierType;

/**
 * Class is responsible to construct Ticket_RepricePNRWithBookingClass (TARIPQ) request
 * 
 * @author ysiva
 */
@Named
public class TicketRepricePNRWithBookingClassQueryBuilder {

  private static final String TICKET_TYPE = "ET";

  private static final String TICKET_ELEMENT_TYPE = "FA";

  private static final String FHE_TICKET_TYPE = "FHE";

  private static final String TICKET_ELEMENT_KEY_QUALIFIER = "E";

  private static final String SELECT_KEY = "SEL";

  private static final String DASH = "-";

  private static final String PUBLISHED_FARE_TYPE = "RP";

  private static final String UNIFARES_TYPE = "RU";

  private static final String AWARD_PRICING_OPTION = "AWD";

  private static final String CORPORATE_UNIFARE = "RW";

  private static final String NOT_OPERATED_STATUS = "UN";

  private static final List<String> FLOWN_SEGMENTS = Stream.of("HK", "B").collect(Collectors.toList());

  private static final int INDEX_1 = 1;

  private static final Pattern HYPEN_REGEX = Pattern.compile("\\-");
  
  private static final Pattern NO_SPACE = Pattern.compile("");

  private static final String INF = "INF";

  private static final String TRAVELER_ID_PREFIX = "PT";

  private static final String INFANT_ID_PREFIX = "PI";

  private static final String TICKET_REGEX = "/|' '";

  private static final int INDEX_2 = 2;

  private static final int TICKET_NUMBER_LENGTH = 13;

  /**
   * Method to build TARIPQ verb request from order reply details
   * 
   * @param orderReply
   *          orderReply
   * @param flightsHelper
   *          flightsHelper
   * @param pnrReply
   *          pnrReply
   * @param dataRepositoryHelper
   *          dataRepositoryHelper
   * @param awardFareHelper
   *          awardFareHelper
   * @return request
   */
  public Ticket_RepricePNRWithBookingClass buildRequest(@Valid OrderReply orderReply, FlightsHelper flightsHelper,
      PNR_Reply pnrReply, DataRepositoryHelper dataRepositoryHelper, AwardFareHelper awardFareHelper) {
    Set<String> segmentIds = getSegmentIds(pnrReply, dataRepositoryHelper, flightsHelper);
    flightsHelper.addFlightIds(segmentIds);
    Set<String> flownSegmentIds = getFlownSegmentIds(pnrReply, dataRepositoryHelper);

    List<TravelDocument> travelDocuments = getTravelDocuments(orderReply);
    flightsHelper.addTravelDocuments(travelDocuments);

    List<ExchangeInformationGroup> exchangeInformationGroupList = new ArrayList<>();
    List<PricingOption> pricingOptionList = new ArrayList<>();

    Map<String, String> ticketNumberToTravelerId = getTicketNumberToTravelerIds(pnrReply, flownSegmentIds, flightsHelper);
    flightsHelper.addTicketNumberToTravelerId(ticketNumberToTravelerId);
    AtomicInteger itemNumberDetailCounter = new AtomicInteger(1);
    MapUtils.emptyIfNull(ticketNumberToTravelerId)
        .forEach((String documentId, String travelerId) -> {
          if (isExchangeDocumentValid(documentId, travelerId)) {
            exchangeInformationGroupList.add(buildExchangeInformationGroup(documentId, itemNumberDetailCounter.get()));
            pricingOptionList.add(buildPricingOptionPaxSelection(Collections.singletonList(travelerId),
                itemNumberDetailCounter.get()));
            itemNumberDetailCounter.getAndIncrement();
          }
        });

    // Build SEL PricingOption with segment reference
    if (CollectionUtils.isNotEmpty(segmentIds)) {
      pricingOptionList
          .add(buildPricingOptionSegmentSelection(segmentIds
                  .stream()
                  .collect(Collectors.toList()), null));
    }

    if (awardFareHelper.isAwardFareRequested()) {
      pricingOptionList.add(buildPricingOptionsForAward(awardFareHelper));
      pricingOptionList.add(buildPricingOptionsForCorporateUnifare(awardFareHelper));
    } else {
      pricingOptionList.addAll(buildPrivatePublicFareOptions());
    }

    Ticket_RepricePNRWithBookingClass request = new Ticket_RepricePNRWithBookingClass();
    request.withExchangeInformationGroup(exchangeInformationGroupList);
    request.withPricingOption(pricingOptionList);
    return request;
  }
  
  /**
   * @param pnrReply
   * @param flownSegmentIds
   * @return
   */
  private static Map<String, String> getTicketNumberToTravelerIds(
          PNR_Reply pnrReply, Set<String> flownSegmentIds,
          FlightsHelper flightsHelper) {
    List<DataElementsIndiv> faDataElements = getFADataElementsIndiv(pnrReply);
    List<DataElementsIndiv> ticketDetailsFromFALines = getTicketDetailsFromFALines(faDataElements);
    Map<String, String> ticketNumberToTravelerId = getTicketNumberToTravelerIds(ticketDetailsFromFALines,
        flownSegmentIds, flightsHelper);
    if (MapUtils.isEmpty(ticketNumberToTravelerId)) {
      List<DataElementsIndiv> fheDataElementsIndiv = getFHEDataElementsIndiv(faDataElements);
      ticketNumberToTravelerId = getTicketNumberToTravelerIds(fheDataElementsIndiv, flownSegmentIds, flightsHelper);
    }
    if (MapUtils.isEmpty(ticketNumberToTravelerId)) {
      ticketNumberToTravelerId = getTicketNumberToTravelerIds(ticketDetailsFromFALines, new HashSet<>(), flightsHelper);
    }
    return ticketNumberToTravelerId;
  }

  /**
   * @param dataElements
   * @return
   */
  private static List<DataElementsIndiv> getFHEDataElementsIndiv(List<DataElementsIndiv> dataElements) {
    return CollectionUtils.emptyIfNull(dataElements)
        .stream()
        .filter(dataElement -> StringUtils.equalsIgnoreCase(FHE_TICKET_TYPE,
            dataElement.getElementManagementData().getSegmentName()))
        .collect(Collectors.toList());
  }

  /**
   * @param dataElements
   * @return
   */
  private static List<DataElementsIndiv> getTicketDetailsFromFALines(List<DataElementsIndiv> dataElements) {
    return CollectionUtils.emptyIfNull(dataElements)
        .stream()
        .filter(dataElement -> StringUtils.equalsIgnoreCase(TICKET_ELEMENT_TYPE,
            dataElement.getElementManagementData().getSegmentName()))
        .collect(Collectors.toList());
  }

  /**
   * @param pnrReply
   * @return
   */
  private static List<DataElementsIndiv> getFADataElementsIndiv(PNR_Reply pnrReply) {
    return Optional.ofNullable(pnrReply)
        .map(PNR_Reply::getDataElementsMaster)
        .map(DataElementsMaster::getDataElementsIndiv)
        .orElse(Collections.<DataElementsIndiv> emptyList());
  }

  /**
   * @param dataElements
   * @param flownSegmentIds
   * @return
   */
  private static Map<String, String> getTicketNumberToTravelerIds(List<DataElementsIndiv> dataElements,
      Set<String> flownSegmentIds, FlightsHelper flightsHelper) {
    Map<String, String> ticketNumberToTravelerIds = new LinkedHashMap<>();
    dataElements.forEach((DataElementsIndiv dataElement) -> {
      Set<String> segmentRefrenceIds = getSegmentReferenceIds(dataElement);
      if (!(CollectionUtils.isNotEmpty(flownSegmentIds)
          && isFlownSegmentsPresent(flownSegmentIds, segmentRefrenceIds))) {

        String longFreeTextFromDataElement = getLongFreeTextFromFADataElement(dataElement);
        if (StringUtils.isEmpty(longFreeTextFromDataElement)) {
          longFreeTextFromDataElement = getLongFreeTextFromFHEDataElement(dataElement);
        }

        String ticketNumber = getTicketNumberFromFreeText(longFreeTextFromDataElement);
        if (flightsHelper.getTravelDocuments()
                .stream()
                .anyMatch(document -> document.getId().equals(ticketNumber)
                        && !document.getDocumentType().equals(TravelDocument.DocumentTypeEnum.SERVICES))) {
          String reference = getReferenceNumberFromDataElement(dataElement);
          if (longFreeTextFromDataElement.contains(INF)) {
            ticketNumberToTravelerIds.put(ticketNumber, INFANT_ID_PREFIX + reference);
          } else {
            ticketNumberToTravelerIds.put(ticketNumber, TRAVELER_ID_PREFIX + reference);
          }
        }
      }
    });
    return ticketNumberToTravelerIds;
  }

  private static boolean isFlownSegmentsPresent(Set<String> flownSegmentIds, Set<String> segmentRefrenceIds) {
    return CollectionUtils.emptyIfNull(segmentRefrenceIds).stream().anyMatch(
        referenceId -> flownSegmentIds.contains(referenceId));
  }
  
  private static Set<String> getSegmentReferenceIds(DataElementsIndiv dataElementsIndiv) {
    List<ReferencingDetailsType_111975C> referenceDetails = Optional.ofNullable(dataElementsIndiv)
        .map(DataElementsIndiv::getReferenceForDataElement)
        .map(com.amadeus.xml.pnracc_19_1_1a.ReferenceInfoType::getReference)
        .orElse(Collections.emptyList());
    return CollectionUtils.emptyIfNull(referenceDetails)
        .stream()
        .filter(referenceDetail -> StringUtils.equals("ST", referenceDetail.getQualifier()))
        .map(TicketRepricePNRWithBookingClassQueryBuilder::getSegmentRefId)
        .collect(Collectors.toSet());
  }
  
  private static String getSegmentRefId(ReferencingDetailsType_111975C reference) {
    return reference.getQualifier() + reference.getNumber();
  }

  /**
   * @param dataElement
   * @return
   */
  private static String getLongFreeTextFromFADataElement(DataElementsIndiv dataElement) {
    return dataElement.getOtherDataFreetext()
        .stream()
        .map(LongFreeTextType::getLongFreetext)
        .filter(longFreeText -> StringUtils.contains(longFreeText, TICKET_TYPE))
        .collect(Collectors.joining(","));
  }

  /**
   * @param dataElement
   * @return
   */
  private static String getLongFreeTextFromFHEDataElement(DataElementsIndiv dataElement) {
    return dataElement.getOtherDataFreetext()
        .stream()
        .map(LongFreeTextType::getLongFreetext)
        .collect(Collectors.joining(","));
  }

  /**
   * @param dataElement
   * @return
   */
  private static String getReferenceNumberFromDataElement(DataElementsIndiv dataElement) {
    return dataElement.getReferenceForDataElement()
        .getReference()
        .stream()
        .filter(
            referencingDetailsType -> StringUtils.equals(TRAVELER_ID_PREFIX, referencingDetailsType.getQualifier()))
        .map(TicketRepricePNRWithBookingClassQueryBuilder::getReferenceNumber)
        .collect(Collectors.joining(","));
  }

  /**
   * @param referencingDetailsType
   * @return
   */
  private static String getReferenceNumber(ReferencingDetailsType_111975C referencingDetailsType) {
    if (referencingDetailsType == null) {
      return StringUtils.EMPTY;
    }
    return referencingDetailsType.getNumber();
  }

  /**
   * @param longFreeText
   * @return
   */
  private static String getTicketNumberFromFreeText(String longFreeText) {
    List<String> parsedTicketDetails = Arrays.asList(StringUtils.split(longFreeText, TICKET_REGEX));
    if (CollectionUtils.size(parsedTicketDetails) >= INDEX_2) {
      return getTicketNumber(parsedTicketDetails);
    }
    return StringUtils.EMPTY;
  }

  /**
   * Method to get ticket number from parsed text. The reason to check ticket number length here, ideally ticket number
   * length is 13 after trim the hyphen i.e.(081-2303448873). But in multiple reissuance case as per the carrier there
   * is limit for rebooking & issuance, in this case ticket number length is 15 after trim hyphen
   * i.e.(081-2303448873-74). As per verb need to send 13 digit number only to get proper response from verb backend.
   *
   * @param parsedTicketDetails
   * @return
   */
  private static String getTicketNumber(List<String> parsedTicketDetails) {
    String parsedTicketNumber = parsedTicketDetails.get(INDEX_1)
        .replaceAll(HYPEN_REGEX.toString(), NO_SPACE.toString());
    if (StringUtils.length(parsedTicketNumber) > TICKET_NUMBER_LENGTH) {
      return StringUtils.substring(parsedTicketNumber, 0, TICKET_NUMBER_LENGTH);
    }
    return parsedTicketNumber;
  }  

  /**
   * @param orderReply
   * @return
   */
  private static List<TravelDocument> getTravelDocuments(OrderReply orderReply) {
    return Optional.ofNullable(orderReply)
        .map(OrderReply::getData)
        .map(Order::getTravelDocuments)
        .orElse(Collections.emptyList());
  }

  /**
   * @param documentId
   * @param travelerId
   * @return
   */
  private static boolean isExchangeDocumentValid(String documentId, String travelerId) {
    return StringUtils.isNotBlank(documentId)
        && StringUtils.isNotBlank(travelerId);
  }

  /**
   * @param documentNumber
   * @param itemNumberDetailCounter
   * @return
   */
  private static ExchangeInformationGroup buildExchangeInformationGroup(String documentNumber,
      Integer itemNumberDetailCounter) {
    ExchangeInformationGroup exchangeInformationGroup = new ExchangeInformationGroup();
    // build the TransactionIdentifier
    ItemNumberIdentificationType itemNumberIdentificationType = new ItemNumberIdentificationType();
    itemNumberIdentificationType.setNumber(Integer.toString(itemNumberDetailCounter));
    ItemNumberType itemNumberType = new ItemNumberType();
    itemNumberType.withItemNumberDetails(itemNumberIdentificationType);
    exchangeInformationGroup.withTransactionIdentifier(itemNumberType);
    // Build the DocumentInfoGroup with ET and ticketNumber
    DocumentInfoGroup documentInfoGroup = new DocumentInfoGroup();
    TicketNumberTypeI ticketNumberType = new TicketNumberTypeI();
    TicketNumberDetailsTypeI ticketNumberDetails = new TicketNumberDetailsTypeI();
    ticketNumberDetails.withNumber(StringUtils.replace(documentNumber, DASH, StringUtils.EMPTY));
    ticketNumberDetails.withType(TICKET_TYPE);
    ticketNumberType.withDocumentDetails(ticketNumberDetails);
    documentInfoGroup.withPaperticketDetailsLastCoupon(ticketNumberType);
    exchangeInformationGroup.withDocumentInfoGroup(documentInfoGroup);
    return exchangeInformationGroup;
  }

  /**
   * @param travelerIds
   * @param itemNumberDetailCounter
   * @return
   */
  private static PricingOption buildPricingOptionPaxSelection(List<String> travelerIds,
      Integer itemNumberDetailCounter) {
    PricingOption pricingOption = buildPricingOption(SELECT_KEY);
    // Build ReferenceDetails
    List<ReferencingDetailsType> referencingDetailsTypeList = new ArrayList<>();
    referencingDetailsTypeList
        .addAll(buildPaxReferencingDetailsType(travelerIds, itemNumberDetailCounter));
    pricingOption.withPaxSegTstReference(new ReferenceInfoType().withReferenceDetails(referencingDetailsTypeList));
    return pricingOption;
  }

  /**
   * @param segmentIds
   * @param itemNumberDetailCounter
   * @return
   */
  private static PricingOption buildPricingOptionSegmentSelection(List<String> segmentIds,
      Integer itemNumberDetailCounter) {
    PricingOption pricingOption = buildPricingOption(SELECT_KEY);
    // Build ReferenceDetails
    List<ReferencingDetailsType> referencingDetailsTypeList = new ArrayList<>();
    referencingDetailsTypeList
        .addAll(buildSegmentReferencingDetailsType(segmentIds, itemNumberDetailCounter));
    pricingOption.withPaxSegTstReference(new ReferenceInfoType().withReferenceDetails(referencingDetailsTypeList));
    return pricingOption;
  }

  /**
   * @param pricingOptionKey
   * @return
   */
  private static PricingOption buildPricingOption(String pricingOptionKey) {
    PricingOption pricingOption = new PricingOption();
    PricingOptionKeyType pricingOptionKeyType = new PricingOptionKeyType();
    pricingOptionKeyType.setPricingOptionKey(pricingOptionKey);
    pricingOption.setPricingOptionKey(pricingOptionKeyType);
    return pricingOption;
  }

  /**
   * @param travelerIds
   * @param itemNumberDetailCounter
   * @return
   */
  private static List<ReferencingDetailsType> buildPaxReferencingDetailsType(List<String> travelerIds,
      Integer itemNumberDetailCounter) {
    List<ReferencingDetailsType> referencingDetailsTypeList = new ArrayList<>();
    referencingDetailsTypeList.addAll(CollectionUtils.emptyIfNull(travelerIds)
        .stream()
        .map(DisruptionRepricingUtil::buildPaxReference)
        .collect(Collectors.toList()));
    // The itemNumberDetails is needed only to build SEL PricingOption and to associate Passenger with Ticket
    if (itemNumberDetailCounter != null) {
      referencingDetailsTypeList.add(new ReferencingDetailsType().withType(TICKET_ELEMENT_KEY_QUALIFIER)
          .withValue(Integer.toString(itemNumberDetailCounter)));
    }
    return referencingDetailsTypeList;
  }

  /**
   * @param segmentIds
   * @param itemNumberDetailCounter
   * @return
   */
  private static List<ReferencingDetailsType> buildSegmentReferencingDetailsType(List<String> segmentIds,
      Integer itemNumberDetailCounter) {
    List<ReferencingDetailsType> referencingDetailsTypeList = new ArrayList<>();
    referencingDetailsTypeList.addAll(CollectionUtils.emptyIfNull(segmentIds)
        .stream()
        .map(DisruptionRepricingUtil::buildSegmentReference)
        .collect(Collectors.toList()));
    // The itemNumberDetails is needed only to build SEL PricingOption and to associate Passenger with Ticket
    if (itemNumberDetailCounter != null) {
      referencingDetailsTypeList.add(new ReferencingDetailsType().withType(TICKET_ELEMENT_KEY_QUALIFIER)
          .withValue(Integer.toString(itemNumberDetailCounter)));
    }
    return referencingDetailsTypeList;
  }

  /**
   * Method to build list of pricing options with private & public type fare
   *
   * @return
   */
  private static List<PricingOption> buildPrivatePublicFareOptions() {
    return Stream.of(buildPricingOption(PUBLISHED_FARE_TYPE), buildPricingOption(UNIFARES_TYPE))
        .collect(Collectors.toList());
  }

  /**
   * Build award pricing option (AWD) with publishing carrier
   *
   * @return
   */
  private static PricingOption buildPricingOptionsForAward(AwardFareHelper awardFareHelper) {
    PricingOption pricingOption = buildPricingOption(AWARD_PRICING_OPTION);
    // Publishing Carrier
    TransportIdentifierType carrierInformation = new TransportIdentifierType();
    CompanyIdentificationTypeI companyIdentification = new CompanyIdentificationTypeI();
    companyIdentification.setOtherCompany(awardFareHelper.getFrequentFlyerCompanyCode());
    carrierInformation.setCompanyIdentification(companyIdentification);
    pricingOption.withCarrierInformation(carrierInformation);
    return pricingOption;
  }

  /**
   * Build corporate option (RW) with up to 6 corporate codes
   *
   * @return
   */
  private static PricingOption buildPricingOptionsForCorporateUnifare(AwardFareHelper awardFareHelper) {
    PricingOption pricingOption = buildPricingOption(CORPORATE_UNIFARE);
    AttributeType optionDetail = new AttributeType()
        .withCriteriaDetails(buildAtrributeTypes(awardFareHelper.getCorporateCodes()));
    pricingOption.withOptionDetail(optionDetail);
    return pricingOption;
  }

  private static List<AttributeInformationTypeU> buildAtrributeTypes(List<String> corporateCodes) {
    List<AttributeInformationTypeU> attributes = new ArrayList<>();
    corporateCodes
        .forEach(corporateCode -> attributes.add(new AttributeInformationTypeU().withAttributeType(corporateCode)));
    return attributes;
  }

  private static Set<String> getSegmentIds(PNR_Reply pnrReply, DataRepositoryHelper dataRepositoryHelper, 
  FlightsHelper flightsHelper) {
    if (pnrReply == null) {
      return Collections.emptySet();
    }
    return CollectionUtils.emptyIfNull(pnrReply.getOriginDestinationDetails())
        .stream()
        .map(OriginDestinationDetails::getItineraryInfo)
        .flatMap(Collection::stream)
        .filter(DisruptionRepricingUtil::isRealAirSegment)
        .filter(itineraryInfo -> !(itineraryInfo.getRelatedProduct().getStatus().containsAll(FLOWN_SEGMENTS)
            || itineraryInfo.getRelatedProduct().getStatus().contains(NOT_OPERATED_STATUS)
            || isFlownSegment(itineraryInfo, dataRepositoryHelper)))
        .map(ItineraryInfo::getElementManagementItinerary)
        .map(ElementManagementSegmentType::getReference)
        .filter(Objects::nonNull)
        .map(TicketRepricePNRWithBookingClassQueryBuilder::getSegmentId)
        .filter(segmentId -> !DisruptionRepricingUtil.shouldRemoveSegment(segmentId, flightsHelper))
        .collect(Collectors.toCollection(LinkedHashSet::new));
  }
  
  private static Set<String> getFlownSegmentIds(PNR_Reply pnrReply, DataRepositoryHelper dataRepositoryHelper) {
    if (pnrReply == null) {
      return Collections.emptySet();
    }
    return CollectionUtils.emptyIfNull(pnrReply.getOriginDestinationDetails())
        .stream()
        .map(OriginDestinationDetails::getItineraryInfo)
        .flatMap(Collection::stream)
        .filter(DisruptionRepricingUtil::isRealAirSegment)
        .filter(itineraryInfo -> isFlownSegment(itineraryInfo, dataRepositoryHelper))
        .map(ItineraryInfo::getElementManagementItinerary)
        .map(ElementManagementSegmentType::getReference)
        .filter(Objects::nonNull)
        .map(TicketRepricePNRWithBookingClassQueryBuilder::getSegmentId)
        .collect(Collectors.toCollection(LinkedHashSet::new));
  }

  private static final String getSegmentId(ReferencingDetailsType_127526C reference) {
    return reference.getQualifier() + reference.getNumber();
  }

  private static boolean isFlownSegment(ItineraryInfo itineraryInfo, DataRepositoryHelper dataRepositoryHelper) {
    TravelProductInformationTypeI_193100S travelerProduct = itineraryInfo.getTravelProduct();
    ProductDateTimeTypeI_270055C product = travelerProduct.getProduct();
    String departureDate = product.getDepDate();
    String departureTime = product.getDepTime();
    LocationTypeI_2784C boardPointDetails = travelerProduct.getBoardpointDetail();
    String departureLocationCode = boardPointDetails.getCityCode();
    DateTime departureDateTime = DateTimeUtils.buildDateTime(departureDate, departureTime);
    DateTime localDepartureDateTime = DateTimeUtils.buildDateWithTimeZone(
        dataRepositoryHelper.getTimeZoneRecord(departureLocationCode), departureDateTime.toLocalDateTime());
    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
    Date time = cal.getTime();
    DateTime localGMTDate = getGMTDateInLocalTime(time, departureLocationCode, dataRepositoryHelper);
    return localGMTDate.isAfter(localDepartureDateTime);
  }

  public static DateTime getGMTDateInLocalTime(Date gmtTime, String officeCity,
      DataRepositoryHelper dataRepositoryHelper) {
    DateTime gmtDateTime = new DateTime(gmtTime, DateTimeZone.UTC);
    LocalDateTime localTime = gmtDateTime
        .withZone(RefTimeZoneUtils.getTimeZone(dataRepositoryHelper.getTimeZoneRecord(officeCity),
            gmtDateTime.toLocalDateTime()))
        .toLocalDateTime();
    return DateTimeUtils.buildDateWithTimeZone(
        dataRepositoryHelper.getTimeZoneRecord(officeCity), localTime);
  }

}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\TotalPricesViewJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.jal.dapi.model.core.AirPricingRecordsView;
import com.amadeus.jal.dapi.model.core.PriceView;
import com.amadeus.jal.dapi.model.core.UnitPriceView;

/**
 * Class is responsible to map total price details into air pricing records
 * 
 * @author ysiva
 */
@Named
public class TotalPricesViewJsonResponseMapper {

  /**
   * To map total prices to air pricing records in json response
   * 
   * @param airPricingRecordsView
   *          airPricingRecordsView
   * @param unitPrices
   *          unitPrices
   */
  public void mapTotalPrices(AirPricingRecordsView airPricingRecordsView, List<UnitPriceView> unitPrices) {
    List<PriceView> pricesView = getPricesView(unitPrices);
    Long totalBase = getTotalBase(pricesView);
    Long finalTotal = getFinalTotal(pricesView);
    Long totalTaxes = getTotalTaxes(pricesView);
    String currencyCode = getTotalCurencyCode(pricesView);
    List<PriceView> totalPrices = new ArrayList<>();
    PriceView totalPriceView = new PriceView();
    totalPriceView.setBase(totalBase);
    totalPriceView.setTotal(finalTotal);
    totalPriceView.setTotalTaxes(totalTaxes);
    totalPriceView.setCurrencyCode(currencyCode);
    totalPrices.add(totalPriceView);
    airPricingRecordsView.setTotalPrices(totalPrices);
  }

  /**
   * @param unitPrices
   * @return
   */
  private static List<PriceView> getPricesView(List<UnitPriceView> unitPrices) {
    return CollectionUtils.emptyIfNull(unitPrices)
        .stream()
        .map(UnitPriceView::getPrices)
        .flatMap(Collection::stream)
        .collect(Collectors.toList());
  }

  /**
   * @param pricesView
   * @return
   */
  private static String getTotalCurencyCode(List<PriceView> pricesView) {
    return CollectionUtils.emptyIfNull(pricesView)
        .stream()
        .findFirst()
        .map(PriceView::getCurrencyCode)
        .orElse(StringUtils.EMPTY);
  }

  /**
   * @param pricesView
   * @return
   */
  private static Long getTotalTaxes(List<PriceView> pricesView) {
    return CollectionUtils.emptyIfNull(pricesView)
        .stream()
        .map(PriceView::getTotalTaxes)
        .filter(Objects::nonNull)
        .mapToLong(Long::longValue)
        .sum();
  }

  /**
   * @param pricesView
   * @return
   */
  private static Long getFinalTotal(List<PriceView> pricesView) {
    return CollectionUtils.emptyIfNull(pricesView)
        .stream()
        .map(PriceView::getTotal)
        .filter(Objects::nonNull)
        .mapToLong(Long::longValue)
        .sum();
  }

  /**
   * @param pricesView
   * @return
   */
  private static Long getTotalBase(List<PriceView> pricesView) {
    return CollectionUtils.emptyIfNull(pricesView)
        .stream()
        .map(PriceView::getBase)
        .filter(Objects::nonNull)
        .mapToLong(Long::longValue)
        .sum();
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\UnitPriceViewJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.ToLongFunction;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.inject.Named;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.util.AirPricingRecordsViewUtil;
import com.amadeus.jal.dapi.model.core.AirPricingRecordsView;
import com.amadeus.jal.dapi.model.core.AmountView;
import com.amadeus.jal.dapi.model.core.ExchangeBalanceView;
import com.amadeus.jal.dapi.model.core.ExchangeMilesDetailsView;
import com.amadeus.jal.dapi.model.core.ExchangePriceDetailsView;
import com.amadeus.jal.dapi.model.core.PriceView;
import com.amadeus.jal.dapi.model.core.UnitPriceView;
import com.amadeus.xml.taripr_19_1_1a.DiscountPenaltyMonetaryInformationTypeI_231067C;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationDetailsTypeI_231065C;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationDetailsTypeI_231071C;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationDetailsType_230889C;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationTypeI_163010S;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationType_163015S;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationType_163016S;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationType_198367S;
import com.amadeus.xml.taripr_19_1_1a.ReferencingDetailsTypeI;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.AutomaticReissueInfo;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.AutomaticReissueInfo.FirstDpiGroup;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.AutomaticReissueInfo.ThirdGroup;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.SegmentInformation;

/**
 * Class is responsible to map unit price details per traveler
 * 
 * @author ysiva
 */
@Named
public class UnitPriceViewJsonResponseMapper {

  private static final String MILES_CURRENCY = "MIL";

  // Monetary amount type qualifier for Balance in miles
  private static final String MILES_BALANCE = "BNE";

  // Monetary amount type qualifier for Penalty in miles
  private static final String MILES_PENALTY = "MIL";

  private static final String REPRICED_TOTAL_AMOUNT_TYPE = "RTO";

  private static final String REPRICED_TOTAL_TAXES_TYPE = "RTA";

  private static final String ADDITIONAL_COLLECTION_AMOUNT_TYPE = "TSC";

  private static final String EXCHANGE_BASE_AMOUNT_TYPE = "BEQ";

  private static final String EXCHANGE_TOTAL_AMOUNT_TYPE = "BTO";

  private static final String EXCHANGE_TOTAL_TAXES_AMOUNT_TYPE = "BTA";

  private static final String RESIDUAL_AMOUNT_TYPE = "RES";

  private static final String BASE_FARE_AMOUNT_TYPE = "IBA";
  
  private static final String REISSUE_EQUIVALENT_AMOUNT = "REQ";

  private static final String IN = "IN";

  private static final String PI = "PI";

  private static final String PT = "PT";

  /**
   * Method to map unit prices into json response
   * 
   * @param reply
   *          reply
   * @param airPricingRecordsView
   *          airPricingRecordsView
   * @param unitPrices
   *          unitPrices
   * @param isAwardFareRequested
   *          isAwardFareRequested
   */
  public void mapUnitPrices(Ticket_RepricePNRWithBookingClassReply reply,
      AirPricingRecordsView airPricingRecordsView, List<UnitPriceView> unitPrices, boolean isAwardFareRequested) {
    List<FareList> fareList = AirPricingRecordsViewUtil.getFareDetails(reply);
    fareList.forEach((FareList fare) -> {
      UnitPriceView unitPriceView = new UnitPriceView();
      mapTravelerIds(fare, unitPriceView);
      mapSegmentIds(fare, unitPriceView);
      mapUnitPrices(fare, unitPriceView);
      mapUnitExchangePrices(fare, unitPriceView, isAwardFareRequested);
      unitPrices.add(unitPriceView);
    });
    airPricingRecordsView.setUnitPrices(unitPrices);
  }

  /**
   * @param fare
   * @param unitPriceView
   */
  private static void mapTravelerIds(FareList fare, UnitPriceView unitPriceView) {
    ReferencingDetailsTypeI paxDetails = AirPricingRecordsViewUtil.getPaxReferenceDetails(fare);
    String refNumber = String.valueOf(paxDetails.getRefNumber());
    List<SegmentInformation> segmentsInformation = AirPricingRecordsViewUtil.getSegmentInformation(fare);
    String ptcCode = AirPricingRecordsViewUtil.getPTCCodes(segmentsInformation);
    String travalerId;
    if (StringUtils.startsWithIgnoreCase(ptcCode, IN)) {
      travalerId = PI + refNumber;
    } else {
      travalerId = PT + refNumber;
    }
    unitPriceView.setTravelerIds(Stream.of(travalerId).collect(Collectors.toList()));
  }

  /**
   * @param fare
   * @param unitPriceView
   */
  private static void mapSegmentIds(FareList fare, UnitPriceView unitPriceView) {
    List<SegmentInformation> segmentsInformation = AirPricingRecordsViewUtil.getSegmentInformation(fare);
    Set<String> segmentIds = AirPricingRecordsViewUtil.getSegmentIds(segmentsInformation);
    unitPriceView.setFlightIds(segmentIds.stream().collect(Collectors.toCollection(ArrayList::new)));
  }

  /**
   * @param fare
   * @param unitPriceView
   */
  private static void mapUnitPrices(FareList fare, UnitPriceView unitPriceView) {
    FirstDpiGroup firstDpiGroup = AirPricingRecordsViewUtil.getFirstDpiGroup(fare);
    List<MonetaryInformationDetailsType_230889C> otherMonetrayDetails = getReissueInfoOtherMonetaryDetails(
        firstDpiGroup);
    String currencyCode = getPricesCurrencyCode(otherMonetrayDetails);
    PriceView priceView = new PriceView();
    priceView.setBase(getBaseFareValue(otherMonetrayDetails, fare));
    priceView.setTotal(getRepricedTotalAmount(otherMonetrayDetails));
    priceView.setTotalTaxes(getRepricedTotalTaxes(otherMonetrayDetails));
    priceView.setCurrencyCode(currencyCode);
    List<PriceView> prices = new ArrayList<>();
    prices.add(priceView);
    unitPriceView.setPrices(prices);
  }
  
  /***
   * If REQ value is missing for some OID take IBA
   * 
   * @param otherMonetrayDetails
   * @param fare
   * @return
   */
  private static Long getBaseFareValue(List<MonetaryInformationDetailsType_230889C> otherMonetrayDetails,
      FareList fare) {
    Long baseValue = getReissuedBaseFare(otherMonetrayDetails);
    if (baseValue == null) {
      baseValue = getBaseFareAmount(fare);
    }
    return baseValue;
  }

  /***
   * Taken from REQ implemented after PTR 24440760. If REQ is missing for any OID
   * implement CR17911699_SEND_REQ_AMOUNT as per WO 24603142
   * @param otherMonetaryDetails
   * @return
   */
  private static Long getReissuedBaseFare(List<MonetaryInformationDetailsType_230889C> otherMonetaryDetails) {
    BigDecimal baseFare = CollectionUtils.emptyIfNull(otherMonetaryDetails)
        .stream()
        .filter(otherMonetaryDetail -> StringUtils.equals(REISSUE_EQUIVALENT_AMOUNT,
            otherMonetaryDetail.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .findFirst()
        .orElse(null);

    if (baseFare != null) {
      return baseFare.scaleByPowerOfTen(baseFare.scale())
          .longValue();
    }
    return null;
  }

  /**
   * @param fare
   * @return
   */
  private static Long getBaseFareAmount(FareList fare) {
    return Optional.ofNullable(fare)
        .map(FareList::getAutomaticReissueInfo)
        .map(AutomaticReissueInfo::getBaseFareInfo)
        .map(MonetaryInformationTypeI_163010S::getMonetaryDetails)
        .filter(monetaryDetails -> StringUtils.equals(BASE_FARE_AMOUNT_TYPE, monetaryDetails.getTypeQualifier()))
        .map(MonetaryInformationDetailsTypeI_231065C::getAmount)
        .filter(Objects::nonNull)
        .map(AirPricingRecordsViewUtil::convertStringToLong)
        .orElse(Long.valueOf(0));
  }

  private static List<MonetaryInformationDetailsType_230889C>
      getReissueInfoOtherMonetaryDetails(FirstDpiGroup firstDpiGroup) {
    return Optional.ofNullable(firstDpiGroup)
        .map(FirstDpiGroup::getReissueInfo)
        .map(MonetaryInformationType_198367S::getOtherMonetaryDetails)
        .orElse(Collections.emptyList());
  }

  /**
   * @param fare
   * @param unitPriceView
   * @param isAwardFareRequested
   */
  private static void mapUnitExchangePrices(FareList fare, UnitPriceView unitPriceView, boolean isAwardFareRequested) {
    FirstDpiGroup firstDpiGroup = AirPricingRecordsViewUtil.getFirstDpiGroup(fare);
    ExchangePriceDetailsView exchangePrices = new ExchangePriceDetailsView();
    mapUnitExchangeBalance(firstDpiGroup, exchangePrices);
    mapUnitAdditionalCollectionAmount(firstDpiGroup, exchangePrices);
    mapUnitResidualAmountDetails(firstDpiGroup, exchangePrices);
    mapUnitPenaltyAmountDetails(firstDpiGroup, exchangePrices);
    if (isAwardFareRequested) {
      mapUnitConvertedMiles(AirPricingRecordsViewUtil.getThirdGroup(fare), exchangePrices);
    }
    unitPriceView.setExchangePrices(exchangePrices);
  }

  private static void mapUnitConvertedMiles(ThirdGroup thirdGroup, ExchangePriceDetailsView exchangePrices) {
    MonetaryInformationType_163016S reissueMilesInfo = AirPricingRecordsViewUtil.getReissueMilesInfo(thirdGroup);
    reissueMilesInfo.getMonetaryDetails().getAmount();
    AmountView penaltyInMiles = AirPricingRecordsViewUtil.getAmountDetails(MILES_CURRENCY,
        getPenaltyInMiles(reissueMilesInfo.getOtherMonetaryDetails()));
    ExchangeBalanceView balance = new ExchangeBalanceView()
        .total(getBalanceInMiles(reissueMilesInfo))
        .currencyCode(MILES_CURRENCY);
    ExchangeMilesDetailsView milesDetails = new ExchangeMilesDetailsView();
    milesDetails.penalty(penaltyInMiles);
    milesDetails.balance(balance);
    exchangePrices.setConvertedMiles(milesDetails);
  }

  /**
   * @param firstDpiGroup
   * @param exchangePrices
   */
  private static void mapUnitPenaltyAmountDetails(FirstDpiGroup firstDpiGroup,
      ExchangePriceDetailsView exchangePrices) {
    DiscountPenaltyMonetaryInformationTypeI_231067C penaltyDetails = AirPricingRecordsViewUtil
        .getPenaltyDetails(firstDpiGroup);
    AmountView penaltyAmountDetails = AirPricingRecordsViewUtil.getAmountDetails(penaltyDetails.getPenaltyCurrency(),
        AirPricingRecordsViewUtil.getScaledAmount(penaltyDetails.getPenaltyAmount()));
    exchangePrices.setPenalty(penaltyAmountDetails);
  }

  /**
   * @param firstDpiGroup
   * @param exchangePrices
   */
  private static void mapUnitResidualAmountDetails(FirstDpiGroup firstDpiGroup,
      ExchangePriceDetailsView exchangePrices) {
    MonetaryInformationType_198367S reissueInfo = getReissueInfo(firstDpiGroup);
    MonetaryInformationDetailsType_230889C residualDetails = getResidualDetails(reissueInfo);
    AmountView residulAmountDetails = AirPricingRecordsViewUtil.getAmountDetails(residualDetails.getCurrency(),
        AirPricingRecordsViewUtil.getScaledAmount(residualDetails.getAmount()));
    exchangePrices.setRefund(residulAmountDetails);
  }

  /**
   * @param firstDpiGroup
   * @param exchangePrices
   */
  private static void mapUnitAdditionalCollectionAmount(FirstDpiGroup firstDpiGroup,
      ExchangePriceDetailsView exchangePrices) {
    List<MonetaryInformationDetailsType_230889C> otherMonetrayDetails = getReissueInfoOtherMonetaryDetails(
        firstDpiGroup);
    String currencyCode = getPricesCurrencyCode(otherMonetrayDetails);
    Long additionalCollectionAmount = getAdditionalCollectionAmount(otherMonetrayDetails);
    AmountView additionalCollection = AirPricingRecordsViewUtil.getAmountDetails(currencyCode,
        additionalCollectionAmount);
    exchangePrices.setAdditionalCollection(additionalCollection);
  }

  /**
   * @param firstDpiGroup
   * @param exchangePrices
   */
  private static void mapUnitExchangeBalance(FirstDpiGroup firstDpiGroup, ExchangePriceDetailsView exchangePrices) {
    ExchangeBalanceView balance = new ExchangeBalanceView();
    MonetaryInformationType_163015S reissueBalanceInfo = AirPricingRecordsViewUtil.getReissueBalanceInfo(firstDpiGroup);
    Long exchangeBalanceBaseAmount = getExchangeBalanceBaseAmount(reissueBalanceInfo);
    String exchangeBalanceCurrencyCode = getExchangeBalanceCurrencyCode(reissueBalanceInfo);
    List<MonetaryInformationDetailsType_230889C> reissueBalanceOtherMonetaryDetails = AirPricingRecordsViewUtil
        .getReissueBalanceInfoOtherMonetaryDetails(
            reissueBalanceInfo);
    Long exchangeBalanceTotalAmount = getExchangeBalanceTotal(reissueBalanceOtherMonetaryDetails);
    Long exchangeBalanceTotalTaxesAmount = getExchangeBalanceTotalTaxes(reissueBalanceOtherMonetaryDetails);
    balance.setTotal(exchangeBalanceTotalAmount);
    balance.setBase(exchangeBalanceBaseAmount);
    balance.setCurrencyCode(exchangeBalanceCurrencyCode);
    balance.setTotalTaxes(exchangeBalanceTotalTaxesAmount);
    exchangePrices.setBalance(balance);
  }

  /**
   * @param otherMonetaryDetails
   * @return
   */
  private static Long getRepricedTotalAmount(List<MonetaryInformationDetailsType_230889C> otherMonetaryDetails) {
    return CollectionUtils.emptyIfNull(otherMonetaryDetails)
        .stream()
        .filter(otherMonetaryDetail -> StringUtils.equals(REPRICED_TOTAL_AMOUNT_TYPE,
            otherMonetaryDetail.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .mapToLong(convertBigDecimalToLong())
        .sum();
  }

  /**
   * @param otherMonetaryDetails
   * @return
   */
  private static Long getRepricedTotalTaxes(List<MonetaryInformationDetailsType_230889C> otherMonetaryDetails) {
    return CollectionUtils.emptyIfNull(otherMonetaryDetails)
        .stream()
        .filter(otherMonetaryDetail -> StringUtils.equals(REPRICED_TOTAL_TAXES_TYPE,
            otherMonetaryDetail.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .mapToLong(convertBigDecimalToLong())
        .sum();
  }

  /**
   * @param otherMonetaryDetails
   * @return
   */
  private static Long getAdditionalCollectionAmount(List<MonetaryInformationDetailsType_230889C> otherMonetaryDetails) {
    return CollectionUtils.emptyIfNull(otherMonetaryDetails)
        .stream()
        .filter(otherMonetaryDetail -> StringUtils.equals(ADDITIONAL_COLLECTION_AMOUNT_TYPE,
            otherMonetaryDetail.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .mapToLong(convertBigDecimalToLong())
        .sum();
  }

  /**
   * @param otherMonetrayDetails
   * @return
   */
  private static String getPricesCurrencyCode(List<MonetaryInformationDetailsType_230889C> otherMonetrayDetails) {
    return CollectionUtils.emptyIfNull(otherMonetrayDetails)
        .stream()
        .findFirst()
        .map(MonetaryInformationDetailsType_230889C::getCurrency)
        .orElse(StringUtils.EMPTY);
  }

  /**
   * @param reissueInfo
   * @return
   */
  private static MonetaryInformationDetailsType_230889C
      getResidualDetails(MonetaryInformationType_198367S reissueInfo) {
    return Optional.ofNullable(reissueInfo)
        .map(MonetaryInformationType_198367S::getMonetaryDetails)
        .filter(monetaryDetails -> StringUtils.equals(RESIDUAL_AMOUNT_TYPE, monetaryDetails.getTypeQualifier()))
        .orElse(new MonetaryInformationDetailsType_230889C());
  }

  /**
   * @param firstDpiGroup
   * @return
   */
  private static MonetaryInformationType_198367S getReissueInfo(FirstDpiGroup firstDpiGroup) {
    return Optional.ofNullable(firstDpiGroup)
        .map(FirstDpiGroup::getReissueInfo)
        .orElse(new MonetaryInformationType_198367S());
  }

  /**
   * @param reissueBalanceInfo
   * @return
   */
  private static Long getExchangeBalanceBaseAmount(MonetaryInformationType_163015S reissueBalanceInfo) {
    return Optional.ofNullable(reissueBalanceInfo)
        .map(MonetaryInformationType_163015S::getMonetaryDetails)
        .filter(monetaryDetails -> StringUtils.equals(EXCHANGE_BASE_AMOUNT_TYPE, monetaryDetails.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .map(AirPricingRecordsViewUtil::getScaledAmount)
        .orElse(Long.valueOf(0));
  }

  /**
   * @param reissueBalanceOtherMonetaryDetails
   * @return
   */
  private static Long
      getExchangeBalanceTotal(List<MonetaryInformationDetailsType_230889C> reissueBalanceOtherMonetaryDetails) {
    return CollectionUtils.emptyIfNull(reissueBalanceOtherMonetaryDetails)
        .stream()
        .filter(details -> StringUtils.equals(EXCHANGE_TOTAL_AMOUNT_TYPE, details.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .mapToLong(convertBigDecimalToLong())
        .sum();
  }

  /**
   * @param reissueBalanceOtherMonetaryDetails
   * @return
   */
  private static Long
      getExchangeBalanceTotalTaxes(List<MonetaryInformationDetailsType_230889C> reissueBalanceOtherMonetaryDetails) {
    return CollectionUtils.emptyIfNull(reissueBalanceOtherMonetaryDetails)
        .stream()
        .filter(details -> StringUtils.equals(EXCHANGE_TOTAL_TAXES_AMOUNT_TYPE, details.getTypeQualifier()))
        .map(MonetaryInformationDetailsType_230889C::getAmount)
        .filter(Objects::nonNull)
        .mapToLong(convertBigDecimalToLong())
        .sum();
  }

  /**
   * @param reissueBalanceInfo
   * @return
   */
  private static String getExchangeBalanceCurrencyCode(MonetaryInformationType_163015S reissueBalanceInfo) {
    return Optional.ofNullable(reissueBalanceInfo)
        .map(MonetaryInformationType_163015S::getMonetaryDetails)
        .map(MonetaryInformationDetailsType_230889C::getCurrency)
        .orElse(StringUtils.EMPTY);
  }

  private static ToLongFunction<? super BigDecimal> convertBigDecimalToLong() {
    return amount -> amount.scaleByPowerOfTen(amount.scale())
        .longValue();
  }

  /**
   * @param otherMonetaryDetails
   * @return
   */
  private static Long getPenaltyInMiles(List<MonetaryInformationDetailsTypeI_231071C> otherMonetaryDetails) {
    return CollectionUtils.emptyIfNull(otherMonetaryDetails)
        .stream()
        .filter(monetaryDetails -> StringUtils.equals(MILES_PENALTY, monetaryDetails.getTypeQualifier()))
        .map(MonetaryInformationDetailsTypeI_231071C::getAmount)
        .filter(StringUtils::isNotBlank)
        .mapToLong(convertDoubleToLong())
        .sum();
  }

  private static ToLongFunction<? super String> convertDoubleToLong() {
    return amount -> (long)Double.parseDouble(amount);
  }

  /**
   * @param reissueMilesInfo
   * @return
   */
  private static Long getBalanceInMiles(MonetaryInformationType_163016S reissueMilesInfo) {
    return Optional.ofNullable(reissueMilesInfo)
        .map(MonetaryInformationType_163016S::getMonetaryDetails)
        .filter(monetaryDetails -> MILES_BALANCE.equalsIgnoreCase(monetaryDetails.getTypeQualifier()))
        .map(MonetaryInformationDetailsTypeI_231071C::getAmount)
        .map(Long::parseLong)
        .orElse(0L);
  }

}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\model\AwardFareHelper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Can be used to add different methods and data variables used to support award fare request
 **/
public class AwardFareHelper {

  private boolean isAwardFareRequested;
  private String frequentFlyerCardNumber;
  private String frequentFlyerCompanyCode;
  private List<String> corporateCodes;

  public boolean isAwardFareRequested() {
    return isAwardFareRequested;
  }

  public void setAwardFareRequested(boolean isAwardFareRequested) {
    this.isAwardFareRequested = isAwardFareRequested;
  }

  public String getFrequentFlyerCardNumber() {
    return frequentFlyerCardNumber;
  }

  public void setFrequentFlyerCardNumber(String frequentFlyerCardNumber) {
    this.frequentFlyerCardNumber = frequentFlyerCardNumber;
  }

  public String getFrequentFlyerCompanyCode() {
    return frequentFlyerCompanyCode;
  }

  public void setFrequentFlyerCompanyCode(String frequentFlyerCompanyCode) {
    this.frequentFlyerCompanyCode = frequentFlyerCompanyCode;
  }

  public List<String> getCorporateCodes() {
    return Collections.unmodifiableList(corporateCodes);
  }

  public void setCorporateCodes(List<String> corporateCodes) {
    this.corporateCodes = new ArrayList<>(corporateCodes);
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\model\FlightsHelper.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.model;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;

/**
 * Helper class to populate flight details
 * 
 * @author ysiva
 */

public class FlightsHelper {

  private final Set<String> flightIds = new HashSet<>();

  private final Set<String> flightStatusCodes = new HashSet<>();
  
  private final Map<String, String> ticketNumberToTravelerId = new HashMap<>();
  
  private final Map<String, String> repricedToOriginalBoundIds = new HashMap<>();
  
  @Valid
  private final List<TravelDocument> travelDocuments = new ArrayList<>();
  
  private boolean isRemoveBound;
  
  private boolean hasDisruptedFlights;
  
  private Set<String> boundToRemoveSegmentsIds = new HashSet<>();


  /**
   * To return flight ids
   * 
   * @return flight ids
   */
  public Set<String> getFlightIds() {
    return Collections.unmodifiableSet(flightIds);
  }

  /**
   * To add flight ids
   * 
   * @param flightIds flight ids
   */
  public void addFlightIds(Set<String> flightIds) {
    this.flightIds.addAll(flightIds);
  }

  /**
   * Method to return flight status codes
   * 
   * @return flight status codes
   */
  public Set<String> getFlightStatusCodes() {
    return Collections.unmodifiableSet(flightStatusCodes);
  }

  /**
   * To add flight status codes
   * 
   * @param flightStatusCodes
   *          flightStatusCodes
   */
  public void addFlightStatusCodes(Set<String> flightStatusCodes) {
    this.flightStatusCodes.addAll(flightStatusCodes);
  }

  /**
   * @return ticket numbers to traveler ids map
   */
  public Map<String, String> getTicketNumberToTravelerId() {
    return Collections.unmodifiableMap(ticketNumberToTravelerId);
  }

  /**
   * @param ticketNumberToTravelerId ticketNumberToTravelerId
   */
  public void addTicketNumberToTravelerId(Map<String, String> ticketNumberToTravelerId) {
    this.ticketNumberToTravelerId.putAll(ticketNumberToTravelerId);
  }

  /**
   * @return original bound id associated to input repriced bound id
   */
  public String getOriginalBoundId(String repricedBoundId) {
    return repricedToOriginalBoundIds.get(repricedBoundId);
  }

  /**
   * @param repricedBoundId repriced bound id
   * @param originalBoundId original bound id
   */
  public void addRepricedToOriginalBoundId(String repricedBoundId, String originalBoundId) {
    this.repricedToOriginalBoundIds.put(repricedBoundId, originalBoundId);
  }

  /**
   * @return
   */
  public List<TravelDocument> getTravelDocuments() {
    return Collections.unmodifiableList(travelDocuments);
  }

  /**
   * @param travelDocuments travel documents
   */
  public void addTravelDocuments(@Valid List<TravelDocument> travelDocuments) {
    this.travelDocuments.addAll(travelDocuments);
  }

  /**
   * @return isRemoveBound
   */
  public boolean isRemoveBound() {
    return isRemoveBound;
  }

  /**
   * @param removeBound removeBound
   */
  public void setRemoveBound(boolean removeBound) {
    this.isRemoveBound = removeBound;
  }

  /**
   * @return boundToRemoveSegmentsIds
   */
  public Set<String> getBoundToRemoveSegmentsIds() {
    return Collections.unmodifiableSet(boundToRemoveSegmentsIds);
  }

  /**
   * @param boundToRemoveSegmentsIds boundToRemoveSegmentsIds
   */
  public void setBoundToRemoveSegmentsIds(Set<String> boundToRemoveSegmentsIds) {
    this.boundToRemoveSegmentsIds = boundToRemoveSegmentsIds;
  }

  /**
   * @return hasDisruptedFlights
   */
  public boolean isHasDisruptedFlights() {
    return hasDisruptedFlights;
  }

  /**
   * @param hasDisruptedFlights hasDisruptedFlights
   */
  public void setHasDisruptedFlights(boolean hasDisruptedFlights) {
    this.hasDisruptedFlights = hasDisruptedFlights;
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\DocumentsConverter.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters;

import com.amadeus.proto.ssp.atc.DocumentsProto.Documents;

/**
 * Enum class is resposible to convert pnr ticketing details to proto generated ticketing details
 */
public enum DocumentsConverter {

  INSTANCE;

  /**
   * Method to convert json response to proto document.
   * 
   * @param ticketNumber
   *          ticketNumber
   * @param travelerId
   *          travelerId
   * @return documents
   */
  public Documents convert(String ticketNumber, String travelerId) {
    Documents.Builder document = Documents.newBuilder();
    document.setId(ticketNumber);
    document.setTravelerId(travelerId);
    return document.build();
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\FlightArrivalAndDepartureConverter.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters;

import com.amadeus.jal.dapi.model.core.FlightEndPointView;
import com.amadeus.proto.ssp.atc.ArrivalProto.Arrival;
import com.amadeus.proto.ssp.atc.DepartureProto.Departure;

/**
 * Enum class responsible to convert json arrival and departure details to protobuf model.
 */
public enum FlightArrivalAndDepartureConverter {

  INSTANCE;

  /**
   * Method to convert json arrival details to proto arrival
   * 
   * @param flightEndpoint
   *          flightEndpoint
   * @return arrival details
   */
  public Arrival convertArrival(FlightEndPointView flightEndpoint) {
    Arrival.Builder arrival = Arrival.newBuilder();
    arrival.setDateTime(String.valueOf(flightEndpoint.getDateTime()));
    arrival.setLocationCode(flightEndpoint.getLocationCode());
    return arrival.build();
  }

  /**
   * Method to convert json departure details to proto departure
   * 
   * @param flightEndpoint
   *          flightEndpoint
   * @return departure details
   */
  public Departure convertDeparture(FlightEndPointView flightEndpoint) {
    Departure.Builder departure = Departure.newBuilder();
    departure.setDateTime(String.valueOf(flightEndpoint.getDateTime()));
    departure.setLocationCode(flightEndpoint.getLocationCode());
    return departure.build();
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\PricesConverter.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters;

import java.util.Optional;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.jal.dapi.model.core.AirPricingRecordsView;
import com.amadeus.jal.dapi.model.core.AmountView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyDataView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyView;
import com.amadeus.jal.dapi.model.core.ExchangeBalanceView;
import com.amadeus.jal.dapi.model.core.ExchangeMilesDetailsView;
import com.amadeus.jal.dapi.model.core.ExchangePriceDetailsView;
import com.amadeus.jal.dapi.model.core.PriceView;
import com.amadeus.proto.ssp.atc.ExchangeBalanceProto.ExchangeBalance;
import com.amadeus.proto.ssp.atc.ExchangePricesProto.ExchangePrices;
import com.amadeus.proto.ssp.atc.ExchangePricesProto.ExchangePrices.Builder;
import com.amadeus.proto.ssp.atc.PricesProto.Prices;
import com.amadeus.proto.ssp.atc.RefundAmountProto.RefundAmount;
import com.amadeus.proto.ssp.atc.TotalPricesProto.TotalPrices;

/**
 * Enum class is responsible to convert Json prices to proto model prices details.
 */
public enum PricesConverter {

  INSTANCE;

  /**
   * Method to get converted proto prices model from Json prices
   * 
   * @param disruptionRepricingReplyView
   *          disruptionRepricingReplyView
   * @param awardFareHelper
   *          awardFareHelper
   * @return prices
   */
  public Prices convert(DisruptionRepricingReplyView disruptionRepricingReplyView, AwardFareHelper awardFareHelper) {
    AirPricingRecordsView airPricingRecordsView = getAirPricingRecordsView(disruptionRepricingReplyView);
    PriceView totalPriceView = getTotalPricesView(airPricingRecordsView);
    ExchangePriceDetailsView exchangePrices = getExchangePriceDetailsView(airPricingRecordsView);
    Prices.Builder prices = Prices.newBuilder();
    buildTotalPrices(totalPriceView, prices);
    buildAirExchangePrices(exchangePrices, prices);
    if (awardFareHelper.isAwardFareRequested()) {
      buildAirExchangeMiles(exchangePrices, prices);
    }
    return prices.build();
  }

  /**
   * @param airPricingRecordsView
   * @return
   */
  private static ExchangePriceDetailsView getExchangePriceDetailsView(AirPricingRecordsView airPricingRecordsView) {
    return Optional.ofNullable(airPricingRecordsView)
        .map(AirPricingRecordsView::getExchangePrices)
        .orElse(new ExchangePriceDetailsView());
  }

  /**
   * @param airPricingRecordsView
   * @return
   */
  private static PriceView getTotalPricesView(AirPricingRecordsView airPricingRecordsView) {
    return Optional.ofNullable(airPricingRecordsView)
        .map(AirPricingRecordsView::getTotalPrices)
        .flatMap(totalPrices -> totalPrices.stream().findFirst())
        .orElse(new PriceView());
  }

  /**
   * @param disruptionRepricingReplyView
   * @return
   */
  private static AirPricingRecordsView
      getAirPricingRecordsView(DisruptionRepricingReplyView disruptionRepricingReplyView) {
    return Optional.ofNullable(disruptionRepricingReplyView)
        .map(DisruptionRepricingReplyView::getData)
        .map(DisruptionRepricingReplyDataView::getPrices)
        .orElse(new AirPricingRecordsView());
  }

  /**
   * @param totalPriceView
   * @param prices
   */
  private static void buildTotalPrices(PriceView totalPriceView,
      Prices.Builder prices) {
    if (totalPriceView != null) {
      TotalPrices.Builder totalPrices = totalPricesBuilder(totalPriceView);
      prices.setTotalPrices(totalPrices);
    }
  }

  /**
   * @param exchangePricesView
   * @param prices
   */
  private static void buildAirExchangePrices(ExchangePriceDetailsView exchangePricesView,
      Prices.Builder prices) {
    if (exchangePricesView != null) {
      ExchangePrices.Builder exchangePrices = exchangePriceBuilder(exchangePricesView);
      prices.setExchangePrices(exchangePrices);
    }
  }

  /**
   * Method to build exchange balance in exchange prices
   * 
   * @param airExchangePrices
   * @return
   */
  private static ExchangeBalance buildExchangeBalance(ExchangePriceDetailsView airExchangePrices) {
    ExchangeBalanceView airExchangeBalance = airExchangePrices.getBalance();
    ExchangeBalance.Builder exchangeBalance = ExchangeBalance.newBuilder();
    if (airExchangeBalance != null) {
      exchangeBalance.setBase(String.valueOf(airExchangeBalance.getBase()));
      exchangeBalance.setTotalTaxes(String.valueOf(airExchangeBalance.getTotalTaxes()));
      exchangeBalance.setTotal(String.valueOf(airExchangeBalance.getTotal()));
    }
    return exchangeBalance.build();
  }

  /**
   * Method to build the refund amount in air exchange prices
   * 
   * @param airExchangePrices
   * @return
   */
  private static RefundAmount buildRefundAmount(ExchangePriceDetailsView airExchangePrices) {
    RefundAmount.Builder refundAmount = RefundAmount.newBuilder();
    AmountView exchangeRefundAmount = airExchangePrices.getRefund();
    if (exchangeRefundAmount != null) {
      refundAmount.setValue(String.valueOf(exchangeRefundAmount.getValue()));
      refundAmount.setCurrencyCode(exchangeRefundAmount.getCurrencyCode());
    }
    return refundAmount.build();
  }

  /**
   * @param airExchangePrices
   * @return
   */
  private static ExchangePrices.Builder exchangePriceBuilder(ExchangePriceDetailsView airExchangePrices) {
    ExchangePrices.Builder exchangePrices = ExchangePrices.newBuilder();
    exchangePrices.setExchangeBalance(buildExchangeBalance(airExchangePrices));
    AmountView penaltyAmpunt = airExchangePrices.getPenalty();
    if (penaltyAmpunt != null) {
      exchangePrices.setPenalty(String.valueOf(penaltyAmpunt.getValue()));
    }
    AmountView additionalCollectionAmount = airExchangePrices.getAdditionalCollection();
    if (additionalCollectionAmount != null) {
      exchangePrices.setAdditionalCollectionAmount(String.valueOf(additionalCollectionAmount.getValue()));
    }
    exchangePrices.setRefundAmount(buildRefundAmount(airExchangePrices));
    return exchangePrices;
  }

  /**
   * @param totalPriceView
   * @return
   */
  private static TotalPrices.Builder totalPricesBuilder(PriceView totalPriceView) {
    TotalPrices.Builder totalPrices = TotalPrices.newBuilder();
    totalPrices.setBase(String.valueOf(totalPriceView.getBase()));
    totalPrices.setTotalTaxes(String.valueOf(totalPriceView.getTotalTaxes()));
    totalPrices.setTotal(String.valueOf(totalPriceView.getTotal()));
    totalPrices.setCurrencyCode(totalPriceView.getCurrencyCode());
    totalPrices.setDecimalPlaces("0");
    return totalPrices;
  }

  /**
   * @param exchangePricesView
   * @param prices
   */
  private static void buildAirExchangeMiles(ExchangePriceDetailsView exchangePricesView,
      Prices.Builder prices) {
    if (exchangePricesView != null && exchangePricesView.getConvertedMiles() != null) {
      ExchangePrices.Builder exchangePricesInMiles = exchangeMilesBuilder(exchangePricesView);
      prices.setExchangeMiles(exchangePricesInMiles);
    }
  }

  private static Builder exchangeMilesBuilder(ExchangePriceDetailsView airExchangePrices) {
    ExchangePrices.Builder exchangeMiles = ExchangePrices.newBuilder();
    exchangeMiles.setExchangeBalance(buildExchangeBalanceInMiles(airExchangePrices.getConvertedMiles()));
    AmountView penaltyInMiles = airExchangePrices.getConvertedMiles().getPenalty();
    if (penaltyInMiles != null) {
      exchangeMiles.setPenalty(String.valueOf(penaltyInMiles.getValue()));
    }
    return exchangeMiles;
  }

  private static ExchangeBalance buildExchangeBalanceInMiles(ExchangeMilesDetailsView convertedMiles) {
    ExchangeBalanceView airExchangeBalanceInMiles = convertedMiles.getBalance();
    ExchangeBalance.Builder exchangeBalance = ExchangeBalance.newBuilder();
    if (airExchangeBalanceInMiles != null) {
      exchangeBalance.setTotal(String.valueOf(airExchangeBalanceInMiles.getTotal()));
      exchangeBalance.setBase(String.valueOf(airExchangeBalanceInMiles.getTotal()));
      exchangeBalance.setTotalTaxes("0");
    }
    return exchangeBalance.build();
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\RequestedFlightDetailsConverter.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.proto.converters;

import java.util.Map;
import java.util.Set;

import org.apache.commons.codec.binary.StringUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.jal.dapi.model.core.FlightEndPointView;
import com.amadeus.jal.dapi.model.core.FlightItemView;
import com.amadeus.jal.dapi.model.core.FlightView;
import com.amadeus.proto.ssp.atc.FareInformationProto.FareInformation;
import com.amadeus.proto.ssp.atc.RequestedFlightsProto.RequestedFlights;

/**
 * Enum class is responsible to convert json flight details to proto requested flight details used for order exchange
 * flows
 */
public enum RequestedFlightDetailsConverter {

  INSTANCE;

  /**
   * Method to convert the json flight details to proto requested fligh details
   * 
   * @param flightIdToFlightDetails
   *          flightIdToFlightDetails
   * @param flight
   *          flight
   * @param segmnetIdToFareClass
   *          segmnetIdToFareClass
   * @param travelerIds
   *          travelerIds
   * @param segmentIdToStatusCode
   *          segmentIdToStatusCode
   * @return
   */
  public RequestedFlights convert(Map<String, FlightView> flightIdToFlightDetails,
      FlightItemView flight, Map<String, String> segmnetIdToFareClass, Set<String> travelerIds,
      Map<String, String> segmentIdToStatusCode, FlightsHelper flightsHelper) {
    String segmentId = flight.getId();
    RequestedFlights.Builder flightExchangeDetails = RequestedFlights.newBuilder();
    if (flightIdToFlightDetails.containsKey(segmentId)) {
      FlightView flightView = flightIdToFlightDetails.get(segmentId);
      flightExchangeDetails.setBookingClass(flight.getBookingClass());
      flightExchangeDetails.setMarketingAirlineCode(flightView.getMarketingAirlineCode());
      flightExchangeDetails.setMarketingFlightNumber(flightView.getMarketingFlightNumber());
      flightExchangeDetails.setAircraftCode(flightView.getAircraftCode());
      FlightEndPointView arrival = flightView.getArrival();
      flightExchangeDetails.setArrival(FlightArrivalAndDepartureConverter.INSTANCE
          .convertArrival(arrival));
      FlightEndPointView departure = flightView.getDeparture();
      flightExchangeDetails.setDeparture(FlightArrivalAndDepartureConverter.INSTANCE
          .convertDeparture(departure));
      flightExchangeDetails.setSegmentId(segmentId);
      buildFareInformation(segmentId, segmnetIdToFareClass, flightExchangeDetails, travelerIds);
      if (flightsHelper.isRemoveBound()) {
        flightExchangeDetails.setIsSegmentDisrupted(flightsHelper.isHasDisruptedFlights());
      } else {
        populateIsSegmentDisruption(segmentId, segmentIdToStatusCode, flightExchangeDetails);
      }
    }
    return flightExchangeDetails.build();
  }

  /**
   * @param segmentId
   * @param segmentIdToStatusCode
   * @param flightExchangeDetails
   */
  private static void populateIsSegmentDisruption(String segmentId, Map<String, String> segmentIdToStatusCode,
      RequestedFlights.Builder flightExchangeDetails) {
    if (segmentIdToStatusCode.containsKey(segmentId)) {
      String statusCode = segmentIdToStatusCode.get(segmentId);
      flightExchangeDetails
          .setIsSegmentDisrupted(StringUtils.equals("TK", statusCode) || StringUtils.equals("HK", statusCode));
    }
  }

  /**
   * @param segmentId
   * @param segmnetIdToFareClass
   * @param flightExchangeDetails
   * @param travelerIds
   */
  private static void buildFareInformation(String segmentId,
      Map<String, String> segmnetIdToFareClass, RequestedFlights.Builder flightExchangeDetails,
      Set<String> travelerIds) {
    FareInformation.Builder fareInformation = FareInformation.newBuilder();
    if (segmnetIdToFareClass.containsKey(segmentId)) {
      String fareClass = segmnetIdToFareClass.get(segmentId);
      fareInformation.setFareClass(fareClass);
      fareInformation.addAllTravelerIds(travelerIds);
      flightExchangeDetails.addFareInformation(0, fareInformation);
    }
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingConfirmationService.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.service;

import java.util.List;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.impl.disruption.reprice.validators.DisruptionRepricingConfirmationServiceValidator;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirBoundExchangesResponse;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingConfirmationRequestView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

/**
 * Service class is responsible to confirm the acknowledgement
 * 
 * @author ysiva
 */
@Named
public class DisruptionRepricingConfirmationService {

  private DapiClient dapiClient;

  private DisruptionRepricingConfirmationServiceValidator disruptionRepricingConfirmationServiceValidator;

  private RfdCannedMessageRepository cannedMessageRepository;

  private RestJsonResponseParser restParser;

  private static final Logger LOG = LoggerFactory.getLogger(DisruptionRepricingConfirmationService.class);

  private static final String ERROR_MESSAGE = "Error occured while retriving confirmation response";

  /**
   * Constructor to inject required resources
   * 
   * @param dapiClient
   *          dapiClient
   * @param disruptionRepricingConfirmationServiceValidator
   *          disruptionRepricingConfirmationServiceValidator
   * @param cannedMessageRepository
   *          cannedMessageRepository
   */
  @Inject
  public DisruptionRepricingConfirmationService(DapiClient dapiClient, RestJsonResponseParser restParser,
      DisruptionRepricingConfirmationServiceValidator disruptionRepricingConfirmationServiceValidator,
      RfdCannedMessageRepository cannedMessageRepository) {
    this.dapiClient = dapiClient;
    this.restParser = restParser;
    this.disruptionRepricingConfirmationServiceValidator = disruptionRepricingConfirmationServiceValidator;
    this.cannedMessageRepository = cannedMessageRepository;
  }

  /**
   * Method to handle the acknowledgement response
   * 
   * @param confirmationRequest
   *          confirmationRequest
   * @param orderId
   *          orderId
   * @param languageCode
   *          languageCode
   * @param lastName
   *          lastName
   * @param firstName
   *          firstName
   * @return response
   */
  public Response handleRequest(DisruptionRepricingConfirmationRequestView confirmationRequest, String orderId,
      String languageCode, String lastName, String firstName) {
    try {
      disruptionRepricingConfirmationServiceValidator.validateRequest(confirmationRequest.getAirBoundIds());
      com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirExchangeRequest orderAirExchangeRequest =
          new com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirExchangeRequest();
      orderAirExchangeRequest.setAirBoundIds(confirmationRequest.getAirBoundIds());
      Response confirmationJsonResponse = dapiClient.airBoundExchangesConfirmation(orderAirExchangeRequest,
          orderId, lastName, firstName, languageCode);
      OrderAirBoundExchangesResponse orderAirBoundExchangesResponse = restParser.parse(confirmationJsonResponse,
          OrderAirBoundExchangesResponse.class);
      return buildDisruptionRepricingConfirmationResponse(orderAirBoundExchangesResponse);
    } catch (ConstraintViolationException constraintViolations) {
      return ErrorResponseUtils.getConstraintViloationsResponse(languageCode, cannedMessageRepository,
          constraintViolations);
    } catch (RuntimeException ex) {
      LOG.error(ERROR_MESSAGE, ex);
      return Response.status(Status.INTERNAL_SERVER_ERROR)
          .entity(ErrorResponseUtils.buildInternalErrorMessage(cannedMessageRepository))
          .build();
    }
  }

  private static Response
      buildDisruptionRepricingConfirmationResponse(OrderAirBoundExchangesResponse orderAirBoundExchangesResponse) {
    if (null != orderAirBoundExchangesResponse) {
    	 OrderReply orderReply = new OrderReply();
      if (CollectionUtils.isEmpty(orderAirBoundExchangesResponse.getErrors())) {
        if (null != orderAirBoundExchangesResponse.getData()) {
          orderReply.setData(orderAirBoundExchangesResponse.getData().getOrder());
        }
        orderReply.setDictionaries(orderAirBoundExchangesResponse.getDictionaries());
        orderReply.setWarnings(orderAirBoundExchangesResponse.getWarnings());
        return buildSuccessfulHTTPResponse(orderReply);
      } else {
        return buildErrorHTTPResponse(orderAirBoundExchangesResponse.getErrors(), orderReply);
      }
    }
    return null;
  }

  private static Response buildSuccessfulHTTPResponse(OrderReply orderReply) {
    return Response.status(Status.OK).entity(orderReply).build();
  }

	private static Response buildErrorHTTPResponse(List<ErrorMessage> errorList, OrderReply orderReply) {
		orderReply.setErrors(errorList);
		String status = errorList.get(0).getStatus();
		if (StringUtils.isNotBlank(status)) {
			return Response.status(Status.valueOf(status)).entity(orderReply).build();
		} else {
			return Response.status(Status.OK).entity(orderReply).build();
		}
	}
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingService.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.DisruptionRepricingJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.TicketRepricePNRWithBookingClassQueryBuilder;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.util.DisruptionRepricingUtil;
import com.amadeus.dapi.jalext.impl.disruption.reprice.validators.DisruptionRepricingServiceValidator;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FrequentFlyerCard;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Source;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.SpecialServiceRequest;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.mapper.OrderReplyMapper;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyView;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.jal.dapi.model.core.SourceView;
import com.amadeus.middleware.connector.client.DcxOptions;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Service class is responsible to call verbs and get response to build json
 * response
 * 
 * @author ysiva
 */
@Named
public class DisruptionRepricingService {

	@Value("${dapi.collateral.xml.sap.main:}")
	private String xmlSap;

	private DapiClient dapiClient;

	private XmlWebservicesClient webservicesClient;

	private ClientConversationHandlerFactory clientConversationHandlerFactory;

	private RestJsonResponseParser restParser;

	private DisruptionRepricingJsonResponseMapper disruptionRepricingJsonResponseMapper;

	private OrderReplyMapper orderReplyMapper;

	private DisruptionRepricingServiceValidator disruptionRepricingServiceValidator;

	private RfdCannedMessageRepository cannedMessageRepository;

	private static final Logger LOG = LoggerFactory.getLogger(DisruptionRepricingService.class);

	private static final String ERROR_MESSAGE = "Error occured while retriving order";

	/**
	 * Constructor to inject required classes
	 * 
	 * @param dapiClient                            dapiClient
	 * @param webservicesClient                     webservicesClient
	 * @param restParser                            restParser
	 * @param disruptionRepricingJsonResponseMapper disruptionRepricingJsonResponseMapper
	 * @param orderReplyMapper                      orderReplyMapper
	 */
	@Inject
	public DisruptionRepricingService(DapiClient dapiClient, XmlWebservicesClient webservicesClient,
			ClientConversationHandlerFactory clientConversationHandlerFactory, RestJsonResponseParser restParser,
			DisruptionRepricingJsonResponseMapper disruptionRepricingJsonResponseMapper,
			OrderReplyMapper orderReplyMapper, DisruptionRepricingServiceValidator disruptionRepricingServiceValidator,
			RfdCannedMessageRepository cannedMessageRepository) {
		this.dapiClient = dapiClient;
		this.webservicesClient = webservicesClient;
		this.restParser = restParser;
		this.disruptionRepricingJsonResponseMapper = disruptionRepricingJsonResponseMapper;
		this.orderReplyMapper = orderReplyMapper;
		this.disruptionRepricingServiceValidator = disruptionRepricingServiceValidator;
		this.cannedMessageRepository = cannedMessageRepository;
		this.clientConversationHandlerFactory = clientConversationHandlerFactory;
	}

	/**
	 * Method to handle the disruption re-pricing details
	 * 
	 * @param orderId              orderId
	 * @param languageCode         languageCode
	 * @param lastName             lastName
	 * @param firstName            firstName
	 * @param showMilesPrice       showMilesPrice
	 * @param corporateCodes       corporateCodes
	 * @param boundIdsToBeDeleted  boundIdsToBeDeleted
	 * @param dataRepositoryHelper dataRepositoryHelper
	 * @return response
	 */
  public Response handleRequest(String orderId, String languageCode, String lastName, String firstName,
      Boolean showMilesPrice, List<String> corporateCodes, List<String> boundIdsToBeDeleted,
      DataRepositoryHelper dataRepositoryHelper) {

    ClientConversationHandler clientConversationHandler = null;
    try {
      clientConversationHandler = clientConversationHandlerFactory.newConversation(xmlSap,
          DcxOptions.incomingDcxBuilder().build());
      PNR_Reply pnrReply = webservicesClient.getPNRDetails(orderId, clientConversationHandler);
      validateRequest(lastName, showMilesPrice, corporateCodes, boundIdsToBeDeleted, pnrReply);
      AwardFareHelper awardFareHelper = new AwardFareHelper();
      updateAwardFareHelper(awardFareHelper, showMilesPrice, corporateCodes);
      
      return getResponse(orderId, languageCode, lastName, firstName, boundIdsToBeDeleted, pnrReply,
          dataRepositoryHelper, clientConversationHandler, awardFareHelper);
    } catch (ConstraintViolationException constraintViolations) {
      return ErrorResponseUtils.getConstraintViloationsResponse(languageCode, cannedMessageRepository,
          constraintViolations);
    } catch (RuntimeException ex) {
      LOG.error(ERROR_MESSAGE, ex);
      return Response.status(Status.INTERNAL_SERVER_ERROR)
          .entity(ErrorResponseUtils.buildInternalErrorMessage(cannedMessageRepository))
          .build();
    } finally {
      if (clientConversationHandler != null) {
        try {
          clientConversationHandler.close();
        } catch (Exception e) { // IGNORE
        }
      }
    }
  }

  private static void updateAwardFareHelper(AwardFareHelper awardFareHelper, Boolean showMilesPrice,
      List<String> corporateCodes) {
    if (Boolean.TRUE.equals(showMilesPrice)) {
      awardFareHelper.setAwardFareRequested(true);
      awardFareHelper.setCorporateCodes(corporateCodes);
    } else {
      awardFareHelper.setAwardFareRequested(false);
    }
  }

  /**
	 * @param lastName
	 * @param corporateCodes
	 * @param showMilesPrice
	 * @param boundIdsToBeDeleted
	 * @param pnrReply 
	 */
  private void validateRequest(String lastName, Boolean showMilesPrice,
      List<String> corporateCodes, List<String> boundIdsToBeDeleted, PNR_Reply pnrReply) {
    disruptionRepricingServiceValidator.validate(lastName, showMilesPrice, corporateCodes, boundIdsToBeDeleted,
        pnrReply);
  }

	/**
	 * @param orderId
	 * @param languageCode
	 * @param lastName
	 * @param firstName
	 * @param boundIdsToBeDeleted
	 * @param pnrReply
	 * @param dataRepositoryHelper
	 * @param clientConversationHandler
	 * @param awardFareHelper
	 * @return
	 */
	private Response getResponse(String orderId, String languageCode, String lastName, String firstName, 
	List<String> boundIdsToBeDeleted, PNR_Reply pnrReply, DataRepositoryHelper dataRepositoryHelper, 
      ClientConversationHandler clientConversationHandler, AwardFareHelper awardFareHelper) {
    Response orderJsonResponse = dapiClient.getOrder(orderId, languageCode, lastName, firstName, false);
    OrderReply orderReply = restParser.parse(orderJsonResponse, OrderReply.class);
    Response disruptionRepricingReply = null;
    if (orderReply != null) {
      if (orderReply.getErrors() != null) {
        return getErrorResponse(orderReply);
      }
      updateAwardFareHelperWithFFDetails(awardFareHelper, orderReply);
      FlightsHelper flightsHelper = new FlightsHelper();
      updateFlightHelper(flightsHelper, pnrReply, orderReply, boundIdsToBeDeleted);
      disruptionRepricingServiceValidator.validateRemoveBoundDetails(flightsHelper);
      disruptionRepricingReply = getDisruptionPricingResponse(orderReply, disruptionRepricingReply, pnrReply,
          dataRepositoryHelper, clientConversationHandler, awardFareHelper, flightsHelper);
    }
    return disruptionRepricingReply;
  }

  private static void updateAwardFareHelperWithFFDetails(AwardFareHelper awardFareHelper, OrderReply orderReply) {
    Optional<FrequentFlyerCard> frequentFlyerCard = getFrequentFlyerCards(orderReply);
    if (frequentFlyerCard.isPresent()) {
      awardFareHelper.setFrequentFlyerCompanyCode(frequentFlyerCard.get().getCompanyCode());
      awardFareHelper.setFrequentFlyerCardNumber(frequentFlyerCard.get().getCardNumber());
    } else {
      // Extract Company code from FQTR
      awardFareHelper.setFrequentFlyerCompanyCode(getAirlineCode(orderReply));
    }
  }

	/**
	 * @param flightsHelper 
	 * @param pnrReply
	 * @param orderReply
	 * @param boundIdsToBeDeleted
	 */
  private static void updateFlightHelper(
      FlightsHelper flightsHelper, PNR_Reply pnrReply, OrderReply orderReply, List<String> boundIdsToBeDeleted) {
    flightsHelper.setHasDisruptedFlights(DisruptionRepricingUtil.isDisruptionStatusCodesPresent(pnrReply));
    if (CollectionUtils.isNotEmpty(boundIdsToBeDeleted)) {
      flightsHelper.setRemoveBound(true);
      Set<String> boundToRemoveSegmentsIds = new HashSet<>();
      orderReply.getData()
          .getAir()
          .getBounds()
          .stream()
          .filter(bound -> boundIdsToBeDeleted.contains(bound.getAirBoundId()))
          .forEach(
              bound -> boundToRemoveSegmentsIds.addAll(
                  bound.getFlights().stream().map(FlightItem::getId).collect(Collectors.toSet())));
      flightsHelper.setBoundToRemoveSegmentsIds(boundToRemoveSegmentsIds);
    }
  }

	/***
   * 
   * @param orderReply
   * @return
   */
  private static String getAirlineCode(OrderReply orderReply) {
    return Optional.ofNullable(orderReply)
        .map(OrderReply::getData)
        .map(Order::getSpecialServiceRequests)
        .orElse(Collections.emptyList())
        .stream()
        .filter(DisruptionRepricingService::isFQTRPresent)
        .findFirst()
        .map(SpecialServiceRequest::getAirlineCode)
        .orElse(null);
  }
  
  /***
   * 
   * @param ssr
   * @return
   */
  private static boolean isFQTRPresent(SpecialServiceRequest ssr) {
    return StringUtils.equalsIgnoreCase(Optional.ofNullable(ssr).map(SpecialServiceRequest::getCode).orElse(null),
        "FQTR");
  }

	/**
   * @param orderReply
   * @return
   */
  private static Optional<FrequentFlyerCard> getFrequentFlyerCards(OrderReply orderReply) {
    return Optional.ofNullable(orderReply)
        .map(OrderReply::getData)
        .map(Order::getFrequentFlyerCards)
        .orElse(Collections.emptyList())
        .stream()
        .findFirst();
  }

  /**
	 * @param orderReply
	 * @param disruptionRepricingReply
	 * @param pnrReply
	 * @param dataRepositoryHelper
	 * @param clientConversationHandler
	 * @param awardFareHelper
	 * @param flightsHelper
	 * @return
	 */
  private Response getDisruptionPricingResponse(OrderReply orderReply, Response disruptionRepricingReply,
      PNR_Reply pnrReply, DataRepositoryHelper dataRepositoryHelper,
      ClientConversationHandler clientConversationHandler, AwardFareHelper awardFareHelper,
      FlightsHelper flightsHelper) {
    Ticket_RepricePNRWithBookingClassReply informativeRepricingResponse = webservicesClient
        .informativePricingMethod(new TicketRepricePNRWithBookingClassQueryBuilder().buildRequest(orderReply,
            flightsHelper, pnrReply, dataRepositoryHelper, awardFareHelper), clientConversationHandler);
    disruptionRepricingServiceValidator.validateInformativePricesAvailable(informativeRepricingResponse);
    OrderReplyView orderReplyView = orderReplyMapper.create(orderReply);
    if (orderReplyView != null && informativeRepricingResponse != null) {
      disruptionRepricingReply = disruptionRepricingJsonResponseMapper
          .buildDisruptionRepricingResponse(informativeRepricingResponse, orderReplyView, flightsHelper,
              awardFareHelper);
    }
    return disruptionRepricingReply;
  }

	/**
	 * Method to map error response
	 * 
	 * @param orderReply
	 * @return
	 */
	private Response getErrorResponse(OrderReply orderReply) {
		List<ErrorMessage> errors = orderReply.getErrors();
		List<ErrorMessageView> errorsView = new ArrayList<>();
		CollectionUtils.emptyIfNull(errors).forEach((ErrorMessage error) -> {
			ErrorMessageView errorMessageView = mapErrorMessageView(error);
			errorsView.add(errorMessageView);
		});
		DisruptionRepricingReplyView disruptionRepricingReplyView = new DisruptionRepricingReplyView();
		disruptionRepricingReplyView.setErrors(errorsView);
		return Response.status(Status.NOT_FOUND).entity(disruptionRepricingReplyView).build();
	}

	/**
	 * Method to map error message view
	 * 
	 * @param error
	 * @return
	 */
	private ErrorMessageView mapErrorMessageView(ErrorMessage error) {
		ErrorMessageView errorMessageView = new ErrorMessageView();
		errorMessageView.setCode(error.getCode());
		errorMessageView.setTitle(error.getTitle());
		errorMessageView.setDetail(error.getDetail());
		errorMessageView.setStatus(error.getStatus());
		mapSourceView(error, errorMessageView);
		return errorMessageView;
	}

	/**
	 * Method to map source message view
	 * 
	 * @param error
	 * @param errorMessageView
	 */
	private void mapSourceView(ErrorMessage error, ErrorMessageView errorMessageView) {
		Source source = error.getSource();
		if (source != null) {
			SourceView sourceView = new SourceView();
			sourceView.setParameter(source.getParameter());
			sourceView.setPointer(sourceView.getPointer());
			errorMessageView.setSource(sourceView);
		}
	}
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\util\AirPricingRecordsViewUtil.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.jal.dapi.model.core.AmountView;
import com.amadeus.xml.taripr_19_1_1a.AdditionalFareQualifierDetailsTypeI_231082C;
import com.amadeus.xml.taripr_19_1_1a.ConnectionDetailsTypeI;
import com.amadeus.xml.taripr_19_1_1a.ConnectionTypeI;
import com.amadeus.xml.taripr_19_1_1a.DiscountAndPenaltyInformationTypeI_163012S;
import com.amadeus.xml.taripr_19_1_1a.DiscountPenaltyMonetaryInformationTypeI_231067C;
import com.amadeus.xml.taripr_19_1_1a.FareQualifierDetailsTypeI_163023S;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationDetailsType_230889C;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationType_163015S;
import com.amadeus.xml.taripr_19_1_1a.MonetaryInformationType_163016S;
import com.amadeus.xml.taripr_19_1_1a.ReferenceInformationTypeI;
import com.amadeus.xml.taripr_19_1_1a.ReferencingDetailsTypeI;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.AutomaticReissueInfo;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.AutomaticReissueInfo.FirstDpiGroup;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.AutomaticReissueInfo.ThirdGroup;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply.TicketGroup.FareList.SegmentInformation;

/**
 * Util class to get the details required to populate Json responses
 * 
 * @author ysiva
 */
public final class AirPricingRecordsViewUtil {

  private static final String ST = "ST";

  private AirPricingRecordsViewUtil() {
    // to restrict instantiation
  }

  /**
   * Method to return FirstDpiGroup
   * 
   * @param fare
   *          fare
   * @return firstDpiGroup
   */
  public static FirstDpiGroup getFirstDpiGroup(FareList fare) {
    return Optional.ofNullable(fare)
        .map(FareList::getAutomaticReissueInfo)
        .map(AutomaticReissueInfo::getFirstDpiGroup)
        .orElse(new FirstDpiGroup());
  }

  /**
   * Method to get ReissueMilesInfo
   *
   * @param thirdGroup
   *          thirdGroup
   * @return ReissueMilesInfo
   */
  public static MonetaryInformationType_163016S getReissueMilesInfo(ThirdGroup thirdGroup) {
    return Optional.ofNullable(thirdGroup)
        .map(ThirdGroup::getReissueMilesInfo)
        .orElse(null);
  }

  /**
   * Method to return ThirdGroup
   *
   * @param fare
   *          fare
   * @return ThirdGroup
   */
  public static ThirdGroup getThirdGroup(FareList fare) {
    return Optional.ofNullable(fare)
        .map(FareList::getAutomaticReissueInfo)
        .map(AutomaticReissueInfo::getThirdGroup)
        .orElse(new ThirdGroup());
  }

  /**
   * Method to get ReferencingDetailsTypeI
   * 
   * @param fare
   *          fare
   * @return referencingDetailsTypeI
   */
  public static ReferencingDetailsTypeI getPaxReferenceDetails(FareList fare) {
    return Optional.ofNullable(fare)
        .map(FareList::getPaxSegReference)
        .map(ReferenceInformationTypeI::getRefDetails)
        .flatMap(referenceDetails -> referenceDetails.stream().findFirst())
        .orElse(new ReferencingDetailsTypeI());
  }

  /**
   * To get SegmentsInformation
   * 
   * @param fare
   *          fare
   * @return SegmentsInformation
   */
  public static List<SegmentInformation> getSegmentInformation(FareList fare) {
    return Optional.ofNullable(fare)
        .map(FareList::getSegmentInformation)
        .orElse(Collections.emptyList());
  }

  /**
   * To get SegmentIds
   * 
   * @param segmentsInformation
   *          segmentsInformation
   * @return segmentIds
   */
  public static Set<String> getSegmentIds(List<SegmentInformation> segmentsInformation) {
    return CollectionUtils.emptyIfNull(segmentsInformation)
        .stream()
        .filter(AirPricingRecordsViewUtil::isRealAirSegment)
        .map(SegmentInformation::getSegmentReference)
        .map(ReferenceInformationTypeI::getRefDetails)
        .flatMap(Collection::stream)
        .filter(Objects::nonNull)
        .map(AirPricingRecordsViewUtil::getSegmentId)
        .filter(StringUtils::isNotBlank)
        .collect(Collectors.toSet());
  }
  
  /****
   * Filter out ARNK and MIS segments
   * 
   * @param segmentInformation
   * @return
   */
  public static boolean isRealAirSegment(SegmentInformation segmentInformation) {
    String connexType = Optional.ofNullable(segmentInformation)
        .map(SegmentInformation::getConnexInformation)
        .map(ConnectionTypeI::getConnecDetails)
        .map(ConnectionDetailsTypeI::getRoutingInformation)
        .orElse(null);
    return !(StringUtils.equalsIgnoreCase(connexType, "MIS")
        || StringUtils.equalsIgnoreCase(connexType, "ARNK"));

  }

  /**
   * To get fare details
   * 
   * @param reply
   *          reply
   * @return fare details
   */
  public static List<FareList> getFareDetails(Ticket_RepricePNRWithBookingClassReply reply) {
    return Optional.ofNullable(reply)
        .map(Ticket_RepricePNRWithBookingClassReply::getTicketGroup)
        .map(TicketGroup::getFareList)
        .orElse(Collections.emptyList());
  }

  /**
   * To get reissueBalanceInfoOtherMonetaryDetails
   * 
   * @param reissueBalanceInfo
   *          reissueBalanceInfo
   * @return reissueBalanceInfoOtherMonetaryDetails
   */
  public static List<MonetaryInformationDetailsType_230889C>
      getReissueBalanceInfoOtherMonetaryDetails(MonetaryInformationType_163015S reissueBalanceInfo) {
    return Optional
        .ofNullable(reissueBalanceInfo)
        .map(MonetaryInformationType_163015S::getOtherMonetaryDetails)
        .orElse(Collections.emptyList());
  }

  /**
   * To get ReissueBalanceInfo
   * 
   * @param firstDpiGroup
   *          firstDpiGroup
   * @return reissueBalanceInfo
   */
  public static MonetaryInformationType_163015S getReissueBalanceInfo(FirstDpiGroup firstDpiGroup) {
    return Optional.ofNullable(firstDpiGroup)
        .map(FirstDpiGroup::getReissueBalanceInfo)
        .orElse(null);
  }

  /**
   * To get PenaltyDetails
   * 
   * @param firstDpiGroup
   *          firstDpiGroup
   * @return penaltyDetails
   */
  public static DiscountPenaltyMonetaryInformationTypeI_231067C getPenaltyDetails(FirstDpiGroup firstDpiGroup) {
    return Optional.ofNullable(firstDpiGroup)
        .map(FirstDpiGroup::getReIssuePenalty)
        .map(DiscountAndPenaltyInformationTypeI_163012S::getPenDisData)
        .orElse(new DiscountPenaltyMonetaryInformationTypeI_231067C());
  }

  /**
   * Method to get amount details
   * 
   * @param currencyCode
   *          currencyCode
   * @param amount
   *          amount
   * @return amountDetails
   */
  public static AmountView getAmountDetails(String currencyCode, Long amount) {
    AmountView amountView = new AmountView();
    amountView.setValue(amount);
    amountView.setCurrencyCode(currencyCode);
    return amountView;
  }

  /**
   * Method to convert string to long.
   *
   * @param amount
   *          amount
   * @return long
   */
  public static Long convertStringToLong(String amount) {
    if (StringUtils.contains(amount, ".")) {
      return Long.parseLong(StringUtils.remove(amount, "."));
    }
    return Long.parseLong(amount);
  }

  /**
   * To return converted scaled amount
   * 
   * @param amount
   *          amount
   * @return long
   */
  public static Long getScaledAmount(BigDecimal amount) {
    return amount.scaleByPowerOfTen(amount.scale())
        .longValue();
  }

  /**
   * To get segment ids
   * 
   * @param referenceDetails
   *          referenceDetails
   * @return segment ids
   */
  public static String getSegmentId(ReferencingDetailsTypeI referenceDetails) {
    BigInteger referanceNumber = referenceDetails.getRefNumber();
    if (referanceNumber == null) {
      return StringUtils.EMPTY;
    }
    String refNumber = String.valueOf(referanceNumber);
    return ST + refNumber;
  }
  
  /**
   * To get ptc codes
   * 
   * @param segmentsInformation
   *          segmentsInformation
   * @return ptc codes
   */
  public static String getPTCCodes(List<SegmentInformation> segmentsInformation) {
    return CollectionUtils.emptyIfNull(segmentsInformation)
        .stream()
        .findFirst()
        .map(SegmentInformation::getFareQualifier)
        .map(FareQualifierDetailsTypeI_163023S::getFareBasisDetails)
        .map(AdditionalFareQualifierDetailsTypeI_231082C::getDiscTktDesignator)
        .orElse(StringUtils.EMPTY);
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\util\DisruptionRepricingUtil.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.util;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.xml.pnracc_19_1_1a.ElementManagementSegmentType;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.OriginDestinationDetails;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply.OriginDestinationDetails.ItineraryInfo;
import com.amadeus.xml.pnracc_19_1_1a.ProductIdentificationDetailsTypeI_2786C;
import com.amadeus.xml.pnracc_19_1_1a.RelatedProductInformationTypeI;
import com.amadeus.xml.pnracc_19_1_1a.TravelProductInformationTypeI_193100S;
import com.amadeus.xml.taripq_19_1_1a.ReferencingDetailsType;
import com.amadeus.xml.taripr_19_1_1a.ErrorGroupType;
import com.amadeus.xml.taripr_19_1_1a.FreeTextInformationType;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Common util class for common methods used by disruption repricing classes.
 */
public final class DisruptionRepricingUtil {

  private static final String SEGMENT_KEY = "S";

  private static final String PAX_KEY = "P";

  private DisruptionRepricingUtil() {
    // to restrict instantiation
  }

  /**
   * Builds reference details of type segment
   *
   * @param dapiId
   * @return ReferencingDetailsType
   */
  public static ReferencingDetailsType buildSegmentReference(String dapiId) {
    if (dapiId.startsWith(ReferenceIdType.ST.toString())) {
      String tattoo = dapiId.substring(ReferenceIdType.ST.getLength());
      return getReferencingDetailsType(SEGMENT_KEY, tattoo);
    }
    return null;

  }

  /**
   * Builds reference details of type passenger
   *
   * @param dapiId
   * @return ReferencingDetailsType
   */
  public static ReferencingDetailsType buildPaxReference(String dapiId) {
    if (dapiId.startsWith(ReferenceIdType.PT.toString())) {
      String tattoo = dapiId.substring(ReferenceIdType.PT.getLength());
      return getReferencingDetailsType(PAX_KEY, tattoo);
    } else if (dapiId.startsWith(ReferenceIdType.PI.toString())) {
      String tattoo = dapiId.substring(ReferenceIdType.PI.getLength());
      return getReferencingDetailsType(ReferenceIdType.PI.toString(), tattoo);
    } else {
      return null;
    }
  }

  /**
   * @param key
   * @param tattoo
   * @return
   */
  private static ReferencingDetailsType getReferencingDetailsType(String key, String tattoo) {
    return new ReferencingDetailsType().withType(key).withValue(tattoo);
  }

  public static boolean shouldRemoveSegment(String segmentId, FlightsHelper flightsHelper) {
    return flightsHelper.isRemoveBound() && flightsHelper.getBoundToRemoveSegmentsIds().contains(segmentId);
  }

  /**
   * Prefix used in the Json input to identify Flights and Passenger
   */
  private enum ReferenceIdType {
    ST("ST"), PT("PT"), PI("PI");

    private final String prefix;

    ReferenceIdType(String prefix) {
      this.prefix = prefix;
    }

    int getLength() {
      return prefix.length();
    }
  }

  /**
   * Add checks to distinguish real segment from Open, ARNK and MIS segments.
   *
   * @param itineraryInfo
   *          itineraryInfo
   * @return true if itineraryInfo is of a real AIR segment. It means that the flightNumber is not "OPEN", "MIS", "ARNK"
   */
  public static boolean isRealAirSegment(ItineraryInfo itineraryInfo) {
    String segmentName = getSegmentName(itineraryInfo);
    String flightNumber = getFlightNumber(itineraryInfo);
    return StringUtils.equalsIgnoreCase("AIR", segmentName) && !StringUtils.equalsIgnoreCase(flightNumber, "OPEN")
        && !StringUtils.equalsIgnoreCase(flightNumber, "MIS")
        && !StringUtils.equalsIgnoreCase(flightNumber, "ARNK");
  }

  /**
   * Method to get segment name from itinerary details.
   *
   * @param itineraryInfo
   * @return segment name
   */
  private static String getSegmentName(ItineraryInfo itineraryInfo) {
    return Optional.ofNullable(itineraryInfo)
        .map(ItineraryInfo::getElementManagementItinerary)
        .map(ElementManagementSegmentType::getSegmentName)
        .orElse(StringUtils.EMPTY);
  }

  /**
   * Method to get flight number.
   *
   * @param itineraryInfo
   *          itineraryInfo
   * @return flightNumber
   */
  public static String getFlightNumber(ItineraryInfo itineraryInfo) {
    return Optional.ofNullable(itineraryInfo)
        .map(ItineraryInfo::getTravelProduct)
        .map(TravelProductInformationTypeI_193100S::getProductDetails)
        .map(ProductIdentificationDetailsTypeI_2786C::getIdentification)
        .orElse(StringUtils.EMPTY);
  }
  
  /**
   * @param pnrReply
   * @return
   */
  public static boolean isDisruptionStatusCodesPresent(PNR_Reply pnrReply) {
    List<String> statusCodes = getStatusCodes(pnrReply);
    return statusCodes.contains("UN") && (statusCodes.contains("TK") || statusCodes.contains("HK"));
  }

  /**
   * @param pnrReply
   * @return
   */
  public static List<String> getStatusCodes(PNR_Reply pnrReply) {
    return CollectionUtils.emptyIfNull(pnrReply.getOriginDestinationDetails())
        .stream()
        .map(OriginDestinationDetails::getItineraryInfo)
        .flatMap(Collection::stream)
        .filter(DisruptionRepricingUtil::isRealAirSegment)
        .map(ItineraryInfo::getRelatedProduct)
        .map(RelatedProductInformationTypeI::getStatus)
        .flatMap(Collection::stream)
        .collect(Collectors.toList());
  }
  
  /**
   * Method to get Error description.
   *
   * @param informativeRepricingResponse
   *          informativeRepricingResponse
   * @return
   */
  public static String getErrorWarningDescription(Ticket_RepricePNRWithBookingClassReply informativeRepricingResponse) {
    return Optional.ofNullable(informativeRepricingResponse)
        .stream()
        .map(Ticket_RepricePNRWithBookingClassReply::getErrorMessage)
        .map(ErrorGroupType::getErrorWarningDescription)
        .map(FreeTextInformationType::getFreeText)
        .flatMap(Collection::stream)
        .findFirst()
        .orElse(StringUtils.EMPTY);
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingConfirmationServiceValidator.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.validators;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.digital.api.lib.logging.BusinessLogger;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jcp.access.utils.ProtobufSerializationService;
import com.amadeus.proto.ssp.atc.ExchangePricesProto.ExchangePrices;
import com.amadeus.proto.ssp.atc.OrderAirExchangeRequestProto;
import com.amadeus.proto.ssp.atc.OrderAirExchangeRequestProto.OrderAirExchangeRequest;
import com.amadeus.proto.ssp.atc.PricesProto.Prices;

/**
 * Validator to validate the confirmation request
 * 
 * @author ysiva
 */
@Named
public class DisruptionRepricingConfirmationServiceValidator {

  private static final int INVALID_AIRBOUND_ID = 39445;

  private static final String INVALID_AIRBOUND_IDS_ERROR_MESSAGE = "Invalid AirBound Ids provided";

  private static final int ORDER_REPRICING_NOT_ALLOWED = 40567;

  private static final String ORDER_REPRICING_NOT_ALLOWED_MSG = "An additional collection or a penalty is "
      + "found during the repricing";

  private Constraints constraints;
  
  private boolean isRemoveBound;

  /**
   * Constructor to inject required resources
   * 
   * @param constraints
   *          constraints
   */
  @Inject
  public DisruptionRepricingConfirmationServiceValidator(Constraints constraints) {
    this.constraints = constraints;
  }

  /**
   * Method to validate the request
   * 
   * @param airBoundIds
   *          airBoundIds
   */
  public void validateRequest(List<String> airBoundIds) {
    if (CollectionUtils.isEmpty(airBoundIds)) {
      addInvalidBoundError(INVALID_AIRBOUND_IDS_ERROR_MESSAGE);
    }
    List<OrderAirExchangeRequest> decodedAirBoundIds = getDecodedAirExchangeRequests(airBoundIds);
    validatePrices(decodedAirBoundIds);
    isRemoveBound = isRemoveBoundRequest(decodedAirBoundIds);
  }

  private void validatePrices(List<OrderAirExchangeRequest> decodedAirBoundIds) {
    Prices prices = getPrices(decodedAirBoundIds);
    validateAndRaiseErrorIfAdditionalOrPenaltyAmountPresent(prices.getExchangePrices());
    if (isAwardFareRequested(decodedAirBoundIds)) {
      validateAndRaiseErrorIfPenaltyInMilesPresentForAwardFare(prices.getExchangeMiles());
    }
  }

  private void validateAndRaiseErrorIfPenaltyInMilesPresentForAwardFare(ExchangePrices exchangeMiles) {
    if (exchangeMiles == null) {
      return;
    }
    constraints
        .validate(constraints.validator(
            () -> (Boolean.FALSE.equals(StringUtils.equals("0", exchangeMiles.getPenalty()))),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, ORDER_REPRICING_NOT_ALLOWED_MSG,
                ORDER_REPRICING_NOT_ALLOWED)));
  }

  /**
   * @param exchangePrices
   */
  private void validateAndRaiseErrorIfAdditionalOrPenaltyAmountPresent(ExchangePrices exchangePrices) {
    if (exchangePrices == null) {
      return;
    }
    constraints
        .validate(constraints.validator(
            () -> (Boolean.FALSE.equals(StringUtils.equals("0", exchangePrices.getAdditionalCollectionAmount()))
                || Boolean.FALSE.equals(StringUtils.equals("0", exchangePrices.getPenalty()))),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, ORDER_REPRICING_NOT_ALLOWED_MSG,
                ORDER_REPRICING_NOT_ALLOWED)));
  }

  /**
   * @param decodedAirBoundIds
   * @return
   */
  private static Prices getPrices(List<OrderAirExchangeRequest> decodedAirBoundIds) {
    return CollectionUtils.emptyIfNull(decodedAirBoundIds)
        .stream()
        .findFirst()
        .map(OrderAirExchangeRequest::getPrices)
        .orElse(Prices.getDefaultInstance());
  }

  private static boolean isAwardFareRequested(List<OrderAirExchangeRequest> decodedAirBoundIds) {
    return CollectionUtils.emptyIfNull(decodedAirBoundIds)
        .stream()
        .findFirst()
        .map(OrderAirExchangeRequest::getIsAwardFare)
        .orElse(false);
  }
  
  private static boolean isRemoveBoundRequest(List<OrderAirExchangeRequest> decodedAirBoundIds) {
    return CollectionUtils.emptyIfNull(decodedAirBoundIds)
        .stream()
        .findFirst()
        .map(OrderAirExchangeRequest::getIsRemoveBound)
        .orElse(false);
  }

  /**
   * Method to get decoded OrderAirExchnageRequests by using proto files from Recommendation ID.
   *
   * @param airBoundIds
   * @return
   */
  private List<OrderAirExchangeRequest> getDecodedAirExchangeRequests(List<String> airBoundIds) {
    List<OrderAirExchangeRequest> decodedOrderAirExchangeRequests = new LinkedList<>();
    airBoundIds.forEach((String airBoundId) -> {
      try {
        populateDecodedAirExchangeRequests(decodedOrderAirExchangeRequests, airBoundId);
      } catch (IOException e) {
        addInvalidBoundError(e.getMessage());
        BusinessLogger.info(DisruptionRepricingConfirmationServiceValidator.class, INVALID_AIRBOUND_IDS_ERROR_MESSAGE,
            e);
      }
    });
    return decodedOrderAirExchangeRequests;
  }

  private static void populateDecodedAirExchangeRequests(List<OrderAirExchangeRequest> decodedOrderAirExchangeRequests,
      String airBoundId) throws IOException {
    OrderAirExchangeRequestProto.OrderAirExchangeRequest orderAirExchangeRequest = ProtobufSerializationService
        .decodeToProtobufObject(airBoundId,
            OrderAirExchangeRequestProto.OrderAirExchangeRequest.getDefaultInstance());
    decodedOrderAirExchangeRequests.add(orderAirExchangeRequest);
  }

  /**
   * @param message
   */
  private void addInvalidBoundError(String message) {
    constraints
        .validate(constraints.validator(() -> StringUtils.isNotBlank(message),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, INVALID_AIRBOUND_IDS_ERROR_MESSAGE,
                INVALID_AIRBOUND_ID)));
  }

  public boolean isRemoveBoundRequest() {
    return isRemoveBound;
  }
}

```

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingServiceValidator.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.validators;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.Valid;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.dapi.jalext.common.validator.ValidateLastNameInOrderService;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.util.DisruptionRepricingUtil;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Class is responsible to validate the service related
 * 
 * @author ysiva
 */
@Named
public class DisruptionRepricingServiceValidator {

  private static final String SITE_AVOID_LASTNAME_CHECK = "SITE_AVOID_LASTNAME_CHECK";

  private static final String UNABLE_TO_REPRICE_ORDER_MSG = "Unable to reprice order";

  private static final String UNABLE_TO_REPRICE_WRONG_BOUND_ID_TO_BE_DELETED_MSG =
      "Bound id to be deleted not found in order";

  private static final Integer UNABLE_TO_REPRICE_ORDER = 40568;

  private ACPRequestHandler acpRequestHandler;

  private Constraints constraints;

  private ValidateLastNameInOrderService validateLastNameInOrderService;

  /**
   * To inject required classes
   * 
   * @param acpRequestHandler
   *          acpRequestHandler
   * @param constraints
   *          constraints
   * @param validateLastNameInOrderService
   *          validateLastNameInOrderService
   */
  @Inject
  public DisruptionRepricingServiceValidator(ACPRequestHandler acpRequestHandler,
      Constraints constraints, ValidateLastNameInOrderService validateLastNameInOrderService) {
    this.acpRequestHandler = acpRequestHandler;
    this.constraints = constraints;
    this.validateLastNameInOrderService = validateLastNameInOrderService;
  }

  /**
   * Method to validate input required details
   * 
   * @param lastName
   *          lastName
   * @param corporateCodes
   *          corporateCodes
   * @param boundIdsToBeDeleted
   *          boundIdsToBeDeleted
   * @param showMilesPrice
   *          showMilesPrice
   * @param pnrReply
   *          pnrReply
   */
  public void validate(String lastName, Boolean showMilesPrice, List<String> corporateCodes,
      List<String> boundIdsToBeDeleted, @Valid PNR_Reply pnrReply) {
    if (pnrReply == null) {
      return;
    }
    validateLastName(lastName, pnrReply);
    validateDisruptedFlightPresent(boundIdsToBeDeleted, pnrReply);
    validateAwardParameters(showMilesPrice, corporateCodes);
  }

  private void validateAwardParameters(Boolean showMilesPrice, List<String> corporateCodes) {
    constraints
      .validate(constraints.validator(
          () -> Boolean.TRUE.equals(showMilesPrice) && CollectionUtils.isEmpty(corporateCodes),
          () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, UNABLE_TO_REPRICE_ORDER_MSG,
              UNABLE_TO_REPRICE_ORDER)));
  }

  /**
   * @param lastName
   * @param pnrReply
   */
  private void validateLastName(String lastName, PNR_Reply pnrReply) {
    boolean isAvoidLastNameCheck = acpRequestHandler.getBooleanValue(SITE_AVOID_LASTNAME_CHECK, true);
    validateLastNameInOrderService.validateLastNameInOrder(lastName, pnrReply, constraints, isAvoidLastNameCheck);
  }

  /**
   * @param boundIdsToBeDeleted
   * @param pnrReply
   */
  private void validateDisruptedFlightPresent(List<String> boundIdsToBeDeleted, PNR_Reply pnrReply) {
    constraints
        .validate(constraints.validator(
            () -> Boolean.FALSE.equals(DisruptionRepricingUtil.isDisruptionStatusCodesPresent(pnrReply))
                && CollectionUtils.isEmpty(boundIdsToBeDeleted),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, UNABLE_TO_REPRICE_ORDER_MSG,
                UNABLE_TO_REPRICE_ORDER)));
  }

  /**
   * Method to validate informative prices available or not, if not log the error
   * 
   * @param informativeRepricingResponse
   *          informativeRepricingResponse
   */
  public void validateInformativePricesAvailable(Ticket_RepricePNRWithBookingClassReply informativeRepricingResponse) {
    constraints
        .validate(constraints.validator(
            () -> informativeRepricingResponse == null || informativeRepricingResponse.getErrorMessage() != null,
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY,
                StringUtils.isNotEmpty(DisruptionRepricingUtil.getErrorWarningDescription(informativeRepricingResponse))
                    ? DisruptionRepricingUtil.getErrorWarningDescription(informativeRepricingResponse)
                    : UNABLE_TO_REPRICE_ORDER_MSG,
                UNABLE_TO_REPRICE_ORDER)));
  }

  /**
   * Method to validate given bound id exist or not, if not log the error
   * 
   * @param flightsHelper
   *          flightsHelper
   */
  public void validateRemoveBoundDetails(FlightsHelper flightsHelper) {
    constraints
        .validate(constraints.validator(
            () -> flightsHelper.isRemoveBound()  && flightsHelper.getBoundToRemoveSegmentsIds().isEmpty(),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY,
                UNABLE_TO_REPRICE_WRONG_BOUND_ID_TO_BE_DELETED_MSG,
                UNABLE_TO_REPRICE_ORDER)));
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\disruption\test\util\DisruptionRepricingServiceHelperTest.java

```
package com.amadeus.dapi.jalext.disruption.test.util;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.impl.disruption.reprice.builder.DisruptionRepriceRecommendationIdBuilder;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.AirOfferDictionaryViewJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.AirPricingRecordsViewJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.BoundsViewJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.DisruptionRepricingJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.ExchangePriceDetailsViewJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.TotalPricesViewJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.UnitPriceViewJsonResponseMapper;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirBoundExchangesResponse;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * TEst helper class to get required json and xml verb responses
 * 
 * @author ysiva
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public final class DisruptionRepricingServiceHelperTest {

  private static final String GET_ORDER_JSON = "Get_Order.json";
  
  private static final String GET_ORDER_FOR_AWARD_PNR_JSON = "Get_Order_For_Award_Pnr.json";
  
  private static final String GET_ORDER_FOR_DOMESTIC_PNR_JSON = "Get_Order_For_Domestic_Pnr.json";
  
  private static final String GET_ORDER_WITHOUT_DISRUPTION_JSON = "Get_Order_Without_Disruption.json";
  
  private static final String AIRBOUND_EXCHANGE_CONFIRMATION = "Airbound_Exchange_Confirmation.json";

  private DisruptionRepricingServiceHelperTest() {
    // to restrict instantiation
  }

  /**
   * Method to get order reply json response
   * 
   * @return orderReply
   */
  @Test
  public static OrderReply getOrderResponse() {
    OrderReply orderReply = Format.json()
        .parse(OrderReply.class, DisruptionRepricingServiceHelperTest.class, GET_ORDER_JSON);
    assertNotNull(orderReply);
    return orderReply;
  }

  /**
   * Method to get order reply for award pnr
   *
   * @return orderReply
   */
  @Test
  public static OrderReply getOrderResponseForAwardPnr() {
    OrderReply orderReply = Format.json()
        .parse(OrderReply.class, DisruptionRepricingServiceHelperTest.class, GET_ORDER_FOR_AWARD_PNR_JSON);
    assertNotNull(orderReply);
    return orderReply;
  }
  
   /**
   * Method to get order reply for domestic pnr
   *
   * @return orderReply
   */
  @Test
  public static OrderReply getOrderResponseForDomesticPnr() {
    OrderReply orderReply = Format.json()
        .parse(OrderReply.class, DisruptionRepricingServiceHelperTest.class, GET_ORDER_FOR_DOMESTIC_PNR_JSON);
    assertNotNull(orderReply);
    return orderReply;
  }

  /**
   * Method to get airbound exchange confirmation json response
   *
   * @return OrderAirBoundExchangesResponse
   */
  @Test
  public static OrderAirBoundExchangesResponse getOrderAirBoundExchangeConfirmationResponse() {
    OrderAirBoundExchangesResponse confirmationResponse = Format.json()
        .parse(OrderAirBoundExchangesResponse.class, DisruptionRepricingServiceHelperTest.class,
            AIRBOUND_EXCHANGE_CONFIRMATION);
    assertNotNull(confirmationResponse);
    return confirmationResponse;
  }

  /**
   * Method to get TARIPQ formatted response
   * 
   * @param xmlName
   *          xmlName
   * @return TARIPQ Response
   */
  @Test
  public static Ticket_RepricePNRWithBookingClassReply getTARIPQResponse(String xmlName) {
    Ticket_RepricePNRWithBookingClassReply reply = Format.xml()
        .parse(Ticket_RepricePNRWithBookingClassReply.class, DisruptionRepricingServiceHelperTest.class, xmlName);
    assertNotNull(reply);
    return reply;
  }

  /**
   * Method to get PNR_Reply formatted response
   * 
   * @param xmlName
   *          xmlName
   * @return PNRReply
   */
  @Test
  public static PNR_Reply getPNRReply(String xmlName) {    
    PNR_Reply pnrReply = Format.xml().parse(PNR_Reply.class, DisruptionRepricingServiceHelperTest.class, xmlName);
    assertNotNull(pnrReply);    
    return pnrReply;
  }

  /**
   * Method to return order reply view from Json
   * 
   * @return OrderReplyView
   */
  @Test
  public static OrderReplyView getOrderReplyView() {
    OrderReplyView orderReplyView = Format.json().parse(OrderReplyView.class,
        DisruptionRepricingServiceHelperTest.class, GET_ORDER_JSON);
    assertNotNull(orderReplyView);
    return orderReplyView;
  }

  /**
   * Method to return AirPricingRecordsViewJsonResponseMapper
   * 
   * @return AirPricingRecordsViewJsonResponseMapper
   */
  @Test
  public static AirPricingRecordsViewJsonResponseMapper getAirPricingRecordsViewJsonResponseMapper() {
    UnitPriceViewJsonResponseMapper unitPriceViewJsonResponseMapper = new UnitPriceViewJsonResponseMapper();
    TotalPricesViewJsonResponseMapper totalPricesViewJsonResponseMapper = new TotalPricesViewJsonResponseMapper();
    ExchangePriceDetailsViewJsonResponseMapper exchangePriceDetailsViewJsonResponseMapper = new ExchangePriceDetailsViewJsonResponseMapper();
    AirPricingRecordsViewJsonResponseMapper mapper = new AirPricingRecordsViewJsonResponseMapper(
        unitPriceViewJsonResponseMapper, totalPricesViewJsonResponseMapper,
        exchangePriceDetailsViewJsonResponseMapper);
    assertNotNull(mapper);
    return mapper;
  }

  /**
   * Method to return instantiated DisruptionRepricingJsonResponseMapper object
   * 
   * @return DisruptionRepricingJsonResponseMapper
   */
  @Test
  public static DisruptionRepricingJsonResponseMapper getDisruptionRepricingJsonResponseMapper() {
    AirPricingRecordsViewJsonResponseMapper airPricingRecordsViewJsonResponseMapper = getAirPricingRecordsViewJsonResponseMapper();
    BoundsViewJsonResponseMapper boundsViewJsonResponseMapper = new BoundsViewJsonResponseMapper();
    AirOfferDictionaryViewJsonResponseMapper airOfferDictionaryViewJsonResponseMapper = new AirOfferDictionaryViewJsonResponseMapper();
    DisruptionRepriceRecommendationIdBuilder disruptionRepriceRecommendationIdBuilder = new DisruptionRepriceRecommendationIdBuilder();
    DisruptionRepricingJsonResponseMapper mapper = new DisruptionRepricingJsonResponseMapper(
        airPricingRecordsViewJsonResponseMapper, boundsViewJsonResponseMapper,
        airOfferDictionaryViewJsonResponseMapper, disruptionRepriceRecommendationIdBuilder);
    assertNotNull(mapper);
    return mapper;
  }
  
  /**
   * Method to return order reply view from Json
   * 
   * @return OrderReplyView
   */
  @Test
  public static OrderReply getWithoutDisruptionReply() {
    OrderReply disruptionReply = Format.json().parse(OrderReply.class, DisruptionRepricingServiceHelperTest.class,
        GET_ORDER_WITHOUT_DISRUPTION_JSON);
    assertNotNull(disruptionReply);
    return disruptionReply;
  }  
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\endpoint\MockPnrRetrieveEndpoint.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.endpoint;

import com.amadeus.dapi.jalext.common.endpoint.PnrRetrieveEndpoint;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.pnrret_19_1_1a.PNR_Retrieve;

/**
 * To mock PnrRetrieveEndpoint class to avoid real calls
 * 
 * @author ysiva
 */
public class MockPnrRetrieveEndpoint implements PnrRetrieveEndpoint {

  private PNR_Reply pnrReply;

  /**
   * Constructor to inject pnrReply
   * 
   * @param pnrReply
   *          pnrReply
   */
  public MockPnrRetrieveEndpoint(PNR_Reply pnrReply) {
    this.pnrReply = pnrReply;
  }

  @Override
  public PNR_Reply retrievePNR(PNR_Retrieve pnrRetrieveRequest) {
    return pnrReply;
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\endpoint\MockTicketRepricePNRWithBookingClassEndpoint.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.endpoint;

import com.amadeus.dapi.jalext.common.endpoint.TicketRepricePNRWithBookingClassEndpoint;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * To mock the TicketRepricePNRWithBookingClassEndpoint class to avoid the real calls
 * 
 * @author ysiva
 *
 */
public class MockTicketRepricePNRWithBookingClassEndpoint implements TicketRepricePNRWithBookingClassEndpoint {

  private Ticket_RepricePNRWithBookingClassReply ticketRepricePNRWithBookingClassReply;

  /**
   * Constructor to inject ticketRepricePNRWithBookingClassReply
   * 
   * @param ticketRepricePNRWithBookingClassReply
   *          ticketRepricePNRWithBookingClassReply
   */
  public MockTicketRepricePNRWithBookingClassEndpoint(
      Ticket_RepricePNRWithBookingClassReply ticketRepricePNRWithBookingClassReply) {
    this.ticketRepricePNRWithBookingClassReply = ticketRepricePNRWithBookingClassReply;
  }

  @Override
  public Ticket_RepricePNRWithBookingClassReply getRepricePNR(Ticket_RepricePNRWithBookingClass request) {
    return ticketRepricePNRWithBookingClassReply;
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirOfferDictionaryViewJsonResponseMapperTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.jal.dapi.model.core.AirOfferDictionaryView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;

/**
 * Method to test AirOfferDictionaryViewJsonResponseMapper.java class
 * 
 * @author ysiva
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AirOfferDictionaryViewJsonResponseMapperTest {

  @InjectMocks
  private AirOfferDictionaryViewJsonResponseMapper airOfferDictionaryViewJsonResponseMapper;

  @Mock
  private FlightsHelper flightsHelper;

  @Test
  public void testMapDictionary() {
    airOfferDictionaryViewJsonResponseMapper = new AirOfferDictionaryViewJsonResponseMapper();
    OrderReplyView orderReplyView = DisruptionRepricingServiceHelperTest.getOrderReplyView();
    DisruptionRepricingReplyView disruptionRepricingReplyView = new DisruptionRepricingReplyView();
    Mockito.when(flightsHelper.getFlightIds()).thenReturn(Stream.of("ST1", "ST2").collect(Collectors.toSet()));
    Mockito.when(flightsHelper.getFlightStatusCodes()).thenReturn(Stream.of("TK", "HK").collect(Collectors.toSet()));
    airOfferDictionaryViewJsonResponseMapper.mapDictionary(orderReplyView, disruptionRepricingReplyView, flightsHelper);
    AirOfferDictionaryView dictionaries = disruptionRepricingReplyView.getDictionaries();
    assertTrue(dictionaries != null);
    assertEquals(2, dictionaries.getFlight().size());
    assertEquals(2, dictionaries.getBookingStatus().size());
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirPricingRecordsViewJsonResponseMapperTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingReplyDataView;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * Class to test AirPricingRecordsViewJsonResponseMapperTest.class
 * 
 * @author ysiva
 *
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AirPricingRecordsViewJsonResponseMapperTest {

  @InjectMocks
  private AirPricingRecordsViewJsonResponseMapper airPricingRecordsViewJsonResponseMapper;

  @Test
  public void testMapPricesView() {
    airPricingRecordsViewJsonResponseMapper = DisruptionRepricingServiceHelperTest
        .getAirPricingRecordsViewJsonResponseMapper();
    Ticket_RepricePNRWithBookingClassReply reply = DisruptionRepricingServiceHelperTest
        .getTARIPQResponse("TARIPR_Response.xml");
    DisruptionRepricingReplyDataView disruptionRepricingReplyDataView = new DisruptionRepricingReplyDataView();
    airPricingRecordsViewJsonResponseMapper.mapPricesView(reply, disruptionRepricingReplyDataView, false);
    assertNotNull(disruptionRepricingReplyDataView.getPrices());
    assertNotNull(disruptionRepricingReplyDataView.getBounds());
    assertNull(disruptionRepricingReplyDataView.getWaiverCodes());
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\DisruptionRepricingJsonResponseMapperTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import javax.ws.rs.core.Response;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.jal.dapi.mapper.OrderReplyMapper;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.xml.taripr_19_1_1a.Ticket_RepricePNRWithBookingClassReply;

/**
 * To test the DisruptionRepricingJsonResponseMapper.java class
 * 
 * @author ysiva
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DisruptionRepricingJsonResponseMapperTest {

  @InjectMocks
  private DisruptionRepricingJsonResponseMapper disruptionRepricingJsonResponseMapper;

  @Mock
  private OrderReplyMapper orderReplyMapper;

  /**
   * To test mappers
   */
  @Test
  public void testMapper() {
    disruptionRepricingJsonResponseMapper = DisruptionRepricingServiceHelperTest
        .getDisruptionRepricingJsonResponseMapper();
    Ticket_RepricePNRWithBookingClassReply reply = DisruptionRepricingServiceHelperTest
        .getTARIPQResponse("TARIPR_Response.xml");
    OrderReplyView replyView = DisruptionRepricingServiceHelperTest.getOrderReplyView();
    Response response = disruptionRepricingJsonResponseMapper.buildDisruptionRepricingResponse(reply, replyView,
        new FlightsHelper(), new AwardFareHelper());
    assertNotNull(response);
    assertEquals(200, response.getStatus());
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\TicketRepricePNRWithBookingClassQueryBuilderTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.mapper;

import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class TicketRepricePNRWithBookingClassQueryBuilderTest {

  @InjectMocks
  private TicketRepricePNRWithBookingClassQueryBuilder ticketRepricePNRWithBookingClassQueryBuilder;

  @Mock
  private DataRepositoryHelper dataRepositoryHelper;

  @Mock
  private AwardFareHelper awardFareHelper;

  @Test
  public void buildRequest_ShouldReturnOnlyETickets_AndNotEmds() {
    OrderReply orderReply = DisruptionRepricingServiceHelperTest.getOrderResponseForDomesticPnr();
    PNR_Reply pnrReply = DisruptionRepricingServiceHelperTest.getPNRReply("PNR_Reply.xml");

    Ticket_RepricePNRWithBookingClass result = ticketRepricePNRWithBookingClassQueryBuilder.buildRequest(orderReply,
            new FlightsHelper(), pnrReply, dataRepositoryHelper, awardFareHelper);

    assertNotNull(result);
    assertEquals(2, result.getExchangeInformationGroup().stream().count());
    assertEquals(false, result.getExchangeInformationGroup().stream().anyMatch(element -> element.getDocumentInfoGroup().get(0)
            .getPaperticketDetailsLastCoupon().getDocumentDetails().getNumber().equals("1312135566813")));
    assertEquals(true, result.getExchangeInformationGroup().stream().anyMatch(element -> element.getDocumentInfoGroup().get(0)
            .getPaperticketDetailsLastCoupon().getDocumentDetails().getNumber().equals("1312135566811")));
    assertEquals(true, result.getExchangeInformationGroup().stream().anyMatch(element -> element.getDocumentInfoGroup().get(0)
            .getPaperticketDetailsLastCoupon().getDocumentDetails().getNumber().equals("1312135566812")));
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingConfirmationServiceTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.ws.rs.core.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.dapi.jalext.impl.disruption.reprice.validators.DisruptionRepricingConfirmationServiceValidator;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Messages;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirBoundExchangesResponse;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirExchangeRequest;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingConfirmationRequestView;
import com.amadeus.middleware.rfd.CannedMessage;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

/**
 * Test class to test methods in DisruptionRepricingConfirmationService.java class
 * 
 * @author ysiva
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DisruptionRepricingConfirmationServiceTest {

  @InjectMocks
  private DisruptionRepricingConfirmationService disruptionRepricingConfirmationService;

  @Mock
  private DapiClient dapiClient;

  @Mock
  private RestJsonResponseParser restParser;

  @Mock
  private RfdCannedMessageRepository cannedMessageRepository;

  @Mock
  private DisruptionRepricingConfirmationRequestView disruptionRepricingConfirmationRequest;

  @Mock
  private Response response;

  @Mock
  private CannedMessage cannedMessage;

  private static final String ORDER_ID = "W4DLIP";

  private static final String LANGUAGE = "EN";

  private static final String LAST_NAME = "Tata";

  private static final String FIRST_NAME = "Ekojuroku";

  private static final String BOUND_ID_1 = "Q25zS0FURVNkZ29rQ2gweU1ESXhMVEExTFRJd1ZEQTFPak13T2pBd0xqQXdNQ3N3T1Rvd01C"
      + "SURTVlJORWdGWkdpUUtIVEl3TWpFdE1EVXRNakJVTURRNk16QTZNREF1TURBd0t6QTVPakF3RWdOSVRrUWlEZ29IV1V4QlVsUmFUeElEVUZ"
      + "ReEtnSktURElFTVRReE5qb0ROemN6ZUFHQ0FRTlRWRE1TRkFvTk1UTXhNVFE1T1RrME9UWTRNUklEVUZReEdqc0tIQW9GTkRZMk1EQVNCRE"
      + "V4TURBYUJUUTNOekF3SWdOS1VGa3FBVEFTR3dvSkNnRXdFZ0V3R2dFd0VnRXdHZ0V3SWdnS0FUQVNBMHBRV1E9PQ==";

  private static final String BOUND_ID_2 = "Q25zS0FURVNkZ29rQ2gweU1ESXhMVEExTFRJd1ZEQTFPak13T2pBd0xqQXdNQ3N3T1Rvd01C"
      + "SURTVlJORWdGWkdpUUtIVEl3TWpFdE1EVXRNakJVTURRNk16QTZNREF1TURBd0t6QTVPakF3RWdOSVRrUWlEZ29IV1V4QlVsUmFUeElEVUZ"
      + "ReEtnSktURElFTVRReE5qb0ROemN6ZUFHQ0FRTlRWRE1LZWdvQk1oSjFDaVFLSFRJd01qRXRNRFV0TWpWVU1EZzZOREE2TURBdU1EQXdLek"
      + "E1T2pBd0VnTklUa1FTQVZrYUpBb2RNakF5TVMwd05TMHlOVlF3Tnpvek1Eb3dNQzR3TURBck1EazZNREFTQTBsVVRTSU9DZ2RaVEVGU1ZGc"
      + "FBFZ05RVkRFcUFrcE1NZ014TURRNkF6YzRPSGdCZ2dFRFUxUTBFaFFLRFRFek1URTBPVGs1TkRrMk9ERVNBMUJVTVJvN0Nod0tCVFEyTmpB"
      + "d0VnUXhNVEF3R2dVME56Y3dNQ0lEU2xCWktnRXdFaHNLQ1FvQk1CSUJNQm9CTUJJQk1Cb0JNQ0lJQ2dFd0VnTktVRms9";

  private static final String INVALID_BOUND_ID = "Q25zS0FURVNkZ29rQ2gweU1ESXhMVEExTFRJd1ZEQTFPak13T2pBd0xqQXd";

  @BeforeEach
  public void setUp() {
    Constraints constraints = new Constraints(new ConstraintViolationFactoryImpl());
    DisruptionRepricingConfirmationServiceValidator disruptionRepricingConfirmationServiceValidator = new DisruptionRepricingConfirmationServiceValidator(
        constraints);
    disruptionRepricingConfirmationService = new DisruptionRepricingConfirmationService(dapiClient, restParser,
        disruptionRepricingConfirmationServiceValidator, cannedMessageRepository);
  }

  @Test
  public void testHanldeRequest() {
    OrderAirBoundExchangesResponse reply = DisruptionRepricingServiceHelperTest
        .getOrderAirBoundExchangeConfirmationResponse();
    List<String> airBoundIds = Stream.of(BOUND_ID_1, BOUND_ID_2).collect(Collectors.toList());
    Mockito.when(disruptionRepricingConfirmationRequest.getAirBoundIds()).thenReturn(airBoundIds);
    Mockito
        .when(dapiClient.airBoundExchangesConfirmation(any(OrderAirExchangeRequest.class), anyString(),
            anyString(), anyString(), anyString()))
        .thenReturn(response);
    Mockito.when(restParser.parse(response, OrderAirBoundExchangesResponse.class)).thenReturn(reply);
    Response confirmationResponse = disruptionRepricingConfirmationService.handleRequest(
        disruptionRepricingConfirmationRequest, ORDER_ID, LANGUAGE,
        LAST_NAME, FIRST_NAME);
    assertNotNull(confirmationResponse);
    assertEquals(200, confirmationResponse.getStatus());
  }

  @Test
  public void testExceptionThrown() {
    List<String> airBoundIds = Stream.of(BOUND_ID_1, BOUND_ID_2).collect(Collectors.toList());
    Mockito.when(disruptionRepricingConfirmationRequest.getAirBoundIds()).thenReturn(airBoundIds);
    Mockito.when(dapiClient.airBoundExchangesConfirmation(any(OrderAirExchangeRequest.class), anyString(),
        anyString(), anyString(), anyString()))
        .thenThrow(new RuntimeException());
    Response orderResponse = disruptionRepricingConfirmationService.handleRequest(
        disruptionRepricingConfirmationRequest, ORDER_ID, LANGUAGE,
        LAST_NAME, FIRST_NAME);
    Messages messages = (Messages)orderResponse.getEntity();
    assertEquals(1, messages.getErrors().size());
  }

  @Test
  public void testConstraintViolationThrown() {
    List<String> airBoundIds = Stream.of(INVALID_BOUND_ID).collect(Collectors.toList());
    Mockito.when(disruptionRepricingConfirmationRequest.getAirBoundIds()).thenReturn(airBoundIds);
    Mockito.when(cannedMessage.getText()).thenReturn("Violation Thrown");
    Mockito.when(cannedMessageRepository.getCannedMessage(any(Long.class), anyString())).thenReturn(cannedMessage);
    Response orderResponse = disruptionRepricingConfirmationService.handleRequest(
        disruptionRepricingConfirmationRequest, ORDER_ID, LANGUAGE,
        LAST_NAME, FIRST_NAME);
    Messages messages = (Messages)orderResponse.getEntity();
    assertEquals(1, messages.getErrors().size());
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingServiceTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import javax.ws.rs.core.Response;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.dapi.jalext.common.service.PNRRetrieveService;
import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.DisruptionRepricingJsonResponseMapper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.mapper.TicketRepricePNRWithBookingClassQueryBuilder;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.AwardFareHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.model.FlightsHelper;
import com.amadeus.dapi.jalext.impl.disruption.reprice.validators.DisruptionRepricingServiceValidator;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Messages;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.mapper.OrderReplyMapper;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml.taripq_19_1_1a.Ticket_RepricePNRWithBookingClass;

/**
 * Test class to test methods in DisruptionRepricingService.java class
 * 
 * @author ysiva
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DisruptionRepricingServiceTest {

	@Mock
	private DapiClient dapiClient;

	@Mock
	private XmlWebservicesClient webservicesClient;

	@Mock
	private ClientConversationHandler clientConversationHandler;

	@Mock
	private ClientConversationHandlerFactory clientConversationHandlerFactory;

	@Mock
	private RestJsonResponseParser restParser;

	@Mock
	private Response response;

	@InjectMocks
	private DisruptionRepricingService disruptionRepricingService;

	@Mock
	private TicketRepricePNRWithBookingClassQueryBuilder ticketRepricePNRWithBookingClassQueryBuilder;

	@Mock
	private Ticket_RepricePNRWithBookingClass ticketRepricePNRWithBookingClass;

	@Mock
	private OrderReply orderReply;

	@Mock
	private OrderReplyMapper orderReplyMapper;

	@Mock
	private PNRRetrieveService pnrRetrieveService;

	@Mock
	private ClientConversationHandler handler;

	@Mock
	private DisruptionRepricingServiceValidator disruptionRepricingServiceValidator;

	@Mock
	private RfdCannedMessageRepository cannedMessageRepository;

	@Mock
	private FlightsHelper flightsHelper;

  @Mock
  private AwardFareHelper awardFareHelper;

	@Mock
	private DataRepositoryHelper dataRepositoryHelper;

	private static final String TARIPR_XML_NAME = "TARIPR_Response.xml";

	private static final String PNR_REPLY_XML_NAME = "PNR_Reply.xml";

  private static final String TARIPR_CANCEL_BOUND_XML_NAME = "TARIPR_Cancel_Bound_Response.xml";

  private static final String PNR_CANCEL_BOUND_REPLY_XML_NAME = "PNR_For_Cancel_Bound_Reply.xml";

	private static final String ORDER_ID = "W4DLIP";

	private static final String LANGUAGE = "EN";

	private static final String LAST_NAME = "Tata";

  private static final String FIRST_NAME = "Ekojuroku";

  private static final String AWARD_FARE_TARIPR_XML_NAME = "AwardFare_TARIPR_Response.xml";

  private static final String AWARD_FARE_PNR_REPLY_XML_NAME = "AwardFare_PNR_Reply.xml";

  private static final String AWARD_FARE_ORDER_ID = "5K6WE5";

  private static final String AWARD_FARE_LAST_NAME = "Ichiei";

  private static final String AWARD_FARE_FIRST_NAME = "Sanjuichimr";

  private static final List<String> corporateCodes = Arrays.asList("273212");
  
  private static final List<String> REMOVE_BOUND_IDS = Arrays.asList("2");;

	@BeforeEach
	public void setUp() {
		disruptionRepricingService = getDisruptionRepricingService();
	}

	@Test
	public void testHandleRequest() {
		OrderReply reply = DisruptionRepricingServiceHelperTest.getOrderResponse();
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
				.thenReturn(clientConversationHandler);
		Mockito.when(pnrRetrieveService.getPNRResponse(anyString(), any(ClientConversationHandler.class)))
				.thenReturn(Optional.of(DisruptionRepricingServiceHelperTest.getPNRReply(PNR_REPLY_XML_NAME)));
		Mockito.when(dapiClient.getOrder(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME, false)).thenReturn(response);
		Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(reply);
		OrderReplyView replyView = DisruptionRepricingServiceHelperTest.getOrderReplyView();
		Mockito.when(orderReplyMapper.create(reply)).thenReturn(replyView);
		Mockito.when(ticketRepricePNRWithBookingClassQueryBuilder.buildRequest(reply, flightsHelper,
				DisruptionRepricingServiceHelperTest.getPNRReply(PNR_REPLY_XML_NAME), dataRepositoryHelper, awardFareHelper))
				.thenReturn(ticketRepricePNRWithBookingClass);
		Mockito.when(webservicesClient.getPNRDetails(anyString(), any(ClientConversationHandler.class)))
				.thenReturn(DisruptionRepricingServiceHelperTest.getPNRReply(PNR_REPLY_XML_NAME));
		Mockito.when(webservicesClient.informativePricingMethod(any(Ticket_RepricePNRWithBookingClass.class),
				any(ClientConversationHandler.class)))
				.thenReturn(DisruptionRepricingServiceHelperTest.getTARIPQResponse(TARIPR_XML_NAME));
		Response orderResponse = disruptionRepricingService.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
				false, null, null,dataRepositoryHelper);
		assertNotNull(orderResponse);
		assertEquals(200, orderResponse.getStatus());
	}

  @Test
  public void testAwardFareRequest() {
    OrderReply reply = DisruptionRepricingServiceHelperTest.getOrderResponseForAwardPnr();
    Mockito.when(awardFareHelper.isAwardFareRequested()).thenReturn(true);
    Mockito.when(awardFareHelper.getCorporateCodes()).thenReturn(corporateCodes);
    Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
        .thenReturn(clientConversationHandler);
    Mockito.when(pnrRetrieveService.getPNRResponse(anyString(), any(ClientConversationHandler.class)))
        .thenReturn(Optional.of(DisruptionRepricingServiceHelperTest.getPNRReply(AWARD_FARE_PNR_REPLY_XML_NAME)));
    Mockito.when(dapiClient.getOrder(AWARD_FARE_ORDER_ID, LANGUAGE, AWARD_FARE_LAST_NAME, AWARD_FARE_FIRST_NAME, false))
        .thenReturn(response);
    Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(reply);
    OrderReplyView replyView = DisruptionRepricingServiceHelperTest.getOrderReplyView();
    Mockito.when(orderReplyMapper.create(reply)).thenReturn(replyView);
    Mockito.when(ticketRepricePNRWithBookingClassQueryBuilder.buildRequest(reply, flightsHelper,
        DisruptionRepricingServiceHelperTest.getPNRReply(AWARD_FARE_PNR_REPLY_XML_NAME), dataRepositoryHelper,
        awardFareHelper))
        .thenReturn(ticketRepricePNRWithBookingClass);
    Mockito.when(webservicesClient.getPNRDetails(anyString(), any(ClientConversationHandler.class)))
        .thenReturn(DisruptionRepricingServiceHelperTest.getPNRReply(AWARD_FARE_PNR_REPLY_XML_NAME));
    Mockito.when(webservicesClient.informativePricingMethod(any(Ticket_RepricePNRWithBookingClass.class),
        any(ClientConversationHandler.class)))
        .thenReturn(DisruptionRepricingServiceHelperTest.getTARIPQResponse(AWARD_FARE_TARIPR_XML_NAME));
    Response orderResponse = disruptionRepricingService.handleRequest(AWARD_FARE_ORDER_ID, LANGUAGE,
        AWARD_FARE_LAST_NAME, AWARD_FARE_FIRST_NAME, true, corporateCodes, null, dataRepositoryHelper);
    assertNotNull(orderResponse);
    assertEquals(200, orderResponse.getStatus());
  }

	@Test
	public void testExceptionThrown() {
		Mockito.when(dapiClient.getOrder(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME, false))
				.thenThrow(new RuntimeException());
		Response orderResponse = disruptionRepricingService.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
				false, null, null, dataRepositoryHelper);
		Messages messages = (Messages) orderResponse.getEntity();
		assertEquals(1, messages.getErrors().size());
	}
	
  @Test
  public void testPartialBoundCancelRequest() {
    OrderReply reply = DisruptionRepricingServiceHelperTest.getOrderResponseForDomesticPnr();
    Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
        .thenReturn(clientConversationHandler);
    Mockito.when(pnrRetrieveService.getPNRResponse(anyString(), any(ClientConversationHandler.class)))
        .thenReturn(Optional.of(DisruptionRepricingServiceHelperTest.getPNRReply(PNR_CANCEL_BOUND_REPLY_XML_NAME)));
    Mockito.when(dapiClient.getOrder(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME, false)).thenReturn(response);
    Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(reply);
    OrderReplyView replyView = DisruptionRepricingServiceHelperTest.getOrderReplyView();
    Mockito.when(orderReplyMapper.create(reply)).thenReturn(replyView);

    Mockito.when(flightsHelper.isRemoveBound()).thenReturn(true);
    Set<String> boundToRemoveSegmentsIds = new HashSet<>();
    boundToRemoveSegmentsIds.add("ST2");
    Mockito.when(flightsHelper.getBoundToRemoveSegmentsIds()).thenReturn(boundToRemoveSegmentsIds);
    Mockito.when(ticketRepricePNRWithBookingClassQueryBuilder.buildRequest(reply, flightsHelper,
        DisruptionRepricingServiceHelperTest.getPNRReply(PNR_CANCEL_BOUND_REPLY_XML_NAME), dataRepositoryHelper,
        awardFareHelper))
        .thenReturn(ticketRepricePNRWithBookingClass);
    Mockito.when(webservicesClient.getPNRDetails(anyString(), any(ClientConversationHandler.class)))
        .thenReturn(DisruptionRepricingServiceHelperTest.getPNRReply(PNR_CANCEL_BOUND_REPLY_XML_NAME));
    Mockito.when(webservicesClient.informativePricingMethod(any(Ticket_RepricePNRWithBookingClass.class),
        any(ClientConversationHandler.class)))
        .thenReturn(DisruptionRepricingServiceHelperTest.getTARIPQResponse(TARIPR_CANCEL_BOUND_XML_NAME));
    Response orderResponse = disruptionRepricingService.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
        false, null, REMOVE_BOUND_IDS, dataRepositoryHelper);
    assertNotNull(orderResponse);
    assertEquals(200, orderResponse.getStatus());
  }

	private DisruptionRepricingService getDisruptionRepricingService() {
		DisruptionRepricingJsonResponseMapper disruptionRepricingJsonResponseMapper = DisruptionRepricingServiceHelperTest
				.getDisruptionRepricingJsonResponseMapper();
		return new DisruptionRepricingService(dapiClient, webservicesClient, clientConversationHandlerFactory,
				restParser, disruptionRepricingJsonResponseMapper, orderReplyMapper,
				disruptionRepricingServiceValidator, cannedMessageRepository);
	}
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingConfirmationServiceValidatorTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.validators;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.validation.ConstraintViolationException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolation;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DisruptionRepricingConfirmationServiceValidatorTest {

  @InjectMocks
  private DisruptionRepricingConfirmationServiceValidator disruptionRepricingConfirmationServiceValidator;

  @Mock
  private ACPRequestHandler acpRequestHandler;

  private AmadeusConstraintViolation<?> violations;

  private static final String INVALID_BOUND_ID = "Q25zS0FURVNkZ29rQ2gweU1ESXhMVEExTFRJd1ZEQTFPak13T2pBd0xqQXd";

  private static final int INVALID_AIRBOUND_ID = 39445;

  private static final String BOUND_ID_1 = "Q253S0FURVNkd29rQ2gweU1ESXlMVEV4TFRFMVZEQTFPak13T2pBd0xqQXdNQ3N3T1Rvd01C"
      + "SURTVlJORWdGVkdpUUtIVEl3TWpJdE1URXRNVFZVTURRNk5ESTZNREF1TURBd0t6QTVPakF3RWdOSVRrUWlEd29JVlRCQlFVSkJUMDhTQTF"
      + "CVU1Tb0NTa3d5QkRFME1UZzZBemMzTTNnQmdnRURVMVF6RWhRS0RURXpNVEkwTkRBME1qQXpNRFFTQTFCVU1ScEdDaGNLQVRBU0JERTBNak"
      + "FhQkRFME1qQWlBMHBRV1NvQk1CSWJDZ2tLQVRBU0FUQWFBVEFTQVRBYUFUQWlDQW9CTUJJRFNsQlpRZzRLQ1FvQk1CSUJNQm9CTUJvQk1HS"
      + "VBDZ0pLVENJSk56Y3dNREk1TURNeG1BRUJvZ0VHTWpjek1qRXlvZ0VHUVZkQlVrUTE=";

  private static final String BOUND_ID_2 = "Q25zS0FUSVNkZ29rQ2gweU1ESXlMVEV4TFRFMlZEQTRPakUxT2pBd0xqQXdNQ3N3T1Rvd01C"
      + "SURTRTVFRWdGVkdpUUtIVEl3TWpJdE1URXRNVFpVTURjNk1UQTZNREF1TURBd0t6QTVPakF3RWdOSlZFMGlEd29JVlRCQlFVSkJUMDhTQTF"
      + "CVU1Tb0NTa3d5QXpFd01qb0ROemc0ZUFHQ0FRTlRWREppRHdvQ1Nrd2lDVGMzTURBeU9UQXpNWmdCQWFJQkJqSTNNekl4TXFJQkJrRlhRVk"
      + "pFTlE9PQ==";

  @BeforeEach
  public void setUp() {
    Constraints constraints = new Constraints(new ConstraintViolationFactoryImpl());
    disruptionRepricingConfirmationServiceValidator = new DisruptionRepricingConfirmationServiceValidator(constraints);
  }

  /**
   * Test to assert proper error code populated if air bound is invalid
   */
  @Test
  public void testAirBoundIdInvalid() {
    List<String> airBoundIds = Stream.of(INVALID_BOUND_ID).collect(Collectors.toList());
    violations = runValidatorAndGetError(airBoundIds);
    assertNotNull(violations);
    assertEquals(INVALID_AIRBOUND_ID, violations.getCanMessageNumber());
  }

  /**
   * Test to assert no error code populated if air bound are valid
   */
  @Test
  public void testAirBoundIdvalid() {
    List<String> airBoundIds = Stream.of(BOUND_ID_1, BOUND_ID_2).collect(Collectors.toList());
    violations = runValidatorAndGetError(airBoundIds);
    assertNull(violations);
  }

  /**
   * Method to validate the request and get the error from constraint
   * 
   * @param airBoundIds
   * @return
   */
  private AmadeusConstraintViolation<?>
      runValidatorAndGetError(List<String> airBoundIds) {
    try {
      disruptionRepricingConfirmationServiceValidator.validateRequest(airBoundIds);
    } catch (ConstraintViolationException e) {
      violations = (AmadeusConstraintViolation)e.getConstraintViolations()
          .toArray()[0];
    }
    return violations;
  }
}

```

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingServiceValidatorTest.java

```
package com.amadeus.dapi.jalext.impl.disruption.reprice.validators;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyString;

import java.util.List;

import javax.validation.ConstraintViolationException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.dapi.jalext.common.validator.ValidateLastNameInOrderService;
import com.amadeus.dapi.jalext.disruption.test.util.DisruptionRepricingServiceHelperTest;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolation;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.xml.pnracc_19_1_1a.PNR_Reply;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DisruptionRepricingServiceValidatorTest {

  @InjectMocks
  private DisruptionRepricingServiceValidator disruptionRepricingServiceValidator;

  @Mock
  private ACPRequestHandler acpRequestHandler;
  
  private AmadeusConstraintViolation<?> violations;

  private static final String LASTNAME = "TEST";

  private static final Integer UNABLE_TO_REPRICE_ORDER = 40568;

  @BeforeEach
  public void setUp() {
    Constraints constraints = new Constraints(new ConstraintViolationFactoryImpl());
    ValidateLastNameInOrderService validateLastNameInOrderService = new ValidateLastNameInOrderService();
    disruptionRepricingServiceValidator = new DisruptionRepricingServiceValidator(acpRequestHandler, constraints,
        validateLastNameInOrderService);
  }

  /**
   * Test to assert proper error code populated if segments are not disrupted
   */
  @Test
  public void testIfSegmentsNotDisrupted() {
    Mockito.when(acpRequestHandler.getBooleanValue(anyString(), anyBoolean())).thenReturn(true);
    PNR_Reply pnrReply = DisruptionRepricingServiceHelperTest.getPNRReply("PNR_Reply.xml");
    violations = runValidatorAndGetError(LASTNAME, pnrReply, false, null, null);
    assertNotNull(violations);
    assertEquals(UNABLE_TO_REPRICE_ORDER, violations.getCanMessageNumber());
  }

  /**
   * Test to assert proper error code populated if corporate codes are missing in award fare request
   */
  @Test
  public void testAwardFareRequestWithoutCorporateCodes() {
    Mockito.when(acpRequestHandler.getBooleanValue(anyString(), anyBoolean())).thenReturn(true);
    PNR_Reply pnrReply = DisruptionRepricingServiceHelperTest.getPNRReply("AwardFare_PNR_Reply.xml");
    violations = runValidatorAndGetError(LASTNAME, pnrReply, true, null, null);
    assertNotNull(violations);
    assertEquals(UNABLE_TO_REPRICE_ORDER, violations.getCanMessageNumber());
  }

  /**
   * Method to validate the request and get the error from constraint
   * 
   * @param lastName
   * @param pnrReply
   * @return
   */
  private AmadeusConstraintViolation<?>
      runValidatorAndGetError(String lastName, PNR_Reply pnrReply, Boolean showMilesPrice, List<String> corporateCodes,
       List<String> boundIdsToBeDeleted) {
    try {
      disruptionRepricingServiceValidator.validate(lastName, showMilesPrice, corporateCodes, boundIdsToBeDeleted,
          pnrReply);
    } catch (ConstraintViolationException e) {
      violations = (AmadeusConstraintViolation)e.getConstraintViolations()
          .toArray()[0];
    }
    return violations;
  } 
}

```

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Airbound_Exchange_Confirmation.json

```
{
	"warnings": [
		{
			"code": "37184",
			"title": "UNABLE TO CREATE A TRAVEL DOCUMENT",
			"detail": "ISSUANCE OF INTERNATIONAL DOCUMENT NOT PERMITTED"
		}
	],
	"data": {
		"order": {
			"id": "5F6RJG",
			"creationPointOfSale": {
				"pointOfSaleId": "TYOJL08QQ",
				"countryCode": "JP"
			},
			"creationDateTime": "2022-08-31T16:44:00.000Z",
			"lastModificationDateTime": "2022-08-31T18:15:00.000Z",
			"isGroupBooking": false,
			"tags": [
				"domestic"
			],
			"air": {
				"prices": {
					"unitPrices": [
						{
							"travelerIds": [
								"PT1"
							],
							"flightIds": [
								"ST5",
								"ST2"
							],
							"prices": [
								{
									"base": {
										"value": 50456,
										"currencyCode": "JPY"
									},
									"total": {
										"value": 56920,
										"currencyCode": "JPY"
									},
									"taxes": [
										{
											"value": 710,
											"currencyCode": "JPY",
											"code": "HJDE",
											"category": "OLD"
										},
										{
											"value": 710,
											"currencyCode": "JPY",
											"code": "HJLO",
											"category": "OLD"
										},
										{
											"value": 5044,
											"currencyCode": "JPY",
											"code": "JPAD",
											"category": "OLD"
										}
									],
									"totalTaxes": {
										"value": 6464,
										"currencyCode": "JPY"
									}
								}
							],
							"exchangePrices": {
								"balance": {
									"base": 0,
									"total": 0,
									"totalTaxes": 0,
									"currencyCode": "JPY"
								},
								"additionalCollection": {
									"value": 0,
									"currencyCode": "JPY"
								},
								"penalty": {
									"value": 0,
									"currencyCode": "JPY"
								},
								"refund": {
									"value": 0,
									"currencyCode": "JPY"
								}
							}
						}
					],
					"totalPrices": [
						{
							"base": {
								"value": 50456,
								"currencyCode": "JPY"
							},
							"total": {
								"value": 56920,
								"currencyCode": "JPY"
							},
							"totalTaxes": {
								"value": 6464,
								"currencyCode": "JPY"
							}
						}
					],
					"exchangePrices": {
						"balance": {
							"base": 0,
							"total": 0,
							"totalTaxes": 0,
							"currencyCode": "JPY"
						},
						"additionalCollection": {
							"value": 0,
							"currencyCode": "JPY"
						},
						"penalty": {
							"value": 0,
							"currencyCode": "JPY"
						},
						"refund": {
							"value": 0,
							"currencyCode": "JPY"
						}
					}
				},
				"bounds": [
					{
						"airBoundId": "1",
						"originLocationCode": "ITM",
						"destinationLocationCode": "HND",
						"flights": [
							{
								"id": "ST5",
								"bookingClass": "Y",
								"statusCode": "HK"
							}
						],
						"duration": 4200
					},
					{
						"airBoundId": "2",
						"originLocationCode": "HND",
						"destinationLocationCode": "ITM",
						"flights": [
							{
								"id": "ST2",
								"bookingClass": "Y",
								"statusCode": "HK"
							}
						],
						"duration": 3000
					}
				],
				"fareInfos": [
					{
						"fareClass": "YKJL",
						"travelerIds": [
							"PT1"
						],
						"flightIds": [
							"ST5",
							"ST2"
						]
					}
				],
				"freeCheckedBaggageAllowanceItems": [
					{
						"details": {
							"type": "weight",
							"weightUnit": "kilogram",
							"quantity": 20
						},
						"flightIds": [
							"ST5"
						],
						"travelerIds": [
							"PT1"
						]
					},
					{
						"details": {
							"type": "weight",
							"weightUnit": "kilogram",
							"quantity": 20
						},
						"flightIds": [
							"ST2"
						],
						"travelerIds": [
							"PT1"
						]
					}
				]
			},
			"travelers": [
				{
					"passengerTypeCode": "ADT",
					"id": "PT1",
					"names": [
						{
							"firstName": "Mary",
							"lastName": "Sharp",
							"nameType": "universal",
							"isPreferred": true
						}
					]
				}
			],
			"contacts": [
				{
					"id": "OT4",
					"category": "other",
					"contactType": "Phone",
					"deviceType": "landline",
					"purpose": "standard",
					"number": "TYO 99-999-9991 - JAL WEB TOKYO.JP - A",
					"freeFlowText": "TYO 99-999-9991 - JAL WEB TOKYO.JP - A"
				}
			],
			"travelDocuments": [
				{
					"flightIds": [
						"ST2",
						"ST5"
					],
					"travelerIds": [
						"PT1"
					],
					"id": "1312136803145",
					"documentType": "eticket",
					"price": {
						"base": 50456,
						"total": 56920,
						"currencyCode": "JPY",
						"taxes": [
							{
								"value": 710,
								"currencyCode": "JPY",
								"code": "HJ"
							},
							{
								"value": 710,
								"currencyCode": "JPY",
								"code": "HJ"
							},
							{
								"value": 5044,
								"currencyCode": "JPY",
								"code": "JP"
							}
						],
						"totalTaxes": 6464
					},
					"paymentTransactions": [
						{
							"paymentMethod": {
								"id": "CASH",
								"paymentType": "CustomPayment"
							},
							"amount": {
								"value": 56920,
								"currencyCode": "JPY"
							}
						}
					],
					"fareInfos": [
						{
							"fareClass": "YKJL",
							"couponStatus": "open",
							"flight": {
								"marketingAirlineCode": "JL",
								"marketingFlightNumber": "104",
								"departure": {
									"locationCode": "ITM",
									"dateTime": "2022-11-01T07:30:00.000+09:00"
								},
								"arrival": {
									"locationCode": "HND",
									"dateTime": "2022-11-01T08:40:00.000+09:00"
								}
							}
						},
						{
							"fareClass": "YKJL",
							"couponStatus": "open",
							"flight": {
								"marketingAirlineCode": "JL",
								"marketingFlightNumber": "1416",
								"departure": {
									"locationCode": "HND",
									"dateTime": "2022-11-25T04:40:00.000+09:00"
								},
								"arrival": {
									"locationCode": "ITM",
									"dateTime": "2022-11-25T05:30:00.000+09:00"
								}
							}
						}
					],
					"creation": {
						"triggerEventName": "issuance",
						"localDateTime": "2022-09-01T00:00:00.000+09:00",
						"office": {
							"officeId": "TYOJL08QQ",
							"location": {
								"cityCode": "TYO"
							}
						},
						"location": {
							"cityCode": "TYO"
						}
					}
				}
			],
			"specialKeywords": [
				{
					"id": "OT2",
					"keyword": "NOEX",
					"airlineCode": "JL",
					"statusCode": "HK",
					"quantity": 1,
					"freetext": "AUTOMATIC AGE RESTRICTION",
					"travelerIds": [
						"PT1"
					]
				}
			],
			"specialServiceRequests": [
				{
					"id": "OT6",
					"code": "FQTR",
					"airlineCode": "JL",
					"statusCode": "HK",
					"quantity": 1,
					"travelerIds": [
						"PT1"
					],
					"flightIds": [
						"ST2"
					]
				},
				{
					"id": "OT31",
					"code": "FQTR",
					"airlineCode": "JL",
					"statusCode": "UN",
					"quantity": 1,
					"travelerIds": [
						"PT1"
					],
					"flightIds": [
						"ST4"
					]
				},
				{
					"id": "OT40",
					"code": "FQTR",
					"airlineCode": "JL",
					"statusCode": "HK",
					"quantity": 1,
					"travelerIds": [
						"PT1"
					],
					"flightIds": [
						"ST5"
					]
				}
			]
		}
	},
	"dictionaries": {
		"location": {
			"ITM": {
				"type": "airport",
				"airportName": "OSAKA INTL (ITAMI)",
				"cityCode": "OSA",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			},
			"TYO": {
				"type": "city",
				"cityCode": "TYO",
				"cityName": "TOKYO",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			},
			"OSA": {
				"type": "city",
				"cityCode": "OSA",
				"cityName": "OSAKA",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			},
			"HND": {
				"type": "airport",
				"airportName": "TOKYO INTL HANEDA",
				"cityCode": "TYO",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			}
		},
		"country": {
			"JP": "JAPAN"
		},
		"airline": {
			"JL": "JAPAN AIRLINES"
		},
		"aircraft": {
			"773": "BOEING 777-300",
			"788": "BOEING 787-8"
		},
		"flight": {
			"ST2": {
				"marketingAirlineCode": "JL",
				"operatingAirlineCode": "JL",
				"marketingFlightNumber": "1416",
				"operatingAirlineFlightNumber": "1416",
				"departure": {
					"locationCode": "HND",
					"dateTime": "2022-11-25T04:40:00.000+09:00",
					"terminal": "1"
				},
				"arrival": {
					"locationCode": "ITM",
					"dateTime": "2022-11-25T05:30:00.000+09:00"
				},
				"aircraftCode": "773",
				"duration": 3000,
				"isOpenSegment": false,
				"isInformational": false,
				"secureFlightIndicator": false,
				"flightStatus": "scheduled"
			},
			"ST5": {
				"marketingAirlineCode": "JL",
				"operatingAirlineCode": "JL",
				"marketingFlightNumber": "104",
				"operatingAirlineFlightNumber": "104",
				"departure": {
					"locationCode": "ITM",
					"dateTime": "2022-11-01T07:30:00.000+09:00"
				},
				"arrival": {
					"locationCode": "HND",
					"dateTime": "2022-11-01T08:40:00.000+09:00",
					"terminal": "1"
				},
				"aircraftCode": "788",
				"duration": 4200,
				"isOpenSegment": false,
				"isInformational": false,
				"secureFlightIndicator": false,
				"flightStatus": "scheduled"
			}
		},
		"tax": {
			"HJ": "HJ",
			"HJDE": "HJDE",
			"HJLO": "HJLO",
			"JP": "JP",
			"JPAD": "JPAD"
		},
		"currency": {
			"JPY": {
				"name": "JAPANESE YEN",
				"decimalPlaces": 0
			}
		},
		"specialServiceRequest": {
			"FQTR": {
				"name": "FREQUENT TRAVELLER REDEMPTION"
			}
		},
		"bookingStatus": {
			"HK": {
				"name": "Holding confirmed"
			},
			"UN": {
				"name": "Unable, does not operate"
			}
		}
	}
}

```

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order.json

```
{
    "data": {
        "id": "5KSZWN",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL088L",
            "countryCode": "JP"
        },
        "creationDateTime": "2020-12-30T10:27:00.000Z",
        "lastModificationDateTime": "2020-12-30T10:32:00.000Z",
        "isGroupBooking": false,
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT3"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 22200,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 25520,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 550,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 550,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 2220,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 3320,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PT2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 16650,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 18855,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 270,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 270,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 1665,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2205,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PI3"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "totalTaxes": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 38850,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 44375,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 5525,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "HND",
                    "destinationLocationCode": "ITM",
                    "flights": [
                        {
                            "id": "ST3",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "TK"
                        }
                    ],
                    "duration": 3600
                },
                {
                    "airBoundId": "2",
                    "originLocationCode": "HND",
                    "destinationLocationCode": "ITM",
                    "flights": [
                        {
                            "id": "ST1",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "UN",
                            "fareFamilyCode": "6JPJPYTA"
                        }
                    ],
                    "duration": 3600
                },
                {
                    "airBoundId": "3",
                    "originLocationCode": "ITM",
                    "destinationLocationCode": "HND",
                    "flights": [
                        {
                            "id": "ST2",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "HK",
                            "fareFamilyCode": "6JPJPYTA"
                        }
                    ],
                    "duration": 3600
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PI3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PI3"
                    ]
                }
            ]
        },
        "travelers": [
            {
                "passengerTypeCode": "CHD",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "San",
                        "lastName": "Sa",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2014-10-01",
                "age": 5
            },
            {
                "passengerTypeCode": "ADT",
                "id": "PT3",
                "names": [
                    {
                        "firstName": "Yendluri",
                        "lastName": "Siva",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "1990-05-17",
                "age": 30
            },
            {
                "passengerTypeCode": "INF",
                "id": "PI3",
                "names": [
                    {
                        "firstName": "San",
                        "lastName": "Ka",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2020-10-01",
                "age": 1,
                "accompanyingTravelerId": "PT3"
            }
        ],
        "contacts": [
            {
                "id": "OT9",
                "category": "personal",
                "contactType": "Email",
                "purpose": "standard",
                "address": "GREEN@GMAIL.COM",
                "lang": "EN"
            }
        ],
        "travelDocuments": [
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PI3"
                ],
                "id": "1312135660193",
                "documentType": "eticket",
                "price": {
                    "base": 0,
                    "total": 0,
                    "currencyCode": "JPY"
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PT2"
                ],
                "id": "1312135660192",
                "documentType": "eticket",
                "price": {
                    "base": 16650,
                    "total": 18855,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 1665,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 2205
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PT3"
                ],
                "id": "1312135660191",
                "documentType": "eticket",
                "price": {
                    "base": 22200,
                    "total": 25520,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 2220,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 3320
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            }
        ],
        "specialKeywords": [
            {
                "id": "OT5",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT2"
                ]
            }
        ],
        "specialServiceRequests": [
            {
                "id": "OT3",
                "code": "CHLD",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "01OCT14",
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT4",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "UN",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST1"
                ]
            },
            {
                "id": "OT8",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST2"
                ]
            },
            {
                "id": "OT40",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST3"
                ]
            }
        ],
        "paymentRecords": [
            {
                "id": "FPT25",
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "WN",
                            "paymentType": "CustomPayment"
                        }
                    }
                ]
            }
        ]
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "TYO": {
                "type": "city",
                "cityCode": "TYO",
                "cityName": "TOKYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "HND": {
                "type": "airport",
                "airportName": "TOKYO INTL HANEDA",
                "cityCode": "TYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "773": "BOEING 777-300",
            "E70": "EMBRAER 170"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "1028",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-25T11:25:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-25T12:25:00.000+09:00",
                    "terminal": "1"
                },
                "aircraftCode": "E70",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "1416",
                "operatingAirlineFlightNumber": "1416",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-20T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-20T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "cancelled"
            },
            "ST3": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "1418",
                "operatingAirlineFlightNumber": "1418",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-20T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-20T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJ": "HJ",
            "HJLO": "HJLO",
            "JP": "JP",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "specialServiceRequest": {
            "INFT": {
                "name": "INFANT PASSENGER INFORMATION"
            },
            "CHLD": {
                "name": "CHILD PASSENGER INFORMATION"
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            },
            "TK": {
                "name": "Confirmed, timechange"
            },
            "UN": {
                "name": "Unable, does not operate"
            }
        }
    }
}
```

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order_For_Award_Pnr.json

```
{
	"data": {
		"id": "5K6WE5",
		"creationPointOfSale": {
			"pointOfSaleId": "TYOJL082A",
			"countryCode": "JP"
		},
		"creationDateTime": "2022-09-07T18:02:00.000Z",
		"lastModificationDateTime": "2022-09-07T18:06:00.000Z",
		"isGroupBooking": false,
		"tags": [
			"domestic"
		],
		"air": {
			"prices": {
				"unitPrices": [
					{
						"travelerIds": [
							"PT1"
						],
						"flightIds": [
							"ST1",
							"ST2"
						],
						"prices": [
							{
								"base": {
									"value": 0,
									"currencyCode": "JPY"
								},
								"total": {
									"value": 1420,
									"currencyCode": "JPY"
								},
								"taxes": [
									{
										"value": 710,
										"currencyCode": "JPY",
										"code": "HJDE"
									},
									{
										"value": 710,
										"currencyCode": "JPY",
										"code": "HJLO"
									}
								],
								"totalTaxes": {
									"value": 1420,
									"currencyCode": "JPY"
								}
							}
						]
					}
				],
				"totalPrices": [
					{
						"base": {
							"value": 0,
							"currencyCode": "JPY"
						},
						"total": {
							"value": 1420,
							"currencyCode": "JPY"
						},
						"totalTaxes": {
							"value": 1420,
							"currencyCode": "JPY"
						}
					}
				]
			},
			"bounds": [
				{
					"airBoundId": "1",
					"originLocationCode": "HND",
					"destinationLocationCode": "ITM",
					"flights": [
						{
							"id": "ST3",
							"cabin": "business",
							"bookingClass": "U",
							"statusCode": "TK"
						}
					],
					"duration": 3600
				},
				{
					"airBoundId": "2",
					"originLocationCode": "HND",
					"destinationLocationCode": "ITM",
					"flights": [
						{
							"id": "ST1",
							"cabin": "business",
							"bookingClass": "U",
							"statusCode": "UN",
							"fareFamilyCode": "AWARD"
						}
					],
					"duration": 3600
				},
				{
					"airBoundId": "3",
					"originLocationCode": "ITM",
					"destinationLocationCode": "HND",
					"flights": [
						{
							"id": "ST2",
							"cabin": "business",
							"bookingClass": "U",
							"statusCode": "UN",
							"fareFamilyCode": "AWARD"
						}
					],
					"duration": 3600
				}
			],
			"fareInfos": [
				{
					"fareClass": "U0AABAOO",
					"travelerIds": [
						"PT1"
					],
					"flightIds": [
						"ST1",
						"ST2"
					]
				}
			],
			"freeCheckedBaggageAllowanceItems": [
				{
					"details": {
						"type": "weight",
						"weightUnit": "kilogram",
						"quantity": 20
					},
					"flightIds": [
						"ST1"
					],
					"travelerIds": [
						"PT1"
					]
				},
				{
					"details": {
						"type": "weight",
						"weightUnit": "kilogram",
						"quantity": 20
					},
					"flightIds": [
						"ST2"
					],
					"travelerIds": [
						"PT1"
					]
				}
			]
		},
		"travelers": [
			{
				"passengerTypeCode": "ADT",
				"id": "PT1",
				"names": [
					{
						"firstName": "Sanjuichimr",
						"lastName": "Ichiei",
						"nameType": "universal",
						"isPreferred": true
					}
				],
				"age": 32
			}
		],
		"frequentFlyerCards": [
			{
				"id": "OT18",
				"companyCode": "JL",
				"cardNumber": "770029031",
				"travelerId": "PT1",
				"tierLevel": "JMBM"
			}
		],
		"contacts": [
			{
				"id": "OT2",
				"category": "other",
				"contactType": "Phone",
				"deviceType": "landline",
				"purpose": "standard",
				"number": "0123456789",
				"freeFlowText": "0123456789"
			},
			{
				"id": "OT3",
				"category": "other",
				"contactType": "Email",
				"purpose": "standard",
				"address": "DAN-ANDREI.IONASCU@AMADEUS.COM"
			}
		],
		"travelDocuments": [
			{
				"travelerIds": [
					"PT1"
				],
				"id": "1312438641629",
				"documentType": "eticket",
				"price": {
					"base": 0,
					"total": 1420,
					"currencyCode": "JPY",
					"taxes": [
						{
							"value": 710,
							"currencyCode": "JPY",
							"code": "HJ"
						},
						{
							"value": 710,
							"currencyCode": "JPY",
							"code": "HJ"
						}
					],
					"totalTaxes": 1420
				},
				"paymentTransactions": [
					{
						"paymentMethod": {
							"id": "CC",
							"paymentType": "PaymentCard",
							"vendorCode": "VI",
							"cardNumber": "XXXXXXXXXXXX0002",
							"expiryDate": "1125"
						},
						"amount": {
							"value": 1420,
							"currencyCode": "JPY"
						},
						"authorization": {
							"approvalCode": "APS1OK"
						}
					},
					{
						"paymentMethod": {
							"paymentType": "MilesPayment",
							"companyCode": "JL",
							"cardNumber": "770029031"
						},
						"amount": {
							"value": 14000,
							"currencyCode": "MIL"
						},
						"authorization": {
							"approvalCode": "08SEP22M100072"
						}
					}
				],
				"fareInfos": [
					{
						"fareClass": "U0AABAOO",
						"fareFamilyCode": "AWARD",
						"couponStatus": "open",
						"flight": {
							"marketingAirlineCode": "JL",
							"marketingFlightNumber": "1416",
							"departure": {
								"locationCode": "HND",
								"dateTime": "2022-09-12T04:30:00.000+09:00"
							},
							"arrival": {
								"locationCode": "ITM",
								"dateTime": "2022-09-12T05:30:00.000+09:00"
							}
						}
					},
					{
						"fareClass": "U0AABAOO",
						"fareFamilyCode": "AWARD",
						"couponStatus": "open",
						"flight": {
							"marketingAirlineCode": "JL",
							"marketingFlightNumber": "1028",
							"departure": {
								"locationCode": "ITM",
								"dateTime": "2022-09-13T11:25:00.000+09:00"
							},
							"arrival": {
								"locationCode": "HND",
								"dateTime": "2022-09-13T12:25:00.000+09:00"
							}
						}
					}
				],
				"creation": {
					"triggerEventName": "issuance",
					"localDateTime": "2022-09-08T00:00:00.000+09:00",
					"office": {
						"officeId": "TYOJL082A",
						"location": {
							"cityCode": "TYO"
						}
					},
					"location": {
						"cityCode": "TYO"
					}
				},
				"areCouponsAndSegmentsInSync": false
			}
		],
		"specialKeywords": [
			{
				"id": "OT16",
				"keyword": "JAL",
				"airlineCode": "JL",
				"statusCode": "HK",
				"quantity": 1,
				"freetext": "///JAL CARD HOLDER",
				"travelerIds": [
					"PT1"
				]
			},
			{
				"id": "OT33",
				"keyword": "PROT",
				"airlineCode": "JL",
				"statusCode": "HK",
				"quantity": 1,
				"freetext": "REACC BKG PROTECTION",
				"travelerIds": [
					"PT1"
				],
				"flightIds": [
					"ST3"
				]
			}
		],
		"specialServiceRequests": [
			{
				"id": "OT10",
				"code": "FQTR",
				"airlineCode": "JL",
				"statusCode": "UN",
				"quantity": 1,
				"travelerIds": [
					"PT1"
				],
				"flightIds": [
					"ST1"
				]
			},
			{
				"id": "OT11",
				"code": "FQTR",
				"airlineCode": "JL",
				"statusCode": "UN",
				"quantity": 1,
				"travelerIds": [
					"PT1"
				],
				"flightIds": [
					"ST2"
				]
			},
			{
				"id": "OT18",
				"code": "FQTV",
				"airlineCode": "JL",
				"statusCode": "HK",
				"quantity": 1,
				"isVerified": true,
				"travelerIds": [
					"PT1"
				]
			},
			{
				"id": "OT30",
				"code": "FQTR",
				"airlineCode": "JL",
				"statusCode": "HK",
				"quantity": 1,
				"travelerIds": [
					"PT1"
				],
				"flightIds": [
					"ST3"
				]
			}
		]
	},
	"dictionaries": {
		"location": {
			"ITM": {
				"type": "airport",
				"airportName": "OSAKA INTL (ITAMI)",
				"cityCode": "OSA",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			},
			"TYO": {
				"type": "city",
				"cityCode": "TYO",
				"cityName": "TOKYO",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			},
			"OSA": {
				"type": "city",
				"cityCode": "OSA",
				"cityName": "OSAKA",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			},
			"HND": {
				"type": "airport",
				"airportName": "TOKYO INTL HANEDA",
				"cityCode": "TYO",
				"countryCode": "JP",
				"timeZone": "UTC+0900"
			}
		},
		"country": {
			"JP": "JAPAN"
		},
		"airline": {
			"JL": "JAPAN AIRLINES"
		},
		"aircraft": {
			"773": "BOEING 777-300",
			"E90": "EMBRAER 190"
		},
		"flight": {
			"ST2": {
				"marketingAirlineCode": "JL",
				"operatingAirlineCode": "JL",
				"marketingFlightNumber": "1028",
				"operatingAirlineFlightNumber": "1028",
				"departure": {
					"locationCode": "ITM",
					"dateTime": "2022-09-13T11:25:00.000+09:00"
				},
				"arrival": {
					"locationCode": "HND",
					"dateTime": "2022-09-13T12:25:00.000+09:00",
					"terminal": "1"
				},
				"aircraftCode": "E90",
				"duration": 3600,
				"isOpenSegment": false,
				"isInformational": false,
				"secureFlightIndicator": false,
				"flightStatus": "cancelled",
				"aircraftConfigurationVersion": "M11"
			},
			"ST1": {
				"marketingAirlineCode": "JL",
				"operatingAirlineCode": "JL",
				"marketingFlightNumber": "1416",
				"operatingAirlineFlightNumber": "1416",
				"departure": {
					"locationCode": "HND",
					"dateTime": "2022-09-12T04:30:00.000+09:00",
					"terminal": "1"
				},
				"arrival": {
					"locationCode": "ITM",
					"dateTime": "2022-09-12T05:30:00.000+09:00"
				},
				"aircraftCode": "773",
				"duration": 3600,
				"isOpenSegment": false,
				"isInformational": false,
				"secureFlightIndicator": false,
				"flightStatus": "cancelled",
				"aircraftConfigurationVersion": "W84"
			},
			"ST3": {
				"marketingAirlineCode": "JL",
				"operatingAirlineCode": "JL",
				"marketingFlightNumber": "1418",
				"operatingAirlineFlightNumber": "1418",
				"departure": {
					"locationCode": "HND",
					"dateTime": "2022-09-12T04:30:00.000+09:00",
					"terminal": "1"
				},
				"arrival": {
					"locationCode": "ITM",
					"dateTime": "2022-09-12T05:30:00.000+09:00"
				},
				"aircraftCode": "773",
				"duration": 3600,
				"isOpenSegment": false,
				"isInformational": false,
				"secureFlightIndicator": false,
				"flightStatus": "scheduled",
				"aircraftConfigurationVersion": "W84"
			}
		},
		"tax": {
			"HJDE": "HJDE",
			"HJ": "HJ",
			"HJLO": "HJLO"
		},
		"currency": {
			"JPY": {
				"name": "JAPANESE YEN",
				"decimalPlaces": 0
			}
		},
		"specialServiceRequest": {
			"FQTR": {
				"name": "FREQUENT TRAVELLER REDEMPTION"
			},
			"FQTV": {
				"name": "FREQUENT TRAVELLER INFORMATION"
			}
		},
		"bookingStatus": {
			"HK": {
				"name": "Holding confirmed"
			},
			"TK": {
				"name": "Confirmed, timechange"
			},
			"UN": {
				"name": "Unable, does not operate"
			}
		}
	}
}
```

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order_For_Domestic_Pnr.json

```
{
    "data": {
        "id": "5BGUR7",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL082A",
            "countryCode": "JP"
        },
        "creationDateTime": "2023-02-15T10:09:00.000Z",
        "lastModificationDateTime": "2023-02-15T10:10:00.000Z",
        "isGroupBooking": false,
        "tags": [
            "domestic"
        ],
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT1",
                            "PT2"
                        ],
                        "flightIds": [
                            "ST1",
                            "ST2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 85500,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 95470,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 710,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 710,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 8550,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 9970,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 171000,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 190940,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 19940,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "CTS",
                    "destinationLocationCode": "ITM",
                    "flights": [
                        {
                            "id": "ST1",
                            "cabin": "eco",
                            "bookingClass": "Y",
                            "statusCode": "HK",
                            "fareFamilyCode": "RTSVR01"
                        }
                    ],
                    "duration": 7200
                },
                {
                    "airBoundId": "2",
                    "originLocationCode": "ITM",
                    "destinationLocationCode": "CTS",
                    "flights": [
                        {
                            "id": "ST2",
                            "cabin": "eco",
                            "bookingClass": "Y",
                            "statusCode": "HK",
                            "fareFamilyCode": "RTSVR01"
                        }
                    ],
                    "duration": 6900
                }
            ],
            "fareInfos": [
                {
                    "fareClass": "YLERBCAB",
                    "travelerIds": [
                        "PT1"
                    ],
                    "flightIds": [
                        "ST2"
                    ]
                },
                {
                    "fareClass": "YLERBCAB",
                    "travelerIds": [
                        "PT2"
                    ],
                    "flightIds": [
                        "ST2"
                    ]
                },
                {
                    "fareClass": "YHERBCAB",
                    "travelerIds": [
                        "PT1"
                    ],
                    "flightIds": [
                        "ST1"
                    ]
                },
                {
                    "fareClass": "YHERBCAB",
                    "travelerIds": [
                        "PT2"
                    ],
                    "flightIds": [
                        "ST1"
                    ]
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT1",
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT1",
                        "PT2"
                    ]
                }
            ]
        },
        "travelers": [
            {
                "passengerTypeCode": "ADT",
                "id": "PT1",
                "names": [
                    {
                        "firstName": "Kato",
                        "lastName": "Sharp",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ]
            },
            {
                "passengerTypeCode": "ADT",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "Kato",
                        "lastName": "San",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ]
            }
        ],
        "contacts": [
            {
                "id": "OT6",
                "category": "other",
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "standard",
                "countryPhoneExtension": "98",
                "number": "67452342",
                "freeFlowText": "67452342"
            }
        ],
        "travelDocuments": [
            {
                "flightIds": [
                    "ST1",
                    "ST2"
                ],
                "travelerIds": [
                    "PT1"
                ],
                "id": "1312135566811",
                "documentType": "eticket",
                "price": {
                    "base": 85500,
                    "total": 95470,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 710,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 710,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 8550,
                            "currencyCode": "JPY",
                            "code": "JP",
                            "applicationLevel": "itinerary"
                        }
                    ],
                    "totalTaxes": 9970
                },
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "CASH",
                            "paymentType": "CustomPayment"
                        },
                        "amount": {
                            "value": 95470,
                            "currencyCode": "JPY"
                        }
                    }
                ],
                "fareInfos": [
                    {
                        "fareClass": "YHERBCAB",
                        "fareFamilyCode": "RTSVR01",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "2000",
                            "departure": {
                                "locationCode": "CTS",
                                "dateTime": "2023-03-17T08:50:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2023-03-17T10:50:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "YLERBCAB",
                        "fareFamilyCode": "RTSVR01",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "2001",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2023-04-01T08:00:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "CTS",
                                "dateTime": "2023-04-01T09:55:00.000+09:00"
                            }
                        }
                    }
                ],
                "creation": {
                    "triggerEventName": "issuance",
                    "localDateTime": "2023-02-15T00:00:00.000+09:00",
                    "office": {
                        "officeId": "TYOJL082A",
                        "location": {
                            "cityCode": "TYO"
                        }
                    },
                    "location": {
                        "cityCode": "TYO"
                    }
                },
                "areCouponsAndSegmentsInSync": true,
                "status": "ISSUED"
            },
            {
                "flightIds": [
                    "ST1",
                    "ST2"
                ],
                "travelerIds": [
                    "PT2"
                ],
                "id": "1312135566812",
                "documentType": "eticket",
                "price": {
                    "base": 85500,
                    "total": 95470,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 710,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 710,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 8550,
                            "currencyCode": "JPY",
                            "code": "JP",
                            "applicationLevel": "itinerary"
                        }
                    ],
                    "totalTaxes": 9970
                },
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "CASH",
                            "paymentType": "CustomPayment"
                        },
                        "amount": {
                            "value": 95470,
                            "currencyCode": "JPY"
                        }
                    }
                ],
                "fareInfos": [
                    {
                        "fareClass": "YHERBCAB",
                        "fareFamilyCode": "RTSVR01",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "2000",
                            "departure": {
                                "locationCode": "CTS",
                                "dateTime": "2023-03-17T08:50:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2023-03-17T10:50:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "YLERBCAB",
                        "fareFamilyCode": "RTSVR01",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "2001",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2023-04-01T08:00:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "CTS",
                                "dateTime": "2023-04-01T09:55:00.000+09:00"
                            }
                        }
                    }
                ],
                "creation": {
                    "triggerEventName": "issuance",
                    "localDateTime": "2023-02-15T00:00:00.000+09:00",
                    "office": {
                        "officeId": "TYOJL082A",
                        "location": {
                            "cityCode": "TYO"
                        }
                    },
                    "location": {
                        "cityCode": "TYO"
                    }
                },
                "areCouponsAndSegmentsInSync": true,
                "status": "ISSUED"
            },
            {
                "flightIds": [
                    "ST1",
                    "ST2"
                ],
                "travelerIds": [
                    "PT1"
                ],
                "id": "1312135566813",
                "documentType": "services",
                "price": {
                    "base": 85500,
                    "total": 95470,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 710,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 710,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 8550,
                            "currencyCode": "JPY",
                            "code": "JP",
                            "applicationLevel": "itinerary"
                        }
                    ],
                    "totalTaxes": 9970
                },
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "CASH",
                            "paymentType": "CustomPayment"
                        },
                        "amount": {
                            "value": 95470,
                            "currencyCode": "JPY"
                        }
                    }
                ],
                "fareInfos": [
                    {
                        "fareClass": "YHERBCAB",
                        "fareFamilyCode": "RTSVR01",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "2000",
                            "departure": {
                                "locationCode": "CTS",
                                "dateTime": "2023-03-17T08:50:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2023-03-17T10:50:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "YLERBCAB",
                        "fareFamilyCode": "RTSVR01",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "2001",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2023-04-01T08:00:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "CTS",
                                "dateTime": "2023-04-01T09:55:00.000+09:00"
                            }
                        }
                    }
                ],
                "creation": {
                    "triggerEventName": "issuance",
                    "localDateTime": "2023-02-15T00:00:00.000+09:00",
                    "office": {
                        "officeId": "TYOJL082A",
                        "location": {
                            "cityCode": "TYO"
                        }
                    },
                    "location": {
                        "cityCode": "TYO"
                    }
                },
                "areCouponsAndSegmentsInSync": true,
                "status": "ISSUED"
            }
        ],
        "specialKeywords": [
            {
                "id": "OT5",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 2,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT1",
                    "PT2"
                ]
            }
        ],
        "paymentRecords": [
            {
                "id": "FPT15",
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "CASH",
                            "paymentType": "CustomPayment"
                        }
                    }
                ]
            }
        ]
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "CTS": {
                "type": "airport",
                "airportName": "NEW CHITOSE",
                "cityCode": "SPK",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "TYO": {
                "type": "airport",
                "airportName": "TOKYO",
                "cityCode": "TYO",
                "cityName": "TOKYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "SPK": {
                "type": "city",
                "cityCode": "SPK",
                "cityName": "SAPPORO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "73H": "BOEING 737-800 (WINGLETS)"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "2001",
                "operatingAirlineFlightNumber": "2001",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2023-04-01T08:00:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "CTS",
                    "dateTime": "2023-04-01T09:55:00.000+09:00",
                    "terminal": "D"
                },
                "aircraftCode": "73H",
                "duration": 6900,
                "isOpenSegment": false,
                "isInformational": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled",
                "aircraftConfigurationVersion": "V32"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "2000",
                "operatingAirlineFlightNumber": "2000",
                "departure": {
                    "locationCode": "CTS",
                    "dateTime": "2023-03-17T08:50:00.000+09:00",
                    "terminal": "D"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2023-03-17T10:50:00.000+09:00"
                },
                "aircraftCode": "73H",
                "duration": 7200,
                "isOpenSegment": false,
                "isInformational": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled",
                "aircraftConfigurationVersion": "V32"
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJ": "HJ",
            "HJLO": "HJLO",
            "JP": "JP",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            }
        }
    }
}
```

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order_Without_Disruption.json

```
{
    "data": {
        "id": "5KSZWN",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL088L",
            "countryCode": "JP"
        },
        "creationDateTime": "2020-12-30T10:27:00.000Z",
        "lastModificationDateTime": "2020-12-30T10:32:00.000Z",
        "isGroupBooking": false,
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT3"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 22200,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 25520,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 550,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 550,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 2220,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 3320,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PT2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 16650,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 18855,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 270,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 270,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 1665,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2205,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PI3"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "totalTaxes": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 38850,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 44375,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 5525,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "HND",
                    "destinationLocationCode": "ITM",
                    "flights": [
                        {
                            "id": "ST3",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "HK"
                        }
                    ],
                    "duration": 3600
                },                
                {
                    "airBoundId": "2",
                    "originLocationCode": "ITM",
                    "destinationLocationCode": "HND",
                    "flights": [
                        {
                            "id": "ST2",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "HK",
                            "fareFamilyCode": "6JPJPYTA"
                        }
                    ],
                    "duration": 3600
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PI3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PI3"
                    ]
                }
            ]
        },
        "travelers": [
            {
                "passengerTypeCode": "CHD",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "San",
                        "lastName": "Sa",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2014-10-01",
                "age": 5
            },
            {
                "passengerTypeCode": "ADT",
                "id": "PT3",
                "names": [
                    {
                        "firstName": "Yendluri",
                        "lastName": "Siva",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "1990-05-17",
                "age": 30
            },
            {
                "passengerTypeCode": "INF",
                "id": "PI3",
                "names": [
                    {
                        "firstName": "San",
                        "lastName": "Ka",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2020-10-01",
                "age": 1,
                "accompanyingTravelerId": "PT3"
            }
        ],
        "contacts": [
            {
                "id": "OT9",
                "category": "personal",
                "contactType": "Email",
                "purpose": "standard",
                "address": "GREEN@GMAIL.COM",
                "lang": "EN"
            }
        ],
        "travelDocuments": [
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PI3"
                ],
                "id": "1312135660193",
                "documentType": "eticket",
                "price": {
                    "base": 0,
                    "total": 0,
                    "currencyCode": "JPY"
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PT2"
                ],
                "id": "1312135660192",
                "documentType": "eticket",
                "price": {
                    "base": 16650,
                    "total": 18855,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 1665,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 2205
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PT3"
                ],
                "id": "1312135660191",
                "documentType": "eticket",
                "price": {
                    "base": 22200,
                    "total": 25520,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 2220,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 3320
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            }
        ],
        "specialKeywords": [
            {
                "id": "OT5",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT2"
                ]
            }
        ],
        "specialServiceRequests": [
            {
                "id": "OT3",
                "code": "CHLD",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "01OCT14",
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT4",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "UN",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST1"
                ]
            },
            {
                "id": "OT8",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST2"
                ]
            },
            {
                "id": "OT40",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST3"
                ]
            }
        ],
        "paymentRecords": [
            {
                "id": "FPT25",
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "WN",
                            "paymentType": "CustomPayment"
                        }
                    }
                ]
            }
        ]
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "TYO": {
                "type": "city",
                "cityCode": "TYO",
                "cityName": "TOKYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "HND": {
                "type": "airport",
                "airportName": "TOKYO INTL HANEDA",
                "cityCode": "TYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "773": "BOEING 777-300",
            "E70": "EMBRAER 170"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "1028",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-25T11:25:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-25T12:25:00.000+09:00",
                    "terminal": "1"
                },
                "aircraftCode": "E70",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "1416",
                "operatingAirlineFlightNumber": "1416",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-20T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-20T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "cancelled"
            },
            "ST3": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "1418",
                "operatingAirlineFlightNumber": "1418",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-20T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-20T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJ": "HJ",
            "HJLO": "HJLO",
            "JP": "JP",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "specialServiceRequest": {
            "INFT": {
                "name": "INFANT PASSENGER INFORMATION"
            },
            "CHLD": {
                "name": "CHILD PASSENGER INFORMATION"
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            }
        }
    }
}
```

---

## File: jal-email\src\main\java\com\amadeus\config\FreeMarkerConfig.java

```
package com.amadeus.config;

import freemarker.template.TemplateExceptionHandler;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FreeMarkerConfig {
    @Bean
    public freemarker.template.Configuration freeMarkerConfiguration() {
        freemarker.template.Configuration cfg = new freemarker.template.Configuration(freemarker.template.Configuration.VERSION_2_3_30);
        cfg.setDefaultEncoding("UTF-8");
        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.HTML_DEBUG_HANDLER);
        return cfg;
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\builder\EmailInformationBuilder.java

```
package com.amadeus.dapi.jalext.email.builder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import javax.inject.Named;

import com.amadeus.dapi.jalext.email.helpers.BoundHelpers;
import com.amadeus.dapi.jalext.email.helpers.FlightHelpers;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.DisruptionStatus;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.email.model.EmailInformation;
import com.amadeus.dapi.jalext.email.model.JLBound;
import com.amadeus.dapi.jalext.email.model.JLFlight;
import com.amadeus.dapi.jalext.email.model.JLBookingStatus;
import com.amadeus.dapi.jalext.email.model.JLFlightEndpoint;
import com.amadeus.dapi.jalext.email.model.JLFlightItem;
import com.amadeus.dapi.jalext.email.model.JLTraveler;
import com.amadeus.dapi.jalext.email.helpers.OrderHelpers;
import com.amadeus.dapi.jalext.email.helpers.PaymentHelpers;
import com.amadeus.dapi.jalext.email.helpers.RefundHelpers;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Bound;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Flight;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightEndPoint;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.LocationDictionaryItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Name;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderDictionary;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Traveler;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundDataView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundReplyView;

/**
 * EmailInformationBuilder class to build EmailInformation which will be used in the email template
 */
@Named
@Slf4j
public class EmailInformationBuilder {

  private static final List<String> CUSTOM_AIRCRAFT_CODE = new ArrayList<>(List.of("777", "388"));

  private static final String EMAIL_BUILDING_ERROR_LOG = "Error when building the confirmation email";

  private static final String DEFAULT_MARKET = "JAL_JR_JP";

  private static final List<String> REFUNDED_FOP = new ArrayList<>(List.of("AL", "JL_ALIPAY", "CA", "CASH", "CC", "CK", "JB", "JG", "JR", "JL_PAYPAL", "PP", "UP", "JL_CUP", "WE", "WN", "WP"));

  private static final List<String> REFUNDED_FOP_NOTICE_TO_DISPLAY = new ArrayList<>(List.of("AL", "JL_ALIPAY", "PP", "JL_PAYPAL", "UP", "JL_CUP", "WE"));

  /**
   * Build the common EmailInformation object for the cancel and rebook email
   *
   * @param orderReply
   * @return emailInformation
   */
  public EmailInformation buildEmailInformation(OrderReply orderReply, String market) {
    Order order = orderReply.getData();
    EmailInformation emailInformation = new EmailInformation();
    emailInformation.setMarket(market);
    if (order != null) {
      emailInformation.setOrderId(order.getId());
      emailInformation.setIsRevenue(!OrderHelpers.isFQTROrder(order));
      // TODO Remove markets bundle once confirmation calls for rebook are removed
      if (StringUtils.isNotBlank(market)) {
        emailInformation.setMarket(market);
      } else if (order.getCreationPointOfSale() != null) {
        ResourceBundle markets = ResourceBundle.getBundle("assets.data.markets");
        String officeKey = order.getCreationPointOfSale().getPointOfSaleId();
        emailInformation.setMarket(markets.containsKey(officeKey) ? markets.getString(officeKey) : DEFAULT_MARKET);
      }
      emailInformation.setTravelers(buildJlTravelers(order.getTravelers()));
    }
    return emailInformation;
  }

  /**
   * Build the EmailInformation object for the rebook email
   *
   * @param orderReply
   * @param errorCodes
   * @param warningCodes
   * @param confirmedBoundIds
   * @param assetsUri
   * @return emailInformation
   */
  public EmailInformation buildRebookEmailInformation(OrderReply orderReply, List<String> errorCodes, List<String> warningCodes,
          List<String> confirmedBoundIds, String assetsUri, String market) {
    try {
      if (orderReply != null) {
        EmailInformation emailInformation = buildEmailInformation(orderReply, market);
        if (emailInformation != null) {
          emailInformation.setAssetsUri(assetsUri);
          emailInformation.setBounds(buildJlBoundsList(orderReply));
          List<String> warnings = new ArrayList<>();
          List<String> errors= new ArrayList<>();
          Optional.ofNullable(warningCodes).ifPresent(warnings::addAll);
          Optional.ofNullable(errorCodes).ifPresent(errors::addAll);

          if (CollectionUtils.isNotEmpty(orderReply.getWarnings())) {
            List<String> orderWarnings = orderReply.getWarnings().stream().map(warningMessage -> warningMessage.getCode()).toList();
            warnings.addAll(orderWarnings);
          }
          if (CollectionUtils.isNotEmpty(orderReply.getErrors())) {
            List<String> orderErrors = orderReply.getErrors().stream().map(errorMessage -> errorMessage.getCode()).toList();
            errors.addAll(orderErrors);
          }
          if (CollectionUtils.isNotEmpty(warnings)) {
            emailInformation.setWarningCodes(warnings.stream().distinct().toList());
          }
          if (CollectionUtils.isNotEmpty(errors)) {
            emailInformation.setErrorCodes(errors.stream().distinct().toList());
          }

          if (CollectionUtils.isNotEmpty(emailInformation.getBounds())) {
            for (JLBound bound : emailInformation.getBounds()) {
              if (bound.getOriginalBound() != null) {
                bound.setIsNewProposal(true);
              } else {
                if (BoundHelpers.isBoundConfirmed(bound, confirmedBoundIds)) {
                  bound.setIsConfirmed(true);
                } else {
                  if (BoundHelpers.isBoundUpgraded(bound)) {
                    bound.setIsUpgraded(true);
                  } else {
                    boolean isBoundWaitlisted = BoundHelpers.isBoundWaitlisted(bound);
                    if (BoundHelpers.isBoundWaitlistConfirmed(bound) && !isBoundWaitlisted) {
                      bound.setIsWaitlistConfirmed(true);
                    } else if (isBoundWaitlisted) {
                      bound.setIsWaitlisted(true);
                    }
                  }
                }
              }
            }
          }
        }
        return emailInformation;
      }
    } catch (Exception e) {
      log.error(EMAIL_BUILDING_ERROR_LOG, e);
    }
    return null;
  }

  /**
   * Build the EmailInformation object for the refund email
   *
   * @param orderReply
   * @param orderCancelAndRefundReplyView
   * @return emailInformation
   */
  public EmailInformation buildRefundEmailInformation(
          OrderReply orderReply,
          OrderCancelAndRefundReplyView orderCancelAndRefundReplyView,
          Boolean isManuallyRefundable,
          String lang,
          String assetsUri,
          String market
  ) {
    try {
      if (orderCancelAndRefundReplyView != null && orderReply != null) {
        OrderCancelAndRefundDataView orderCancelAndRefundReply = orderCancelAndRefundReplyView.getData();
        EmailInformation emailInformation = buildEmailInformation(orderReply, market);
        if (emailInformation != null) {
          Order order = orderReply.getData();
          emailInformation.setAssetsUri(assetsUri);
          if (order != null) {
            emailInformation.setShouldDisplayRefundNotice(RefundHelpers.shouldDisplayRefundNotice(order));
            emailInformation.setShouldDisplayServiceText(CollectionUtils.isNotEmpty(order.getServices()));
            emailInformation.setShouldDisplayMilesInfoText(OrderHelpers.isFQTROrder(order));
            emailInformation.setHasSomeChargeableServices(OrderHelpers.hasSomeChargeableServices(order));
            emailInformation.setIsRefund(true);
            emailInformation.setIsRevenueManuallyRefundable(emailInformation.getIsRevenue() && isManuallyRefundable);
            if (CollectionUtils.isNotEmpty(orderCancelAndRefundReplyView.getWarnings())) {
              emailInformation.setWarningCodes(orderCancelAndRefundReplyView.getWarnings()
                      .stream().map(warningMessage -> warningMessage.getCode()).toList());
            }
            if (CollectionUtils.isNotEmpty(order.getTravelDocuments()) &&
                    CollectionUtils.isNotEmpty(order.getTravelDocuments().get(0).getPaymentTransactions())) {
              String refundedFOP = PaymentHelpers.getPaymentMethodId(order.getTravelDocuments().get(0).getPaymentTransactions());
              if (REFUNDED_FOP.contains(refundedFOP)) {
                emailInformation.setRefundedFOP(refundedFOP);
                emailInformation.setShouldDisplayNoticeFopMessage(REFUNDED_FOP_NOTICE_TO_DISPLAY.contains(refundedFOP));
              }
            }
            ResourceBundle currencySymbols = ResourceBundle.getBundle("assets.data.currency-symbols");
            if (emailInformation.getIsRevenue() && !isManuallyRefundable) {
              if (CollectionUtils.isNotEmpty(orderCancelAndRefundReply.getRefundOptions())) {
                emailInformation.setRefundSummary(
                        RefundHelpers.buildBreakdownRefundSummary(orderCancelAndRefundReplyView.getData().getRefundOptions(),
                                order, orderCancelAndRefundReplyView.getDictionaries(), lang, currencySymbols));
              }
            } else {
              emailInformation.setShouldDisplayMixedCurrencyMessage(OrderHelpers.hasOrderMixedCurrencies(order));
              emailInformation.setNoBreakdownRefundSummary(RefundHelpers.buildNoBreakdownRefundSummary(
                      orderCancelAndRefundReplyView.getData().getRefundOptions(),
                      emailInformation.getIsRevenueManuallyRefundable(),
                      orderCancelAndRefundReplyView.getDictionaries(),
                      lang,
                      currencySymbols)
              );
            }
          }
        }
        return emailInformation;
      }
    } catch (Exception e) {
      log.error(EMAIL_BUILDING_ERROR_LOG, e);
    }
    return null;
  }

  /**
   * Build a list of JLBounds with the data coming from the order reply call
   *
   * @param orderReply
   * @return jlBounds
   */
  public List<JLBound> buildJlBoundsList(OrderReply orderReply) {
    Order order = orderReply.getData();
    OrderDictionary dictionary = orderReply.getDictionaries();
    List<String> upgradedFlightIds = OrderHelpers.getUpgradedFlightsIds(order);
    boolean isThirdPartyOrder = OrderHelpers.isThirdPartyOrder(order);
    if (order != null && order.getAir() != null && CollectionUtils.isNotEmpty(order.getAir().getBounds())
            && dictionary != null) {
      return order.getAir().getBounds().stream()
              .filter(bound -> !BoundHelpers.isBoundFullyFlown(bound))
              .map(bound -> {
                JLBound jlBound = new JLBound();
                jlBound.setAirBoundId(bound.getAirBoundId());
                jlBound.setDuration(bound.getDuration());
                if (BoundHelpers.isBoundDisrupted(bound)) {
                  jlBound.setOriginalBound(buildJlOriginalBound(bound, isThirdPartyOrder, dictionary, upgradedFlightIds));
                }
                if (CollectionUtils.isNotEmpty(bound.getFlights())) {
                  jlBound.setFlightItemsList(buildJLFlightItems(bound.getFlights(), dictionary, upgradedFlightIds));
                  setJLBoundLocations(jlBound);
                }
                return jlBound;
              }).collect(Collectors.toList());
    }
    return Collections.emptyList();
  }

  /**
   * Build a JlEndpoint by combining the data in the order and the dictionary from the order reply
   *
   * @param departureDictionaryItem
   * @param flightEndPoint
   * @return jlEndpoint
   */
  public JLFlightEndpoint buildJlEndpoint(LocationDictionaryItem departureDictionaryItem,
      FlightEndPoint flightEndPoint) {
    JLFlightEndpoint jlEndpoint = new JLFlightEndpoint();
    jlEndpoint.setLocation(departureDictionaryItem);
    if (flightEndPoint != null) {
      jlEndpoint.setTerminal(flightEndPoint.getTerminal());
      jlEndpoint.setDateTime(flightEndPoint.getDateTime());
      jlEndpoint.setLocationCode(flightEndPoint.getLocationCode());
    }
    return jlEndpoint;
  }

  /**
   * Build the JLFlightItem list by reviving the flight items list with the order dictionary and the upgraded flight ids
   *
   * @param flightItems
   * @param dictionary
   * @param upgradedFlightIds
   * @return List<JLFlightItem>
   */
  public List<JLFlightItem> buildJLFlightItems(List<FlightItem> flightItems, OrderDictionary dictionary, List<String> upgradedFlightIds) {
    return CollectionUtils.isNotEmpty(flightItems) ? flightItems.stream().map(flightItemReply -> {
      JLFlightItem jlFlightItem = buildJlFlightItem(flightItemReply, upgradedFlightIds);
      if (MapUtils.isNotEmpty(dictionary.getFlight())) {
        Flight dictionaryFlight = dictionary.getFlight().get(flightItemReply.getId());
        if (dictionaryFlight != null && MapUtils.isNotEmpty(dictionary.getLocation())) {
          JLFlight jlFlight = buildJlFlight(dictionaryFlight, dictionary.getLocation());
          jlFlightItem.setFlight(jlFlight);
        }
      }
      return jlFlightItem;
    }).collect(Collectors.toList()) : null;
  }

  /**
   * Set the bound locations from the flight items list (departure/arrival/departure time)
   *
   * @param bound
   * @return
   */
  public void setJLBoundLocations(JLBound bound) {
    List<JLFlightItem> flightItems = bound.getFlightItemsList();
    if (CollectionUtils.isNotEmpty(flightItems)) {
      JLFlightItem departureFlight = flightItems.get(0);
      if (departureFlight != null && departureFlight.getFlight() != null) {
        JLFlightEndpoint jlDeparture = departureFlight.getFlight().getJlDeparture();
        if (jlDeparture != null) {
          if (jlDeparture.getLocation() != null) {
            bound.setDepartureLocationCityCode(jlDeparture.getLocation().getCityCode());
          }
          if (jlDeparture.getDateTime() != null){
            bound.setDepartureTime(jlDeparture.getDateTime().toLocalDateTime());
          }
        }
        if (flightItems.size() == 1) {
          if (departureFlight.getFlight().getJlArrival() != null && departureFlight.getFlight().getJlArrival().getLocation() != null) {
            bound.setArrivalLocationCityCode(departureFlight.getFlight().getJlArrival().getLocation().getCityCode());
          }
        } else {
          JLFlightItem arrivalFlight = flightItems.get(flightItems.size() - 1);
          if (arrivalFlight != null && arrivalFlight.getFlight() != null && arrivalFlight.getFlight().getJlArrival() != null
            && arrivalFlight.getFlight().getJlArrival().getLocation() != null) {
            bound.setArrivalLocationCityCode(arrivalFlight.getFlight().getJlArrival().getLocation().getCityCode());
          }
        }
      }
    }
  }

  /**
   * Build the original JlBound in case of disruption
   *
   * @param bound
   * @return jlBound
   */
  public JLBound buildJlOriginalBound(Bound bound, boolean isThirdPartyOrder, OrderDictionary dictionary, List<String> upgradedFlightIds) {
    DisruptionStatus disruptionStatus = bound.getDisruptionStatus();
    if (disruptionStatus != null && CollectionUtils.isNotEmpty(disruptionStatus.getOriginalFlights())) {
      JLBound jlBound = new JLBound();
      jlBound.setIsDisrupted(true);
      jlBound.setIsTimeChange(BoundHelpers.hasTimeChange(bound, isThirdPartyOrder));
      jlBound.setDuration(disruptionStatus.getDuration());
      List<JLFlightItem> jlOriginalFlights = buildJLFlightItems(disruptionStatus.getOriginalFlights(), dictionary, upgradedFlightIds);
      jlBound.setFlightItemsList(jlOriginalFlights);
      setJLBoundLocations(jlBound);
      return jlBound;
    }
    return null;
  }

  /**
   * Build a JlFlight by combining the data in the order and the dictionary from the order reply
   *
   * @param flight
   * @param locationsDictionary
   * @return jlBound
   */
  public JLFlight buildJlFlight(Flight flight, Map<String, LocationDictionaryItem> locationsDictionary) {
    JLFlight jlFlight = new JLFlight();
    jlFlight.setAircraftCode(flight.getAircraftCode());
    jlFlight.setOperatingAirlineCode(flight.getOperatingAirlineCode());
    jlFlight.setOperatingAirlineName(flight.getOperatingAirlineName());
    jlFlight.setMarketingFlightNumber(flight.getMarketingFlightNumber());
    jlFlight.setMarketingAirlineCode(flight.getMarketingAirlineCode());
    jlFlight.setDuration(flight.getDuration());
    if (flight.getDeparture() != null && flight.getDeparture().getLocationCode() != null) {
      LocationDictionaryItem departureDictionaryItem = locationsDictionary.get(flight.getDeparture().getLocationCode());
      if (departureDictionaryItem != null) {
        jlFlight.setJlDeparture(buildJlEndpoint(departureDictionaryItem, flight.getDeparture()));
      }
    }
    if (flight.getArrival() != null && flight.getArrival().getLocationCode() != null) {
      LocationDictionaryItem arrivalDictionaryItem = locationsDictionary.get(flight.getArrival().getLocationCode());
      if (arrivalDictionaryItem != null) {
        jlFlight.setJlArrival(buildJlEndpoint(arrivalDictionaryItem, flight.getArrival()));
      }
    }
    jlFlight.setIsDomestic(FlightHelpers.isDomesticFlight(jlFlight));
    if (CUSTOM_AIRCRAFT_CODE.contains(jlFlight.getAircraftCode())) {
      jlFlight.setCustomAircraftCode(jlFlight.getAircraftCode());
    }
    return jlFlight;
  }

  /**
   * Build a JlFlight with the data in the order reply
   *
   * @param flightItem
   * @return jlFlightItem
   */
  public JLFlightItem buildJlFlightItem(FlightItem flightItem, List<String> upgradedFlightIds) {
    if (flightItem != null) {
      String statusCode = flightItem.getStatusCode();
      JLFlightItem jlFlightItem = new JLFlightItem();
      jlFlightItem.setId(flightItem.getId());
      jlFlightItem.setCabin(flightItem.getCabin());
      jlFlightItem.setBookingClass(flightItem.getBookingClass());
      jlFlightItem.setOperating(flightItem.getOperating());
      jlFlightItem.setDepartureDaysDifference(flightItem.getDepartureDaysDifference());
      jlFlightItem.setConnectionTime(flightItem.getConnectionTime());
      jlFlightItem.setArrivalDaysDifference(flightItem.getArrivalDaysDifference());
      if (CollectionUtils.isNotEmpty(upgradedFlightIds) && upgradedFlightIds.contains(flightItem.getId())) {
        jlFlightItem.setStatusCode(JLBookingStatus.UPGRADED.getCode());
      } else if (StringUtils.isNotBlank(statusCode) && JLBookingStatus.getWaitlistStatuses().contains(statusCode)) {
        jlFlightItem.setStatusCode(statusCode);
      }
      return jlFlightItem;
    }
    return null;
  }

  /**
   * Build a list of JlTraveler by adding the INF traveler as accompanied traveler to the accompanying traveler
   * associated
   *
   * @param travelers
   * @return jlTravelers
   */
  public List<JLTraveler> buildJlTravelers(List<Traveler> travelers) {
    List<JLTraveler> jlTravelers = new ArrayList<>();
    if (CollectionUtils.isNotEmpty(travelers)) {
      List<Traveler> infants =
          travelers.stream().filter(infant -> infant.getPassengerTypeCode().equals("INF")).toList();
      travelers.forEach(traveler -> {
        if (!traveler.getPassengerTypeCode().equals("INF")) {
          JLTraveler jlTraveler = new JLTraveler();
          jlTraveler.setFullName(getFullName(traveler));
          if (CollectionUtils.isNotEmpty(infants)) {
            Traveler accompaniedTraveler = infants.stream()
                .filter(infant -> infant.getAccompanyingTravelerId() != null
                    && infant.getAccompanyingTravelerId().equals(traveler.getId())
                    || (traveler.getAccompanyingTravelerId() != null
                        && traveler.getAccompanyingTravelerId().equals(infant.getId())))
                .findFirst()
                .orElse(null);
            if (accompaniedTraveler != null) {
              JLTraveler infant = new JLTraveler();
              infant.setFullName(getFullName(accompaniedTraveler));
              jlTraveler.setAccompaniedTraveler(infant);
            }
          }
          jlTravelers.add(jlTraveler);
        }
      });
    }
    return jlTravelers;
  }

  /**
   * Format the names of the traveler "LastName MiddleName firstName"
   *
   * @param traveler
   * @return formatted full name
   */
  public String getFullName(Traveler traveler) {
    StringBuilder builder = new StringBuilder();
    if (CollectionUtils.isNotEmpty(traveler.getNames())) {
      Name name = traveler.getNames().stream().filter((names -> names.getIsPreferred() != null && names.getIsPreferred())).findFirst().orElse(traveler.getNames().get(0));
      if (name != null) {
        if (StringUtils.isNotEmpty(name.getLastName())) {
          builder.append(name.getLastName().toUpperCase());
        }
        if (StringUtils.isNotEmpty(name.getMiddleName())) {
          if (StringUtils.isNotEmpty(builder)) {
            builder.append(StringUtils.SPACE);
          }
          builder.append(name.getMiddleName().toUpperCase());
        }
        if (StringUtils.isNotEmpty(name.getFirstName())) {
          if (StringUtils.isNotEmpty(builder)) {
            builder.append(StringUtils.SPACE);
          }
          builder.append(name.getFirstName().toUpperCase());
        }
        if (StringUtils.isNotEmpty(name.getTitle())) {
          if (StringUtils.isNotEmpty(builder)) {
            builder.append(StringUtils.SPACE);
          }
          builder.append(name.getTitle().toUpperCase());
        }
        return builder.toString();
      }
    }
    return StringUtils.EMPTY;
  }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\BoundHelpers.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.dapi.jalext.email.model.JLBookingStatus;
import com.amadeus.dapi.jalext.email.model.JLBound;
import com.amadeus.dapi.jalext.email.model.JLFlight;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Bound;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.DisruptionStatus;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.DisruptionStatus.BoundStatusEnum;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItem;
import org.apache.commons.collections.CollectionUtils;
import org.joda.time.LocalDateTime;
import org.joda.time.format.DateTimeFormat;

import java.util.List;
import java.util.stream.IntStream;

public final class BoundHelpers {

    /**
     * Check if the bound is confirmed with the Ids received as parameter
     *
     * @param bound
     * @param confirmedBoundIds
     * @return whether the bound is confirmed or not
     */
    public static boolean isBoundConfirmed(JLBound bound, List<String> confirmedBoundIds) {
        if (CollectionUtils.isNotEmpty(confirmedBoundIds)) {
            for (String id : confirmedBoundIds) {
                if (id.equals(bound.getAirBoundId()) || id.equals(getBoundCustomId(bound))) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Compute the bound custom id to do the comparaison with the ones received as query parameter
     *
     * @param bound
     * @return the bound custom id
     */
    public static String getBoundCustomId(JLBound bound) {
        StringBuilder customIdBuilder = new StringBuilder();
        if (CollectionUtils.isNotEmpty(bound.getFlightItemsList())) {
            JLFlight firstFlight = bound.getFlightItemsList().get(0).getFlight();
            JLFlight lastFlight = bound.getFlightItemsList().get(bound.getFlightItemsList().size() - 1).getFlight();
            if (firstFlight != null && firstFlight.getJlDeparture() != null && firstFlight.getJlDeparture().getLocation() != null) {
                customIdBuilder.append(firstFlight.getJlDeparture().getLocation().getCityCode());
            }
            customIdBuilder.append("_");
            if (lastFlight != null && lastFlight.getJlArrival() != null && lastFlight.getJlArrival().getLocation() != null) {
                customIdBuilder.append(lastFlight.getJlArrival().getLocation().getCityCode());
            }
            customIdBuilder.append("_");
            customIdBuilder.append(LocalDateTime.parse(bound.getDepartureTime().toString(), DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")));
        }
        return customIdBuilder.toString();
    }

    /**
     * Check if the bound is fully flown
     * Meaning that all the flights are flown
     *
     * @param bound
     * @return whether the bound is fully flown
     */
    public static boolean isBoundFullyFlown(Bound bound) {
        return CollectionUtils.isNotEmpty(bound.getFlights()) &&
                bound.getFlights().stream().allMatch(flight -> flight.getIsFlown() != null && flight.getIsFlown());
    }

    /**
     * Check if the bound is disrupted
     *
     * @param bound
     * @return whether the bound is disrupted
     */
    public static boolean isBoundDisrupted(Bound bound) {
        return bound.getDisruptionStatus() != null && DisruptionStatus.BoundStatusEnum.DISRUPTED.equals(bound.getDisruptionStatus().getBoundStatus());
    }

    /**
     * Check if the bound has a time change
     *
     * @param bound
     * @return whether the bound has a time change
     */
    public static boolean hasTimeChange(Bound bound, boolean isThirdPartyOrder) {
        BoundStatusEnum boundStatus = bound.getDisruptionStatus().getBoundStatus();
        boolean areFlightsIdsIdentical = CollectionUtils.isNotEmpty(bound.getFlights())
                && bound.getDisruptionStatus() != null && CollectionUtils.isNotEmpty(bound.getDisruptionStatus().getOriginalFlights())
                && IntStream.range(0, bound.getFlights().size()).allMatch(index -> {
                    if (bound.getDisruptionStatus().getOriginalFlights().get(index) != null) {
                        FlightItem flight = bound.getFlights().get(index);
                        return flight != null && flight.getId() != null
                                && flight.getId().equals(bound.getDisruptionStatus().getOriginalFlights().get(index).getId());
                    }
                    return false;
        });
        return areFlightsIdsIdentical && (BoundStatusEnum.DISRUPTED.equals(boundStatus)
                && (isThirdPartyOrder || (CollectionUtils.isNotEmpty(bound.getFlights())
                && bound.getFlights().stream().anyMatch(flight -> JLBookingStatus.CONFIRMING_WITH_NEW_TIMES.getCode().equals(flight.getStatusCode())))));
    }

    /**
     * Check if at least one of the bound flight items has the status passed in parameter
     *
     * @param bound
     * @param boundStatus
     * @return whether the bound has the status
     */
    private static boolean checkBoundStatus(JLBound bound, String boundStatus) {
        return CollectionUtils.isNotEmpty(bound.getFlightItemsList()) &&
                bound.getFlightItemsList().stream()
                        .filter(flightItem -> flightItem.getStatusCode() != null)
                        .anyMatch(flightItem -> flightItem.getStatusCode().equals(boundStatus));
    }

    /**
     * Check if the bound is upgraded
     *
     * @param bound
     * @return whether the bound is upgraded
     */
    public static boolean isBoundUpgraded(JLBound bound) {
        return checkBoundStatus(bound, JLBookingStatus.UPGRADED.getCode());
    }

    /**
     * Check if the bound is waitlist confirmed
     *
     * @param bound
     * @return whether the bound is waitlist confirmed
     */
    public static boolean isBoundWaitlistConfirmed(JLBound bound) {
        return checkBoundStatus(bound, JLBookingStatus.WAITLIST_CONFIRMED.getCode());
    }

    /**
     * Check if the bound is waitlisted
     *
     * @param bound
     * @return whether the bound is waitlisted
     */
    public static boolean isBoundWaitlisted(JLBound bound) {
        return checkBoundStatus(bound, JLBookingStatus.WAITLIST.getCode());
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\EmailHelpers.java

```

package com.amadeus.dapi.jalext.email.helpers;

import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.email.model.EmailInformation;

public final class EmailHelpers {

  private static final String DEFAULT_LANG = "en";
  private static final String DEFAULT_REGION = "GB";
  private static final String DEFAULT_SUBJECT = "JAL International Tickets Confirmation e-mail";
  private static final String DEFAULT_SENDER = "Japan Airlines Reservation <tktdial@jal.co.jp>";
  private static final String DEFAULT_BCC = "ecoint.confmail.rev.jp@ml.jal.com";

  public static Locale getLocale(String lang) {
    if (StringUtils.isEmpty(lang)) {
      return new Locale(DEFAULT_LANG, DEFAULT_REGION);
    }
    String[] localLang = lang.split("-");
    return new Locale(localLang[0], localLang[1]);
  }

  public static ResourceBundle getResourceBundle(String baseName, Locale locale) {
    try {
      return ResourceBundle.getBundle(baseName, locale);

    } catch (MissingResourceException e) {
      return ResourceBundle.getBundle(baseName, getLocale(""));
    }
  }

  public static String getSubject(EmailInformation emailInformation, ResourceBundle labels) {
    boolean isRefund = emailInformation.getRefundSummary() != null || emailInformation.getNoBreakdownRefundSummary() != null;
    return getStringOrDefault(labels, "email.subject" + (isRefund ? ".refund" : ""), DEFAULT_SUBJECT);
  }

  public static String getSender(EmailInformation emailInformation, ResourceBundle senders) {
    String market = emailInformation.getMarket();
    if (StringUtils.isNotBlank(market)) {
      return getStringOrDefault(senders, market, DEFAULT_SENDER);
    }
    return DEFAULT_SENDER;
  }

  public static String getBcc(EmailInformation emailInformation, ResourceBundle bccs) {
    String market = emailInformation.getMarket();
    if (StringUtils.isNotBlank(market)) {
      return getStringOrDefault(bccs, market, DEFAULT_BCC);
    }
    return DEFAULT_BCC;
  }

  private static String getStringOrDefault(ResourceBundle labels, String key, String defaultString) {
    if (labels == null) {
      return defaultString;
    }
    try {
      return labels.getString(key);
    } catch (MissingResourceException e) {
      return defaultString;
    }
  }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\FlightHelpers.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.dapi.jalext.email.model.JLFlight;
import com.amadeus.dapi.jalext.email.model.JLFlightEndpoint;

public class FlightHelpers {
    /**
     * Whether the flight is domestic (meaning departure & arrival endpoints have the JP country code)
     * @param flight
     *
     * @return true if the flight is domestic
     */
    public static boolean isDomesticFlight(JLFlight flight) {
        return isJPFlightEndpoint(flight.getJlDeparture()) && isJPFlightEndpoint(flight.getJlArrival());
    }

    /**
     * Whether the flight endpoint has a japanese location
     * @param flightEndpoint
     *
     * @return true if the flight endpoint has a japanese location
     */
    private static boolean isJPFlightEndpoint(JLFlightEndpoint flightEndpoint) {
        return flightEndpoint != null && flightEndpoint.getLocation() != null
                && flightEndpoint.getLocation().getCountryCode().equals("JP");
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\OrderHelpers.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.InsuranceItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderSeatItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderServiceItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.SeatRecord;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ServiceDescription;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;
import org.apache.commons.collections.CollectionUtils;

import java.util.Collection;
import java.util.List;
import java.util.Objects;

public final class OrderHelpers {

    private static final String UPGRADE_SERVICE_DESCRIPTION = "FQTU";

    private static final String JL_POINT_OF_SALE_OFFICE_ID_PATTERN = "JL";

    private static final String JL_ISSUING_OFFICE_ID_PATTERN = "JL0";

    /**
     * Whether the order is an FQTR order
     * @param order
     *
     * @return true if order is an FQTR order
     */
    public static Boolean isFQTROrder(Order order) {
        if (CollectionUtils.isNotEmpty(order.getTravelDocuments()) && CollectionUtils.isNotEmpty(order.getTravelDocuments().get(0).getPaymentTransactions())) {
            return PaymentHelpers.hasMilesPaymentType(order.getTravelDocuments().get(0).getPaymentTransactions());
        }
        return false;
    }

    /**
     * Gets the passenger type code of a specific traveler
     * @param order
     * @param id
     *
     * @return the passenger type code
     */
    public static String getTravelerPassengerType(Order order, String id) {
        return order.getTravelers()
                .stream()
                .filter(traveler -> traveler.getId().equals(id))
                .map(traveler -> traveler.getPassengerTypeCode()).findFirst().orElse(null);
    }

    /**
     * Whether the order has some chargeable services
     * @param order
     *
     * @return true if the order has some chargeable services
     */
    public static boolean hasSomeChargeableServices(Order order) {
        if (order != null) {
            List<String> chargeableInsuranceIds = CollectionUtils.isNotEmpty(order.getInsurances()) ? order.getInsurances().stream()
                    .map(InsuranceItem::getId)
                    .toList() : null;

            List<String> travelDocumentsServicesIds = CollectionUtils.isNotEmpty(order.getTravelDocuments()) ? order.getTravelDocuments().stream()
                    .filter(travelDocument -> CollectionUtils.isNotEmpty(travelDocument.getServiceIds()))
                    .flatMap(travelDocument -> travelDocument.getServiceIds().stream())
                    .filter(Objects::nonNull)
                    .toList() : null;

            List<String> travelDocumentsInsuranceIds = CollectionUtils.isNotEmpty(order.getTravelDocuments()) ? order.getTravelDocuments().stream()
                    .filter(travelDocument -> CollectionUtils.isNotEmpty(travelDocument.getInsuranceIds()))
                    .flatMap(travelDocument -> travelDocument.getInsuranceIds().stream())
                    .filter(Objects::nonNull)
                    .toList() : null;

            List<String> chargeableSeatsIds = getChargeableSeatsIds(order);

            List<String> chargeableServicesIds = getChargeableServicesIds(order);
            if (CollectionUtils.isNotEmpty(travelDocumentsServicesIds) || CollectionUtils.isNotEmpty(travelDocumentsInsuranceIds)) {
                return travelDocumentsServicesIds.stream().anyMatch(serviceId ->
                        (CollectionUtils.isNotEmpty(chargeableSeatsIds) && chargeableSeatsIds.contains(serviceId))
                                || (CollectionUtils.isNotEmpty(chargeableServicesIds) && chargeableServicesIds.contains(serviceId)))
                        || travelDocumentsInsuranceIds.stream().anyMatch(
                        insuranceId -> CollectionUtils.isNotEmpty(chargeableInsuranceIds) && chargeableInsuranceIds.contains(insuranceId));
            }
        }
        return false;
    }

    /**
     * Gets the chargeable seats ids from the order if any
     * @param order
     *
     * @return the chargeable seats ids from the order if any
     */
    private static List<String> getChargeableSeatsIds(Order order) {
        if (CollectionUtils.isNotEmpty(order.getSeats())) {
            return order.getSeats().stream()
                    .filter(seat -> CollectionUtils.isNotEmpty(seat.getSeatSelections())
                            && seat.getSeatSelections().stream().anyMatch(SeatRecord::getIsChargeable))
                    .map(OrderSeatItem::getId)
                    .toList();
        }
        return null;
    }

    /**
     * Gets the chargeable services ids from the order if any
     * @param order
     *
     * @return the chargeable services ids from the order if any
     */
    private static List<String> getChargeableServicesIds(Order order) {
        if (CollectionUtils.isNotEmpty(order.getServices())) {
            return order.getServices().stream()
                    .filter(OrderServiceItem::getIsChargeable)
                    .map(OrderServiceItem::getId)
                    .toList();
        }
        return null;
    }

    /**
     * Gets the upgraded flights ids from the order if any
     * @param order
     *
     * @return the upgraded flights ids from the order if any
     */
    public static List<String> getUpgradedFlightsIds(Order order) {
        if (CollectionUtils.isNotEmpty(order.getServices())) {
            return order.getServices().stream()
                    .filter(service -> CollectionUtils.isNotEmpty(service.getDescriptions())
                            && service.getDescriptions().stream().anyMatch(description ->
                            ServiceDescription.TypeEnum.SHORTTEXT.equals(description.getType())
                                    && UPGRADE_SERVICE_DESCRIPTION.equals(description.getContent()))
                    )
                    .map(OrderServiceItem::getFlightIds)
                    .flatMap(Collection::stream)
                    .toList();
        }
        return null;
    }

    /**
     * Whether the order has mixed currencies
     * @param order
     *
     * @return true if the order has mixed currencies
     */
    public static boolean hasOrderMixedCurrencies(Order order) {
        if (CollectionUtils.isNotEmpty(order.getTravelDocuments())) {
            return order.getTravelDocuments().stream().anyMatch(travelDoc -> {
                if (travelDoc.getPrice() != null && CollectionUtils.isNotEmpty(travelDoc.getPrice().getTaxes())) {
                    return travelDoc.getPrice().getTaxes().stream().anyMatch(tax -> !(tax.getCurrencyCode().equals(travelDoc.getPrice().getCurrencyCode())));
                }
                return false;
            });
        }
        return false;
    }

    /**
     * Whether the order is third party
     * @param order
     *
     * @return true if the order is third party
     */
    public static boolean isThirdPartyOrder(Order order) {
        if (order != null) {
            String pointOfSaleOfficeId = null;
            String issuingOfficeId = null;
            if (order.getCreationPointOfSale() != null) {
                pointOfSaleOfficeId = order.getCreationPointOfSale().getPointOfSaleId();
            }
            if (CollectionUtils.isNotEmpty(order.getTravelDocuments())) {
                TravelDocument travelDocument = order.getTravelDocuments().get(0);
                if (travelDocument.getCreation() != null && travelDocument.getCreation().getOffice() != null) {
                    issuingOfficeId = travelDocument.getCreation().getOffice().getOfficeId();
                }
            }
            return (pointOfSaleOfficeId != null && pointOfSaleOfficeId.length() >= 5 && !JL_POINT_OF_SALE_OFFICE_ID_PATTERN.equals(pointOfSaleOfficeId.substring(3, 5)))
                    || (issuingOfficeId != null && issuingOfficeId.length() >= 6 && !JL_ISSUING_OFFICE_ID_PATTERN.equals(issuingOfficeId.substring(3, 6)));
        }
    return false;
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\PaymentHelpers.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.PaymentMethod;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.PaymentTransaction;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.List;

/**
 * Payment Util class
 */
public final class PaymentHelpers {

    public static final String METHOD_OF_PAYMENT_EJAL_POINTS = "WE";

    public static final String METHOD_OF_PAYMENT_CREDIT_CARD = "CC";

    /**
     * Whether the order has a miles payment type
     * @param transactions
     *
     * @return true if the order has a miles payment type
     */
    public static boolean hasMilesPaymentType(List<PaymentTransaction> transactions) {
        return transactions.stream()
                .anyMatch(paymentTransaction ->
                        paymentTransaction.getPaymentMethod() != null && paymentTransaction.getPaymentMethod().getPaymentType() != null &&
                                paymentTransaction.getPaymentMethod().getPaymentType().name().equalsIgnoreCase(PaymentMethod.PaymentTypeEnum.MILESPAYMENT.name()));
    }

    /**
     * Gets the payment method id
     * Returns the credit card method in case of mixed payment with credit card (e.g eJalPoints/credit card)
     * @param transactions
     *
     * @return the payment method id
     */
    public static String getPaymentMethodId(List<PaymentTransaction> transactions) {
        if (CollectionUtils.isNotEmpty(transactions) && transactions.get(0).getPaymentMethod() != null) {
            if (transactions.stream().anyMatch(paymentTransaction ->
                    paymentTransaction.getPaymentMethod() != null && METHOD_OF_PAYMENT_CREDIT_CARD.equals(paymentTransaction.getPaymentMethod().getId()))) {
                return METHOD_OF_PAYMENT_CREDIT_CARD;
            }
            return transactions.get(0).getPaymentMethod().getId();
        }
      return StringUtils.EMPTY;
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\RefundHelpers.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.dapi.jalext.email.model.JLNoBreakdownRefundSummary;
import com.amadeus.dapi.jalext.email.model.JLRefundBreakdown;
import com.amadeus.dapi.jalext.email.model.JLRefundSummary;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ConfidentialRemark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.CorporateRemark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.GeneralRemark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Remark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;
import com.amadeus.jal.dapi.model.core.CurrencyDictionaryItemView;
import com.amadeus.jal.dapi.model.core.OrderAppliedRefundOptionsItemView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundDictionaryView;
import com.amadeus.jal.dapi.model.core.RefundPaymentTransactionView;
import com.amadeus.jal.dapi.model.core.TaxView;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.ListUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

public final class RefundHelpers {

    public static final String PRICE_PATTERN_3 = "[s] xx[d]xxx[v]xx ([c])";

    public static final String PRICE_PATTERN_5 = "xx[d]xxxå††";

    public static final String PRICE_PATTERN_6 = "[s]xx[d]xxx ([c])";

    public static final String PRICE_PATTERN_7 = "xx[d]xxx[v]xx [s] ([c])";

    private static final ArrayList<String> PRICE_PATTERN_3_CURRENCIES = new ArrayList<>(List.of("USD", "CAD", "AUD", "HKD", "SGD", "MYR"));

    private static final ArrayList<String> PRICE_PATTERN_6_CURRENCIES = new ArrayList<>(List.of("CNY", "TWD", "THB", "KRW", "IDR", "INR"));

    private static final ArrayList<String> PRICE_PATTERN_7_CURRENCIES = new ArrayList<>(List.of("EUR", "CHF", "GBP"));

    private static final ArrayList<String> PAX_TYPES_ORDER = new ArrayList<>(List.of("ADT", "B15", "CHD", "INF", "INS"));
    /**
     * Build the refund summary with the refund options and the order
     *
     * @param refundOptions
     * @param order
     * @return refundSummary
     */
    public static JLRefundSummary buildBreakdownRefundSummary(List<OrderAppliedRefundOptionsItemView> refundOptions, Order order,
            OrderCancelAndRefundDictionaryView refundDictionaryView, String lang, ResourceBundle currencySymbols) {
        JLRefundSummary refundSummary = null;
        Map<String, JLRefundBreakdown> refundBreakdowns = new HashMap<>();
        BigDecimal totalRefundedAmount = BigDecimal.ZERO;
        BigDecimal totalRefundedEjalPointAmount = BigDecimal.ZERO;

        for (OrderAppliedRefundOptionsItemView option : refundOptions) {
            if (CollectionUtils.isEmpty(option.getTravelerIds()) || StringUtils.isEmpty(option.getTravelerIds().get(0)))
                continue;

            String passengerCode = OrderHelpers.getTravelerPassengerType(order, option.getTravelerIds().get(0));
            if (StringUtils.isEmpty(passengerCode) || option.getRefundAmounts() == null
                    || option.getRefundAmounts().getTotal() == null)
                continue;

            JLRefundBreakdown jlRefundBreakdown = refundBreakdowns.get(passengerCode);
            if (jlRefundBreakdown == null) {
                jlRefundBreakdown = new JLRefundBreakdown();
                jlRefundBreakdown.setPassengerTypeCode(passengerCode);
                jlRefundBreakdown.setPassengerQuantity(0);
                jlRefundBreakdown.setRefundedAmount(BigDecimal.ZERO);
                jlRefundBreakdown.setPaidAmount(BigDecimal.ZERO);
                jlRefundBreakdown.setUsedAmount(BigDecimal.ZERO);
            }
            BigDecimal refundedEjalPointAmount = BigDecimal.ZERO;
            for (RefundPaymentTransactionView paymentTransaction : option.getPaymentDetails()) {
                if (PaymentHelpers.METHOD_OF_PAYMENT_EJAL_POINTS.equals(paymentTransaction.getPaymentMethod().getId()) &&
                        paymentTransaction.getAmount() != null) {
                    refundedEjalPointAmount = refundedEjalPointAmount.add(new BigDecimal((paymentTransaction.getAmount().getValue())));
                }
            }

            BigDecimal refundedAmount =  new BigDecimal(option.getRefundAmounts().getTotal().getValue());
            totalRefundedAmount = totalRefundedAmount.add(refundedAmount);
            totalRefundedEjalPointAmount = totalRefundedEjalPointAmount.add(refundedEjalPointAmount);

            if (refundedAmount.equals(BigDecimal.ZERO) && !refundedEjalPointAmount.equals(BigDecimal.ZERO)) {
                refundedAmount = refundedEjalPointAmount;
            }

            jlRefundBreakdown.setPassengerQuantity(jlRefundBreakdown.getPassengerQuantity() + 1);
            jlRefundBreakdown
                    .setRefundedAmount(jlRefundBreakdown.getRefundedAmount().add(refundedAmount));
            jlRefundBreakdown.setUsedAmount(jlRefundBreakdown.getUsedAmount().add(
                    new BigDecimal(option.getUsedAmount().getBase().getValue()).add(RefundHelpers.getTotalTaxes(option.getUsedAmount().getTaxes()))
            ));
            jlRefundBreakdown.setPaidAmount(jlRefundBreakdown.getPaidAmount().add(
                    new BigDecimal(option.getPaidAmount().getBase().getValue()).add(RefundHelpers.getTotalTaxes(option.getPaidAmount().getTaxes()))
            ));

            refundBreakdowns.put(passengerCode, jlRefundBreakdown);
        }

        if (MapUtils.isNotEmpty(refundBreakdowns)) {
            refundSummary = new JLRefundSummary();
            BigDecimal Total = totalRefundedAmount.subtract(totalRefundedEjalPointAmount);
            if (CollectionUtils.isNotEmpty(refundOptions) && refundOptions.get(0).getRefundAmounts() != null
                    && refundOptions.get(0).getRefundAmounts().getBase() != null ) {
                String currencyCode = refundOptions.get(0).getRefundAmounts().getBase().getCurrencyCode();
                refundSummary.setCurrencyCode(currencyCode);
                refundSummary.setCurrencySymbol(currencySymbols.getString(currencyCode));
                if (refundDictionaryView != null && MapUtils.isNotEmpty(refundDictionaryView.getCurrency())) {
                    Map<String, CurrencyDictionaryItemView> currenciesDictionary = refundDictionaryView.getCurrency();
                    if (currenciesDictionary.get(currencyCode) != null) {
                        refundSummary.setDecimalPlaces(currenciesDictionary.get(currencyCode).getDecimalPlaces());
                    }
                    refundSummary.setPricePattern(getPricePattern(currencyCode, lang));
                }
            }

            refundSummary.setTotal(Total);
            refundSummary.setRefundBreakdowns(getOrderedBreakdowns(refundBreakdowns));
            refundSummary.setRefundedEjalPoints(totalRefundedEjalPointAmount);
        }
        return refundSummary;
    }

    /**
     * Order the breakdowns to always have the same order (ADT - B15 - CHD - INF - INS)
     *
     * @param breakdownsMap

     * @return the ordered breakdowns
     */
    public static List<JLRefundBreakdown> getOrderedBreakdowns(Map<String, JLRefundBreakdown> breakdownsMap) {
        List<String> filteredPaxTypes = PAX_TYPES_ORDER.stream().filter(paxType -> breakdownsMap.containsKey(paxType)).collect(Collectors.toList());
        return CollectionUtils.isNotEmpty(filteredPaxTypes) ? filteredPaxTypes.stream().map((paxType) -> breakdownsMap.get(paxType)).collect(Collectors.toList()) : ListUtils.EMPTY_LIST;
    }

    public static BigDecimal getTotalTaxes(List<TaxView> taxes) {
        if (CollectionUtils.isNotEmpty(taxes)) {
            BigDecimal totalTaxes = BigDecimal.ZERO;
            for (TaxView tax: taxes) {
                totalTaxes = totalTaxes.add(new BigDecimal(tax.getValue()));
            }
            return totalTaxes;
        }
        return BigDecimal.ZERO;
    }

    /**
     * Build the refund summary with no breakdown for redemption and back up flow
     *
     * @param refundOptions
     * @param isRevenueManuallyRefundable
     * @return the refund summary with no breakdown
     */
    public static JLNoBreakdownRefundSummary buildNoBreakdownRefundSummary(List<OrderAppliedRefundOptionsItemView> refundOptions, Boolean isRevenueManuallyRefundable,
            OrderCancelAndRefundDictionaryView refundDictionaryView, String lang, ResourceBundle currencySymbols) {
        JLNoBreakdownRefundSummary refundSummary = new JLNoBreakdownRefundSummary();
        refundSummary.setTotalTaxes(BigDecimal.ZERO);
        if (isRevenueManuallyRefundable) {
            refundSummary.setBasePrice(BigDecimal.ZERO);
            refundSummary.setTotalPrice(BigDecimal.ZERO);
        }

        if (CollectionUtils.isNotEmpty(refundOptions)) {
            for (OrderAppliedRefundOptionsItemView option : refundOptions) {
                if (option.getRefundAmounts() != null) {
                    if (isRevenueManuallyRefundable) {
                        if (option.getRefundAmounts().getBase() != null) {
                            refundSummary.setBasePrice(refundSummary.getBasePrice().add(new BigDecimal(option.getRefundAmounts().getBase().getValue())));
                        }
                        if (option.getRefundAmounts().getTotal() != null) {
                            refundSummary.setTotalPrice(refundSummary.getTotalPrice().add(new BigDecimal(option.getRefundAmounts().getTotal().getValue())));
                        }
                    }
                    if (option.getRefundAmounts().getTotalTaxes() != null) {
                        refundSummary.setTotalTaxes(refundSummary.getTotalTaxes().add(new BigDecimal(option.getRefundAmounts().getTotalTaxes().getValue())));
                    }
                }
            }
            if (CollectionUtils.isNotEmpty(refundOptions) && refundOptions.get(0).getRefundAmounts() != null
                    && refundOptions.get(0).getRefundAmounts().getTotalTaxes() != null) {
                String currencyCode = refundOptions.get(0).getRefundAmounts().getTotalTaxes().getCurrencyCode();
                refundSummary.setCurrencyCode(currencyCode);
                refundSummary.setCurrencySymbol(currencySymbols.getString(currencyCode));
                if (refundDictionaryView != null && MapUtils.isNotEmpty(refundDictionaryView.getCurrency())) {
                    Map<String, CurrencyDictionaryItemView> currenciesDictionary = refundDictionaryView.getCurrency();
                    if (currenciesDictionary.get(currencyCode) != null) {
                        refundSummary.setDecimalPlaces(currenciesDictionary.get(currencyCode).getDecimalPlaces());
                    }
                    refundSummary.setPricePattern(getPricePattern(currencyCode, lang));
                }
            }
            return refundSummary;
        }
        return null;
    }


    /**
     * Whether the refund notice should be displayed
     *
     * @param order
     * @return true if the notice should be displayed
     */
    public static boolean shouldDisplayRefundNotice(Order order) {
        if (CollectionUtils.isNotEmpty(order.getTravelDocuments())) {
            TravelDocument travelDocument = order.getTravelDocuments().stream()
                    .filter(document -> document.getDocumentType().equals(TravelDocument.DocumentTypeEnum.ETICKET))
                    .findFirst()
                    .orElse(null);
            if (travelDocument != null && CollectionUtils.isNotEmpty(travelDocument.getPaymentTransactions())) {
                Boolean isMilesPayment = travelDocument.getPaymentTransactions().stream()
                        .anyMatch(paymentTransaction -> paymentTransaction.getAmount() != null && paymentTransaction.getAmount().getCurrencyCode().equals("MIL"));
                return !isMilesPayment && CollectionUtils.isNotEmpty(order.getRemarks()) &&
                        order.getRemarks().stream().anyMatch(remark -> getRemarkFreeText(remark).matches("MCP PERFORMED"));
            }
        }
        return false;
    }

    /**
     * Gets the free text from the remark
     *
     * @param remark
     * @return the free text from the remark
     */
    private static String getRemarkFreeText(Remark remark) {
        if (remark instanceof GeneralRemark) {
            return ((GeneralRemark)remark).getFreetext().toUpperCase();
        } else if (remark instanceof CorporateRemark) {
            return ((CorporateRemark)remark).getFreetext().toUpperCase();
        }
        return ((ConfidentialRemark)remark).getFreetext().toUpperCase();
    }

    /**
     * Compute the price pattern to be used according to the currency code
     *
     * @param currencyCode
     * @param lang
     * @return the price pattern to be used
     */
    private static String getPricePattern(String currencyCode, String lang) {
        if (StringUtils.isNotBlank(currencyCode)) {
            if (currencyCode.equals("JPY")) {
                if (StringUtils.isNotBlank(lang) && lang.contains("JP")) {
                    return PRICE_PATTERN_5;
                } else {
                    return PRICE_PATTERN_6;
                }
            }
            if (PRICE_PATTERN_3_CURRENCIES.contains(currencyCode)) {
                return PRICE_PATTERN_3;
            }
            if (PRICE_PATTERN_6_CURRENCIES.contains(currencyCode)) {
                return PRICE_PATTERN_6;
            }
            if (PRICE_PATTERN_7_CURRENCIES.contains(currencyCode)) {
                return PRICE_PATTERN_7;
            }
        }
        return PRICE_PATTERN_3;
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\EmailInformation.java

```
package com.amadeus.dapi.jalext.email.model;

import lombok.Data;

import java.util.List;

@Data
public class EmailInformation {

    private String orderId;

    private String market;

    private String from;

    private String bcc;

    private String maskedConfirmationEmail;

    private List<JLBound> bounds;

    private List<JLTraveler> travelers;

    private Boolean isRevenue;

    private Boolean isRefund;

    private Boolean hasEstaCountries;

    private List<String> originDestinationCountriesList;

    private JLRefundSummary refundSummary;

    private JLNoBreakdownRefundSummary noBreakdownRefundSummary;

    private Boolean shouldDisplayRefundNotice;

    private Boolean shouldDisplayServiceText;

    private Boolean shouldDisplayMilesInfoText;

    private Boolean shouldDisplayNoticeFopMessage;

    private Boolean hasSomeChargeableServices;

    private Boolean isRevenueManuallyRefundable;

    private Boolean shouldDisplayMixedCurrencyMessage;

    private String refundedFOP;

    private List<String> warningCodes;

    private List<String> errorCodes;

    private String assetsUri;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLBookingStatus.java

```
package com.amadeus.dapi.jalext.email.model;

import lombok.Getter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * JLBookingStatus
 * This enum describes the booking status of a flight
 *
 */
public enum JLBookingStatus {

    UPGRADED("UPGD"),
    CONFIRMING_WITH_NEW_TIMES("TK"),
    WAITLIST_CONFIRMED("KL"),
    WAITLIST("HL");

    @Getter
    private final String code;

    JLBookingStatus(String code) {
        this.code = code;
    }

    /**
     * Retrieves all JLBookingStatuses that are considered waitlist
     */
    public static List<String> getWaitlistStatuses() {
        return new ArrayList<>(List.of(JLBookingStatus.WAITLIST.getCode(), JLBookingStatus.WAITLIST_CONFIRMED.getCode()));
    }
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLBound.java

```
package com.amadeus.dapi.jalext.email.model;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.Bound;
import lombok.Data;
import org.joda.time.LocalDateTime;

import java.util.List;

@Data
public class JLBound extends Bound {

    private List<JLFlightItem> flightItemsList;

    private String arrivalLocationCityCode;

    private String departureLocationCityCode;

    private JLBound originalBound;

    private LocalDateTime departureTime;

    private Boolean isDisrupted;

    private Boolean isNewProposal;

    private Boolean isTimeChange;

    private Boolean isConfirmed;

    private Boolean isWaitlisted;

    private Boolean isWaitlistConfirmed;

    private Boolean isUpgraded;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLFlight.java

```
package com.amadeus.dapi.jalext.email.model;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.Flight;
import lombok.Data;

@Data
public class JLFlight extends Flight {

    private JLFlightEndpoint jlArrival;

    private JLFlightEndpoint jlDeparture;

    private Boolean isDomestic;

    private String customAircraftCode;

    private Boolean isOperatedByJal;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLFlightEndpoint.java

```
package com.amadeus.dapi.jalext.email.model;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightEndPoint;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.LocationDictionaryItem;
import lombok.Data;

@Data
public class JLFlightEndpoint extends FlightEndPoint {

    private LocationDictionaryItem location;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLFlightItem.java

```
package com.amadeus.dapi.jalext.email.model;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItem;
import lombok.Data;

@Data
public class JLFlightItem extends FlightItem {

    private JLFlight flight;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLNoBreakdownRefundSummary.java

```
package com.amadeus.dapi.jalext.email.model;

import lombok.Data;

import java.math.BigDecimal;

@Data
public class JLNoBreakdownRefundSummary {
    private BigDecimal totalTaxes;

    private BigDecimal basePrice;

    private BigDecimal totalPrice;

    private String currencySymbol;

    private String currencyCode;

    private Integer decimalPlaces;

    private String pricePattern;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLRefundBreakdown.java

```
package com.amadeus.dapi.jalext.email.model;

import lombok.Data;

import java.math.BigDecimal;

@Data
public class JLRefundBreakdown {

    private String passengerTypeCode;

    private Integer passengerQuantity;

    private BigDecimal paidAmount;

    private BigDecimal usedAmount;

    private BigDecimal refundedAmount;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLRefundSummary.java

```
package com.amadeus.dapi.jalext.email.model;

import lombok.Data;

import java.math.BigDecimal;
import java.util.List;

@Data
public class JLRefundSummary {

    private List<JLRefundBreakdown> refundBreakdowns;

    private BigDecimal total;

    private BigDecimal refundedEjalPoints;

    private String currencySymbol;

    private String currencyCode;

    private Integer decimalPlaces;

    private String pricePattern;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLTraveler.java

```
package com.amadeus.dapi.jalext.email.model;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.Traveler;
import lombok.Data;

@Data
public class JLTraveler extends Traveler {

    private JLTraveler accompaniedTraveler;

    private String fullName;
}

```

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\service\EmailService.java

```
package com.amadeus.dapi.jalext.email.service;

import java.io.IOException;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.CollectionUtils;

import com.amadeus.dapi.jalext.email.builder.EmailInformationBuilder;
import com.amadeus.dapi.jalext.email.model.EmailInformation;
import com.amadeus.dapi.jalext.email.helpers.EmailHelpers;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundReplyView;
import com.amadeus.pelican.common.fwk.core.configuration.DapiServiceConfiguration;
import com.amadeus.pelican.common.fwk.core.jaxrs.PelicanJaxRsProvider;
import com.amadeus.tds.emaildeliveries.api.RestapiEmailDeliveriesApi;
import com.amadeus.tds.emaildeliveries.model.Email;
import com.amadeus.tds.emaildeliveries.model.Email.EmailAddressTypeEnum;
import com.amadeus.tds.emaildeliveries.model.EmailDelivery;
import com.amadeus.tds.emaildeliveries.model.EmailDeliveryBody;
import com.amadeus.tds.emaildeliveries.model.EmailMessage;
import com.amadeus.tds.emaildeliveries.model.QualifiedFreeText;
import com.amadeus.tds.emaildeliveries.model.QualifiedFreeText.CharSetEnum;
import com.amadeus.tds.emaildeliveries.model.QualifiedFreeText.EncodingEnum;
import com.amadeus.tds.emaildeliveries.model.QualifiedFreeText.IanaContentTypeEnum;

import freemarker.core.ParseException;
import freemarker.ext.beans.BeansWrapper;
import freemarker.ext.beans.BeansWrapperBuilder;
import freemarker.ext.beans.ResourceBundleModel;
import freemarker.template.Configuration;
import freemarker.template.TemplateException;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;

@Named
@Slf4j
public class EmailService {

  private static final String EMAIL_ERROR_CODE = "email-error";

  private static final String EMAIL_ERROR_TITLE = "Confirmation email could not been sent";

  private static final String EMAIL_SENDING_ERROR_LOG = "Error when sending the confirmation email";

  private static final String MASKING_CHAR = "*";

  private static final String AT_SIGN = "@";

  private static final Integer EMAIL_LENGTH_THRESHOLD = 10;

  private static final Integer EMAIL_MAX_DISPLAYED_CHARS = 5;

  private final PelicanJaxRsProvider pelicanProvider;

  private final DapiServiceConfiguration dapiServiceConfiguration;

  private final Configuration freeMarkerConfiguration;

  private final EmailInformationBuilder emailInformationBuilder;

  @Inject
  public EmailService(PelicanJaxRsProvider pelicanProvider,
      DapiServiceConfiguration dapiServiceConfiguration,
      Configuration freeMarkerConfiguration,
      EmailInformationBuilder emailInformationBuilder) {
    this.pelicanProvider = pelicanProvider;
    this.dapiServiceConfiguration = dapiServiceConfiguration;
    this.freeMarkerConfiguration = freeMarkerConfiguration;
    this.emailInformationBuilder = emailInformationBuilder;
  }

  public Response sendEmailWithHtmlContent(String from, String to, String bcc, String subject, String htmlContent) {
    String mailContent = Base64.getEncoder().encodeToString(htmlContent.getBytes(StandardCharsets.UTF_8));
    EmailDelivery emailDelivery = (new EmailDelivery()).data((new EmailDeliveryBody())
        .emailMessage((new EmailMessage())
            .fromAddress((new Email()).address(from).emailAddressType(EmailAddressTypeEnum.EMAIL_ID))
            .toAddresses(Collections.singletonList((new Email()).address(to)
                .emailAddressType(EmailAddressTypeEnum.EMAIL_ID)))
            .bccAddresses(Collections.singletonList((new Email()).address(bcc)
                .emailAddressType(EmailAddressTypeEnum.EMAIL_ID)))
            .subject(subject)
            .textBody((new QualifiedFreeText())
                .text(mailContent)
                .ianaContentType(IanaContentTypeEnum.TEXT_HTML)
                .charSet(CharSetEnum.UTF_8)
                .encoding(EncodingEnum.BASE_64))));
    RestapiEmailDeliveriesApi api = pelicanProvider.createNoPathSuffix(
        RestapiEmailDeliveriesApi.class,
        dapiServiceConfiguration.getClientSettings());
    return Response.status(api.emailDeliveries(emailDelivery, null).getStatus()).build();
  }

  public Response sendEmail(EmailInformation emailInformation, String lang, String confirmationEmailAddress) {
    try {
      String mailContent = getMailContent(emailInformation, lang);
      if (StringUtils.isNotEmpty(mailContent)) {
        ResourceBundle labels =
                EmailHelpers.getResourceBundle("assets.i18n.localizations.localizations", EmailHelpers.getLocale(lang));
        ResourceBundle senders =
                EmailHelpers.getResourceBundle("assets.data.senders", EmailHelpers.getLocale(lang));
        ResourceBundle bccs =
                EmailHelpers.getResourceBundle("assets.data.bccs", EmailHelpers.getLocale(lang));
        String from = EmailHelpers.getSender(emailInformation, senders);
        String subject = EmailHelpers.getSubject(emailInformation, labels);
        String bcc = EmailHelpers.getBcc(emailInformation, bccs);
        return sendEmailWithHtmlContent(from, confirmationEmailAddress, bcc, subject, mailContent);
      }
    } catch (Exception e) {
        log.error("Error when sending the email", e);
    }
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
  }

  public Response sendConfirmationEmail(
          OrderReply orderReply,
          String lang,
          String confirmationEmailAddress,
          List<String> errorCodes,
          List<String> warningCodes,
          List<String> confirmedBoundIds,
          String assetsUri,
          String market
  ) {
    EmailInformation emailInformation = emailInformationBuilder
            .buildRebookEmailInformation(orderReply, errorCodes, warningCodes, confirmedBoundIds, assetsUri, market);
    if (emailInformation != null && StringUtils.isNotEmpty(confirmationEmailAddress)) {
      emailInformation.setMaskedConfirmationEmail(getMaskedEmail(confirmationEmailAddress).toLowerCase());
      Response emailDeliveryResponse = this.sendEmail(emailInformation, lang, confirmationEmailAddress);
      if (emailDeliveryResponse.getStatus() != 0 && HttpStatus.resolve(emailDeliveryResponse.getStatus()).is2xxSuccessful()) {
        return emailDeliveryResponse;
      } else {
        log.error(EMAIL_SENDING_ERROR_LOG);
      }
    }
    ErrorMessage emailError = new ErrorMessage();
    emailError.setCode(EMAIL_ERROR_CODE);
    emailError.setTitle(EMAIL_ERROR_TITLE);
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(emailError).build();
  }

  public Response sendRefundEmail(OrderReply orderReply, OrderCancelAndRefundReplyView cancelAndRefundReplyView,
      String lang, String confirmationEmailAddress, Boolean isManuallyRefundable, String assetsUri, String market) {
    EmailInformation emailInformation =
        emailInformationBuilder.buildRefundEmailInformation(orderReply, cancelAndRefundReplyView, isManuallyRefundable, lang, assetsUri, market);
    if (emailInformation != null && StringUtils.isNotEmpty(confirmationEmailAddress)) {
      emailInformation.setMaskedConfirmationEmail(getMaskedEmail(confirmationEmailAddress).toLowerCase());
      Response emailDeliveryResponse = this.sendEmail(emailInformation, lang, confirmationEmailAddress);
      if (emailDeliveryResponse.getStatus() != 0 && HttpStatus.resolve(emailDeliveryResponse.getStatus()).is2xxSuccessful()) {
        return emailDeliveryResponse;
      } else {
        log.error(EMAIL_SENDING_ERROR_LOG);
      }
    }
    ErrorMessageView emailError = new ErrorMessageView();
    emailError.setCode(EMAIL_ERROR_CODE);
    emailError.setTitle(EMAIL_ERROR_TITLE);
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(emailError).build();
  }

  public String getMailContent(EmailInformation emailInformation, String lang) {
    StringWriter content = new StringWriter();
    try {
      Map<String, Object> data = new HashMap<>();
      Locale locale = EmailHelpers.getLocale(lang);

      ResourceBundle localizations = EmailHelpers.getResourceBundle("assets.i18n.localizations.localizations", locale);
      ResourceBundle cities = EmailHelpers.getResourceBundle("assets.i18n.cities.cities", locale);
      ResourceBundle airports = EmailHelpers.getResourceBundle("assets.i18n.airports.airports", locale);
      ResourceBundle airlines = EmailHelpers.getResourceBundle("assets.i18n.airlines.airlines", locale);
      BeansWrapper beansWrapper = new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build();

      data.put("localizations", new ResourceBundleModel(localizations, beansWrapper));
      data.put("cities", new ResourceBundleModel(cities, beansWrapper));
      data.put("airports", new ResourceBundleModel(airports, beansWrapper));
      data.put("airlines", new ResourceBundleModel(airlines, beansWrapper));
      FilterMessagesCodes(emailInformation, localizations);
      data.put("data", emailInformation);
      data.put("lang", locale.getLanguage());
      data.put("langRegion", locale.getCountry());
      freeMarkerConfiguration.setClassForTemplateLoading(this.getClass(), "/templates/");
      freeMarkerConfiguration.setLocale(locale);
      freeMarkerConfiguration.getTemplate("email.ftl").process(data, content);
      String contents = content.getBuffer().toString();
      contents = contents.replaceAll(
              "<a(?! class=\"jal-icon\")",
              "<img src=\""+emailInformation.getAssetsUri()+"/img/page/external-link.png\" width=\"10\" height=\"8\" alt=\"external-link\" /><a"
      );
      return contents;
    } catch (ParseException e) {
      log.error("Invalid template", e);
    } catch (IOException e) {
      log.error("Template could not be read", e);
    } catch (TemplateException e) {
      log.error("Could not generate email", e);
    } catch (Exception e) {
      log.error("Error when generating the email template", e);
    }
    return null;
  }

  public void FilterMessagesCodes(EmailInformation emailInformation, ResourceBundle translations) {
    List<String> filteredWarningCodes = new ArrayList<>();
    List<String> filteredErrorCodes = new ArrayList<>();

    if (CollectionUtils.isNotEmpty(emailInformation.getWarningCodes())) {
      for (String warningCode : emailInformation.getWarningCodes()) {
        if (translations.containsKey("warning.DAPI/" + warningCode)) {
          filteredWarningCodes.add(warningCode);
        }
      }
      emailInformation.setWarningCodes(filteredWarningCodes);
    }

    if (CollectionUtils.isNotEmpty(emailInformation.getErrorCodes())) {
      for (String errorCode : emailInformation.getErrorCodes()) {
        if (translations.containsKey("error.DAPI/" + errorCode)) {
          filteredErrorCodes.add(errorCode);
        }
      }
      emailInformation.setErrorCodes(filteredErrorCodes);
    }
  }

  /**
   * Mask the email according to following logic:
   * - if the email length before "@" is bigger than threshold (10), the masked part will be the length - 5 starting from the start
   * - else if the email length before "@" is less than threshold (10), masked part will be length/2 + length%2
   *
   * @param email
   * @return masked email
   */
  public String getMaskedEmail(String email) {
    if (StringUtils.isNotBlank(email)) {
      String stringToMasked = email.split(AT_SIGN)[0];
      Integer numberOfChars = stringToMasked.length();
      int charactersToMask;
      if (stringToMasked.length() > EMAIL_LENGTH_THRESHOLD) {
        charactersToMask = numberOfChars - EMAIL_MAX_DISPLAYED_CHARS;
      } else {
        charactersToMask = numberOfChars / 2 + numberOfChars % 2;
      }
      String maskedString = String.format(String.format("%%%ds", charactersToMask), " ").replace(" ", MASKING_CHAR)
              + stringToMasked.substring(charactersToMask);
      return maskedString + AT_SIGN + email.split(AT_SIGN)[1];
    }
    return StringUtils.EMPTY;
  }
}

```

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\builder\EmailInformationBuilderTest.java

```
package com.amadeus.dapi.jalext.email.builder;

import com.amadeus.dapi.jalext.email.model.EmailInformation;
import com.amadeus.dapi.jalext.email.model.JLBookingStatus;
import com.amadeus.dapi.jalext.email.model.JLBound;
import com.amadeus.dapi.jalext.email.model.JLFlight;
import com.amadeus.dapi.jalext.email.model.JLFlightEndpoint;
import com.amadeus.dapi.jalext.email.model.JLFlightItem;
import com.amadeus.dapi.jalext.email.model.JLTraveler;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Bound;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.CreationPointOfSale;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.DisruptionStatus;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Flight;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightEndPoint;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItemOperating;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.LocationDictionaryItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Name;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderAirItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderDictionary;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Traveler;

import org.apache.commons.collections.ListUtils;
import org.joda.time.DateTime;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Answers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class EmailInformationBuilderTest {

    private static final String CUSTOM_AIRCRAFT_CODE = "777";

    private static final String DEPARTURE_TIME = "2065-02-15T20:40:00+02:00";

    private static final String HND_CODE = "HND";

    private static final String TYO_CODE = "TYO";

    private static final String LHR_CODE = "LHR";

    private static final String LON_CODE = "LON";

    private static final String PAR_CODE = "PAR";

    @InjectMocks
    EmailInformationBuilder emailInformationBuilder;

    @Mock
    OrderReply orderReply;

    @Mock
    Order order;

    @Mock
    OrderAirItem air;

    @Mock
    Bound bound;

    @Mock
    FlightItem flight;

    @Mock
    FlightItem originalFlight;

    @Mock
    Flight dictionaryFlight;

    @Mock
    Flight originalDictionaryFlight;

    @Mock
    OrderDictionary orderDictionary;

    @Mock
    LocationDictionaryItem LHRLocationDictionaryItem;

    @Mock
    LocationDictionaryItem HNDLocationDictionaryItem;

    @Mock
    DisruptionStatus disruptionStatus;

    @Mock
    FlightItemOperating flightItemOperating;

    @Mock
    FlightEndPoint departureEndPoint;

    @Mock
    FlightEndPoint arrivalEndPoint;

    @Mock
    FlightEndPoint originalDepartureEndPoint;

    @Mock
    FlightEndPoint originalArrivalEndPoint;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlightItem jlFlightItem1;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlightItem jlFlightItem2;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlightEndpoint jlDeparture;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlightEndpoint jlArrival;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlightEndpoint jlDeparture2;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlightEndpoint jlArrival2;

    /**
     * This method create a new builder instance before tests
     */
    @BeforeEach
    public void setUp() {
        emailInformationBuilder = new EmailInformationBuilder();
    }

    /**
     * This method mocks the order objects before tests
     */
    private void setUpOrder() {
        CreationPointOfSale office = mock(CreationPointOfSale.class);
        when(HNDLocationDictionaryItem.getCityCode()).thenReturn(TYO_CODE);
        when(HNDLocationDictionaryItem.getCountryCode()).thenReturn("JP");
        when(LHRLocationDictionaryItem.getCityCode()).thenReturn(LON_CODE);
        when(LHRLocationDictionaryItem.getCountryCode()).thenReturn("GB");
        when(office.getPointOfSaleId()).thenReturn("PARJL08AA");
        when(air.getBounds()).thenReturn(Arrays.asList(bound));
        when(order.getCreationPointOfSale()).thenReturn(office);
        when(order.getAir()).thenReturn(air);
        when(order.getId()).thenReturn("566J76");
        when(orderDictionary.getLocation()).thenReturn(Map.of(HND_CODE, HNDLocationDictionaryItem, LHR_CODE, LHRLocationDictionaryItem));
        when(orderDictionary.getFlight()).thenReturn(Map.of("ST1", dictionaryFlight, "ST2", originalDictionaryFlight));
        when(orderReply.getData()).thenReturn(order);
        when(orderReply.getDictionaries()).thenReturn(orderDictionary);
    }

    /**
     * This method mocks the bound objects before tests
     */
    private void setUpBound() {
        when(disruptionStatus.getBoundStatus()).thenReturn(DisruptionStatus.BoundStatusEnum.ACKNOWLEDGED);
        when(bound.getFlights()).thenReturn(Arrays.asList(flight));
        when(bound.getDisruptionStatus()).thenReturn(disruptionStatus);
        when(bound.getDuration()).thenReturn(1200);
        when(bound.getOriginLocationCode()).thenReturn(HND_CODE);
        when(bound.getDestinationLocationCode()).thenReturn(LHR_CODE);
    }

    /**
     * This method mocks the dictionary flight objects before tests
     */
    private void setUpDictionaryFlight() {
        when(departureEndPoint.getTerminal()).thenReturn("T1");
        when(departureEndPoint.getDateTime()).thenReturn(DateTime.parse("2065-02-10T20:40:00+02:00"));
        when(departureEndPoint.getLocationCode()).thenReturn(HND_CODE);

        when(arrivalEndPoint.getTerminal()).thenReturn("T3");
        when(arrivalEndPoint.getDateTime()).thenReturn(DateTime.parse("2065-02-15T20:40:00+02:00"));
        when(arrivalEndPoint.getLocationCode()).thenReturn(LHR_CODE);

        when(dictionaryFlight.getAircraftCode()).thenReturn(CUSTOM_AIRCRAFT_CODE);
        when(dictionaryFlight.getOperatingAirlineCode()).thenReturn("BA");
        when(dictionaryFlight.getOperatingAirlineName()).thenReturn("J-AIR");
        when(dictionaryFlight.getMarketingFlightNumber()).thenReturn("056");
        when(dictionaryFlight.getMarketingAirlineCode()).thenReturn("JL");
        when(dictionaryFlight.getDuration()).thenReturn(1500);
        when(dictionaryFlight.getDeparture()).thenReturn(departureEndPoint);
        when(dictionaryFlight.getArrival()).thenReturn(arrivalEndPoint);
    }

    /**
     * This method mocks the flight objects before tests
     */
    private void setUpFlight() {
        when(flight.getBookingClass()).thenReturn("M");
        when(flight.getId()).thenReturn("ST1");
        when(flight.getOperating()).thenReturn(flightItemOperating);
        when(flight.getCabin()).thenReturn(FlightItem.CabinEnum.ECO);
        when(flight.getDepartureDaysDifference()).thenReturn(0);
        when(flight.getArrivalDaysDifference()).thenReturn(1);
        when(flight.getConnectionTime()).thenReturn(2000);
    }

    /**
     * This method mocks the JL flight items before tests
     */
    private void setUpJlFlightItems() {
        when(jlDeparture.getDateTime()).thenReturn(DateTime.parse(DEPARTURE_TIME));
        when(jlDeparture.getLocation().getCityCode()).thenReturn(PAR_CODE);
        when(jlArrival.getLocation().getCityCode()).thenReturn(LON_CODE);
        when(jlDeparture2.getLocation().getCityCode()).thenReturn(LON_CODE);
        when(jlArrival2.getLocation().getCityCode()).thenReturn(TYO_CODE);
        when(jlFlightItem1.getFlight().getJlDeparture()).thenReturn(jlDeparture);
        when(jlFlightItem1.getFlight().getJlArrival()).thenReturn(jlArrival);
        when(jlFlightItem2.getFlight().getJlDeparture()).thenReturn(jlDeparture2);
        when(jlFlightItem2.getFlight().getJlArrival()).thenReturn(jlArrival2);
    }


    /**
     * This method tests information built in the buildEmailInformation method which are not already tests
     * in others methods/utils file tests
     */
    @Test
    public void testBuildInformationEmail() {
        setUpOrder();
        EmailInformation emailInformation = emailInformationBuilder.buildEmailInformation(orderReply, "JAL_ER_FR");

        assertEquals(emailInformation.getOrderId(), order.getId());
        assertEquals(emailInformation.getMarket(), "JAL_ER_FR");
    }

    /**
     * This method tests the buildJlBound method
     */
    @Test
    public void testBuildJlOriginalBound() {
        setUpBound();
        when(originalDepartureEndPoint.getDateTime()).thenReturn(DateTime.parse("2065-02-12T20:40:00+02:00"));
        when(originalDepartureEndPoint.getLocationCode()).thenReturn(HND_CODE);
        when(originalArrivalEndPoint.getLocationCode()).thenReturn(LHR_CODE);
        when(originalDictionaryFlight.getDeparture()).thenReturn(departureEndPoint);
        when(originalDictionaryFlight.getArrival()).thenReturn(arrivalEndPoint);
        when(originalFlight.getId()).thenReturn("ST2");
        when(disruptionStatus.getBoundStatus()).thenReturn(DisruptionStatus.BoundStatusEnum.DISRUPTED);
        when(disruptionStatus.getOriginalFlights()).thenReturn(Arrays.asList(originalFlight));
        when(disruptionStatus.getDuration()).thenReturn(15000);

        JLBound JlBound = emailInformationBuilder.buildJlOriginalBound(bound, false, orderDictionary, ListUtils.EMPTY_LIST);
        assertNotNull(JlBound);
        assertTrue(JlBound.getIsDisrupted());
        assertEquals(JlBound.getDuration(), 15000);
    }

    /**
     * This method tests the setJLBoundLocations method when the bound has only one flight item
     */
    @Test
    public void testSetJLBoundLocations_WithOneFlightItem() {
        setUpJlFlightItems();
        JLBound bound = new JLBound();
        bound.setFlightItemsList(List.of(jlFlightItem1));
        emailInformationBuilder.setJLBoundLocations(bound);

        assertEquals(DateTime.parse(DEPARTURE_TIME).toLocalDateTime(), bound.getDepartureTime());
        assertEquals(PAR_CODE, bound.getDepartureLocationCityCode());
        assertEquals(LON_CODE, bound.getArrivalLocationCityCode());
    }

    /**
     * This method tests the setJLBoundLocations method when the bound has multiple flight items
     */
    @Test
    public void testSetJLBoundLocations_WithMultipleFlightItems() {
        setUpJlFlightItems();
        JLBound bound = new JLBound();
        bound.setFlightItemsList(List.of(jlFlightItem1, jlFlightItem2));
        emailInformationBuilder.setJLBoundLocations(bound);

        assertEquals(DateTime.parse(DEPARTURE_TIME).toLocalDateTime(), bound.getDepartureTime());
        assertEquals(PAR_CODE, bound.getDepartureLocationCityCode());
        assertEquals(TYO_CODE, bound.getArrivalLocationCityCode());
    }

    /**
     * This method tests the buildJlFlight method is not upgraded or waitlisted
     */
    @Test
    public void testBuildJlFlightItem_WhenFlightItemIsNotUpgradedAndNotWaitlisted() {
        setUpFlight();

        JLFlightItem flightItem = emailInformationBuilder.buildJlFlightItem(flight, new ArrayList<>(List.of("ST0")));

        assertEquals(flight.getId(), flightItem.getId());
        assertEquals(flight.getBookingClass(), flightItem.getBookingClass());
        assertEquals(flight.getOperating(), flightItem.getOperating());
        assertEquals(flight.getCabin(), flightItem.getCabin());
        assertEquals(flight.getDepartureDaysDifference(), flightItem.getDepartureDaysDifference());
        assertEquals(flight.getArrivalDaysDifference(), flightItem.getArrivalDaysDifference());
        assertEquals(flight.getConnectionTime(), flightItem.getConnectionTime());
        assertEquals(null, flightItem.getStatusCode());
    }

    /**
     * This method tests the buildJlFlight method when the flight item is upgraded
     */
    @Test
    public void testBuildJlFlightItem_WhenFlightItemIsUpgraded() {
        setUpFlight();

        JLFlightItem flightItem = emailInformationBuilder.buildJlFlightItem(flight, new ArrayList<>(List.of("ST0", "ST1", "ST3")));

        assertEquals(flight.getId(), flightItem.getId());
        assertEquals(flight.getBookingClass(), flightItem.getBookingClass());
        assertEquals(flight.getOperating(), flightItem.getOperating());
        assertEquals(flight.getCabin(), flightItem.getCabin());
        assertEquals(flight.getDepartureDaysDifference(), flightItem.getDepartureDaysDifference());
        assertEquals(flight.getArrivalDaysDifference(), flightItem.getArrivalDaysDifference());
        assertEquals(flight.getConnectionTime(), flightItem.getConnectionTime());
        assertEquals(JLBookingStatus.UPGRADED.getCode(), flightItem.getStatusCode());
    }

    /**
     * This method tests the buildJlFlight method when the flight item is waitlisted
     */
    @Test
    public void testBuildJlFlightItem_WhenFlightItemIsWaitlisted() {
        setUpFlight();
        when(flight.getStatusCode()).thenReturn("HL");

        JLFlightItem flightItem = emailInformationBuilder.buildJlFlightItem(flight, new ArrayList<>(List.of("ST0")));


        assertEquals(flight.getId(), flightItem.getId());
        assertEquals(flight.getBookingClass(), flightItem.getBookingClass());
        assertEquals(flight.getOperating(), flightItem.getOperating());
        assertEquals(flight.getCabin(), flightItem.getCabin());
        assertEquals(flight.getDepartureDaysDifference(), flightItem.getDepartureDaysDifference());
        assertEquals(flight.getArrivalDaysDifference(), flightItem.getArrivalDaysDifference());
        assertEquals(flight.getConnectionTime(), flightItem.getConnectionTime());
        assertEquals("HL", flightItem.getStatusCode());
    }

    /**
     * This method tests the buildJlFlight method
     */
    @Test
    public void testBuildJlFlight() {
        setUpDictionaryFlight();

        JLFlight JlFlight = emailInformationBuilder.buildJlFlight(dictionaryFlight, orderDictionary.getLocation());

        assertEquals(dictionaryFlight.getAircraftCode(), JlFlight.getAircraftCode());
        assertEquals(dictionaryFlight.getOperatingAirlineCode(), JlFlight.getOperatingAirlineCode());
        assertEquals(dictionaryFlight.getOperatingAirlineName(), JlFlight.getOperatingAirlineName());
        assertEquals(dictionaryFlight.getMarketingFlightNumber(), JlFlight.getMarketingFlightNumber());
        assertEquals(dictionaryFlight.getMarketingAirlineCode(), JlFlight.getMarketingAirlineCode());
        assertEquals(dictionaryFlight.getDuration(), JlFlight.getDuration());
        assertEquals(CUSTOM_AIRCRAFT_CODE, JlFlight.getCustomAircraftCode());
    }

    /**
     * This method tests the buildJlEndpoint method
     */
    @Test
    public void testBuildJlEndpoint() {
        setUpDictionaryFlight();

        JLFlightEndpoint JlFlightEndPoint = emailInformationBuilder.buildJlEndpoint(HNDLocationDictionaryItem, departureEndPoint);

        assertEquals(HNDLocationDictionaryItem, JlFlightEndPoint.getLocation());
        assertEquals(departureEndPoint.getTerminal(), JlFlightEndPoint.getTerminal());
        assertEquals(departureEndPoint.getDateTime(), JlFlightEndPoint.getDateTime());
        assertEquals(departureEndPoint.getLocationCode(), JlFlightEndPoint.getLocationCode());
    }

    /**
     * This method tests the buildJlTravelers method
     */
    @Test
    public void testBuildJlTravelers() {
        Traveler travelerADT = mock(Traveler.class);
        Traveler travelerCH = mock(Traveler.class);
        Traveler travelerINF = mock(Traveler.class);
        Name nameADT = mock(Name.class);
        Name nameCH = mock(Name.class);
        Name nameINF = mock(Name.class);
        when(nameADT.getFirstName()).thenReturn("adultName");
        when(nameCH.getFirstName()).thenReturn("childName");
        when(nameINF.getFirstName()).thenReturn("infantName");
        when(travelerADT.getPassengerTypeCode()).thenReturn("ADT");
        when(travelerADT.getNames()).thenReturn(Arrays.asList(nameADT));
        when(travelerADT.getId()).thenReturn("T1");
        when(travelerCH.getPassengerTypeCode()).thenReturn("CH");
        when(travelerCH.getNames()).thenReturn(Arrays.asList(nameCH));
        when(travelerINF.getPassengerTypeCode()).thenReturn("INF");
        when(travelerINF.getAccompanyingTravelerId()).thenReturn("T1");
        when(travelerINF.getNames()).thenReturn(Arrays.asList(nameINF));
        List<Traveler> travelers = Arrays.asList(travelerADT, travelerCH, travelerINF);

        List<JLTraveler> travelersList = emailInformationBuilder.buildJlTravelers(travelers);

        assertEquals(2, travelersList.size());
        assertEquals("ADULTNAME", travelersList.get(0).getFullName());
        assertEquals("CHILDNAME", travelersList.get(1).getFullName());
        assertEquals("INFANTNAME", travelersList.get(0).getAccompaniedTraveler().getFullName());
    }


    /**
     * This method tests the getFullName method
     */
    @Test
    public void testGetFullName() {
        Traveler traveler = mock(Traveler.class);
        Name name = mock(Name.class);
        Name preferedName = mock(Name.class);
        when(name.getFirstName()).thenReturn("name");
        when(preferedName.getFirstName()).thenReturn("prefName");
        when(preferedName.getIsPreferred()).thenReturn(true);
        when(traveler.getNames()).thenReturn(Arrays.asList(name, preferedName));

        String fullName = emailInformationBuilder.getFullName(traveler);

        assertEquals(fullName, "PREFNAME");
    }

    /**
     * This method tests the information build in the buildJlBoundsList method which are not already tested in the other
     * builders called
     */
    @Test
    public void testBuildJlBoundsList() {
        setUpDictionaryFlight();
        setUpFlight();
        setUpBound();
        setUpOrder();

        List<JLBound> bounds = emailInformationBuilder.buildJlBoundsList(orderReply);

        assertEquals(bounds.get(0).getDepartureLocationCityCode(), HNDLocationDictionaryItem.getCityCode());
        assertEquals(bounds.get(0).getArrivalLocationCityCode(), LHRLocationDictionaryItem.getCityCode());
        assertEquals(bounds.get(0).getDepartureTime(), departureEndPoint.getDateTime().toLocalDateTime());
    }
}


```

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\BoundHelpersTest.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.dapi.jalext.email.model.JLBookingStatus;
import com.amadeus.dapi.jalext.email.model.JLBound;
import com.amadeus.dapi.jalext.email.model.JLFlight;
import com.amadeus.dapi.jalext.email.model.JLFlightItem;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Bound;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.DisruptionStatus.BoundStatusEnum;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FlightItem;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.joda.time.LocalDateTime;
import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static com.amadeus.dapi.jalext.email.helpers.BoundHelpers.hasTimeChange;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;


import java.util.ArrayList;
import java.util.List;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class BoundHelpersTest {

    public static final String FIRST_CONFIRMED_ACKNOWLEDGE_BOUND_ID = "2SkxfJhn2XMC6hH";

    public static final String FIRST_CONFIRMED_ALTERNATIVE_BOUND_ID = "LHR_HND_2024-07-25T00:30:00.000";

    @Mock
    JLBound jlBound;

    @Mock
    JLFlightItem jlFirstFlight;

    @Mock
    JLFlightItem jlLastFlight;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    Bound bound;

    @Mock
    FlightItem firstFlight;

    @Mock
    FlightItem lastFlight;

    @Mock
    FlightItem originalFlight;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlight departureflight;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlight arrivalflight;

    @Test
    public void testisBoundConfirmed_WhenIsconfirmedWithAcknowledgeId() {
        List confirmedBoundIds = new ArrayList(List.of(FIRST_CONFIRMED_ACKNOWLEDGE_BOUND_ID));
        when(jlBound.getAirBoundId()).thenReturn("2SkxfJhn2XMC6hH");

        assertTrue(BoundHelpers.isBoundConfirmed(jlBound, confirmedBoundIds));
    }

    @Test
    public void testisBoundConfirmed_WhenIsNotconfirmedWithAcknowledgeId() {
        List confirmedBoundIds = new ArrayList(List.of(FIRST_CONFIRMED_ACKNOWLEDGE_BOUND_ID));
        when(jlBound.getAirBoundId()).thenReturn("2SkxfJhn2XMC6hG");

        assertFalse(BoundHelpers.isBoundConfirmed(jlBound, confirmedBoundIds));
    }

    @Test
    public void testisBoundConfirmed_WhenIsconfirmedWithAlternativeId() {
        List confirmedBoundIds = new ArrayList(List.of(FIRST_CONFIRMED_ALTERNATIVE_BOUND_ID));
        setUpJLBound("LHR", "HND", new LocalDateTime(2024, 7, 25, 00, 30));

        assertTrue(BoundHelpers.isBoundConfirmed(jlBound, confirmedBoundIds));
    }

    @Test
    public void testisBoundConfirmed_WhenIsNotconfirmedWithAlternativeId() {
        List confirmedBoundIds = new ArrayList(List.of(FIRST_CONFIRMED_ALTERNATIVE_BOUND_ID));
        setUpJLBound("LHR", "PAR", new LocalDateTime(2024, 7, 27, 12, 30));

        assertFalse(BoundHelpers.isBoundConfirmed(jlBound, confirmedBoundIds));
    }

    /**
     * This method tests the getBoundCustomId method
     */
    @Test
    public void testGetBoundCustomId() {
        setUpJLBound("LHR", "LAX", new LocalDateTime(2024, 7, 26, 8, 30));

        assertEquals(BoundHelpers.getBoundCustomId(jlBound), "LHR_LAX_2024-07-26T08:30:00.000");
    }

    /**
     * This method tests the isBoundFullyFlown method when all flights are flown
     */
    @Test
    public void testIsBoundFullyFlown_WhenAllFlightsAreFlown() {
        when(firstFlight.getIsFlown()).thenReturn(true);
        when(lastFlight.getIsFlown()).thenReturn(true);
        when(bound.getFlights()).thenReturn(new ArrayList<>(List.of(firstFlight, lastFlight)));

        assertTrue(BoundHelpers.isBoundFullyFlown(bound));
    }

    /**
     * This method tests the isBoundFullyFlown method when not all flights are flown
     */
    @Test
    public void testIsBoundFullyFlown_WhenNotAllFlightsAreFlown() {
        when(firstFlight.getIsFlown()).thenReturn(true);
        when(lastFlight.getIsFlown()).thenReturn(false);
        when(bound.getFlights()).thenReturn(new ArrayList<>(List.of(firstFlight, lastFlight)));

        assertFalse(BoundHelpers.isBoundFullyFlown(bound));
    }

    /**
     * This method set up the mocked JLBound
     */
    private void setUpJLBound(String departureCityCode, String arrivalCityCode, LocalDateTime departureTime) {
        when(departureflight.getJlDeparture().getLocation().getCityCode()).thenReturn(departureCityCode);
        when(arrivalflight.getJlArrival().getLocation().getCityCode()).thenReturn(arrivalCityCode);
        when(jlFirstFlight.getFlight()).thenReturn(departureflight);
        when(jlLastFlight.getFlight()).thenReturn(arrivalflight);
        when(jlBound.getDepartureTime()).thenReturn(departureTime);
        when(jlBound.getFlightItemsList()).thenReturn(new ArrayList<>(List.of(jlFirstFlight, jlLastFlight)));
    }

    /**
     * This method tests the hasTimeChange method when bound has time change and order is not third party
     */
    @Test
    public void testHasTimeChange_whenBoundHasTimeChange_OrderIsNotThirdParty() {
        when(firstFlight.getStatusCode()).thenReturn(JLBookingStatus.CONFIRMING_WITH_NEW_TIMES.getCode());
        setUpDisruptedBound(true);

        assertTrue(hasTimeChange(bound, false));
    }

    /**
     * This method tests the hasTimeChange method when bound has not time change and order is not third party
     */
    @Test
    public void testHasTimeChange_whenBoundHasNoTimeChange_OrderIsNotThirdParty() {
        when(firstFlight.getStatusCode()).thenReturn(JLBookingStatus.CONFIRMING_WITH_NEW_TIMES.getCode());
        setUpDisruptedBound(false);

        assertFalse(hasTimeChange(bound, false));
    }

    /**
     * This method tests the hasTimeChange method when bound has time change and order is third party
     */
    @Test
    public void testHasTimeChange_whenBoundHasTimeChange_OrderIsThirdPartyPnr() {
        setUpDisruptedBound(true);

        assertTrue(hasTimeChange(bound, true));
    }

    /**
     * This method set up the mocked bound
     */
    private void setUpDisruptedBound(Boolean identicalIds) {
        when(originalFlight.getId()).thenReturn("ST1");
        when(firstFlight.getId()).thenReturn(identicalIds ? "ST1" : "ST2");
        when(firstFlight.getStatusCode()).thenReturn(JLBookingStatus.CONFIRMING_WITH_NEW_TIMES.getCode());
        when(bound.getDisruptionStatus().getBoundStatus()).thenReturn(BoundStatusEnum.DISRUPTED);
        when(bound.getDisruptionStatus().getOriginalFlights()).thenReturn(List.of(originalFlight));
        when(bound.getFlights()).thenReturn(new ArrayList<>(List.of(firstFlight)));
    }
}

```

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\FlightHelpersTest.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.dapi.jalext.email.model.JLFlight;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class FlightHelpersTest {

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    JLFlight flight;

    /**
     * This method tests the isDomesticFlight method when the flight has both endpoints with JP locations
     */
    @Test
    public void testIsDomesticFlight_WhenFlightIsDomestic() {
        when(flight.getJlDeparture().getLocation().getCountryCode()).thenReturn("JP");
        when(flight.getJlArrival().getLocation().getCountryCode()).thenReturn("JP");

        assertTrue(FlightHelpers.isDomesticFlight(flight));
    }

    /**
     * This method tests the isDomesticFlight method when the flight departure is not a JP location
     */
    @Test
    public void testIsDomesticFlight_WhenFlightIsNotDomestic() {
        when(flight.getJlDeparture().getLocation().getCountryCode()).thenReturn("FR");
        when(flight.getJlArrival().getLocation().getCountryCode()).thenReturn("JP");

        assertFalse(FlightHelpers.isDomesticFlight(flight));
    }
}
```

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\OrderHelpersTest.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.PaymentMethod;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.PaymentTransaction;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Tax;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocumentPrice;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.util.Arrays;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class OrderHelpersTest {

    public static final String EUR_CURRENCY_CODE = "EUR";

    public static final String JPY_CURRENCY_CODE = "JPY";

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    Order order;

    @Mock
    PaymentTransaction milesTransaction;

    @Mock
    PaymentMethod milesPaymentMethod;

    @Mock
    PaymentTransaction creditCardTransaction;

    @Mock
    PaymentMethod creditCardPaymentMethod;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    TravelDocument travelDocument;

    /**
     * This method tests the isFQTROrder method when there is a miles transaction
     */
    @Test
    public void testisFQTROrderWhenMilesTransaction() {
        when(milesTransaction.getPaymentMethod()).thenReturn(milesPaymentMethod);
        when(milesPaymentMethod.getPaymentType()).thenReturn(PaymentMethod.PaymentTypeEnum.MILESPAYMENT);
        when(travelDocument.getPaymentTransactions()).thenReturn(Arrays.asList(milesTransaction));
        when(order.getTravelDocuments()).thenReturn(Arrays.asList(travelDocument));

        assertTrue(OrderHelpers.isFQTROrder(order));
    }

    /**
     * This method tests the isFQTROrder method when there is no miles transaction
     */
    @Test
    public void testisFQTROrderWhenNoMilesTransaction() {
        when(creditCardTransaction.getPaymentMethod()).thenReturn(creditCardPaymentMethod);
        when(creditCardPaymentMethod.getId()).thenReturn("CC");
        when(travelDocument.getPaymentTransactions()).thenReturn(Arrays.asList(creditCardTransaction));
        when(order.getTravelDocuments()).thenReturn(Arrays.asList(travelDocument));

        assertFalse(OrderHelpers.isFQTROrder(order));
    }

    /**
     * This method tests the hasOrderMixedCurrencies method when the order has mixed currency
     */
    @Test
    public void testHasOrderMixedCurrencies_whenOrderHasMixedCurrencies() {
        setupTravelDocument(JPY_CURRENCY_CODE, EUR_CURRENCY_CODE);

        assertTrue(OrderHelpers.hasOrderMixedCurrencies(order));
    }

    /**
     * This method tests the hasOrderMixedCurrencies method when the order doesn't have mixed currencies
     */
    @Test
    public void testHasOrderMixedCurrencies_whenOrderHasNoMixedCurrencies() {
        setupTravelDocument(EUR_CURRENCY_CODE, EUR_CURRENCY_CODE);

        assertFalse(OrderHelpers.hasOrderMixedCurrencies(order));
    }

    /**
     * This method set up the mocked travel document
     */
    private void setupTravelDocument(String taxCurrencyCode, String priceCurrencyCode) {
        Tax tax = new Tax();
        tax.setCurrencyCode(taxCurrencyCode);
        TravelDocumentPrice price = new TravelDocumentPrice();
        price.setCurrencyCode(priceCurrencyCode);
        price.setTaxes(Arrays.asList(tax));
        when(travelDocument.getPrice()).thenReturn(price);
        when(order.getTravelDocuments()).thenReturn(Arrays.asList(travelDocument));
    }

    /**
     * This method tests the isThirdPartyOrder method when the point of sale office id is third party
     */
    @Test
    public void testIsThirdPartyOrder_whenPointOfSaleOfficeIdIsThirdParty() {
        setupOfficeIdOrder("HELAY08AA", "TYOJL0ERS");

        assertTrue(OrderHelpers.isThirdPartyOrder(order));
    }

    /**
     * This method tests the isThirdPartyOrder method when the issuing office id is third party
     */
    @Test
    public void testIsThirdPartyOrder_whenIssuingOfficeIdIsThirdParty() {
        setupOfficeIdOrder("TYOJL0ERS", "HELAY08AA");

        assertTrue(OrderHelpers.isThirdPartyOrder(order));
    }

    /**
     * This method tests the isThirdPartyOrder method when the order is not third party
     */
    @Test
    public void testIsThirdPartyOrder_whenOrderIsNotThirdParty() {
        setupOfficeIdOrder("TYOJL0ERS", "TYOJL0ERS");

        assertFalse(OrderHelpers.isThirdPartyOrder(order));
    }

    private void setupOfficeIdOrder(String pointOfSaleOfficeId, String issuingOfficeId) {
        when(order.getCreationPointOfSale().getPointOfSaleId()).thenReturn(pointOfSaleOfficeId);
        when(travelDocument.getCreation().getOffice().getOfficeId()).thenReturn(issuingOfficeId);
        when(order.getTravelDocuments()).thenReturn(Arrays.asList(travelDocument));
    }
}
```

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\PaymentHelpersTest.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.PaymentMethod;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.PaymentTransaction;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;
import java.util.List;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class PaymentHelpersTest {

    @Mock
    PaymentTransaction milesTransaction;

    @Mock
    PaymentMethod milesPaymentMethod;

    @Mock
    PaymentTransaction creditCardTransaction;

    @Mock
    PaymentMethod creditCardPaymentMethod;

    @Mock
    PaymentTransaction eJALPointsTransaction;

    @Mock
    PaymentMethod eJALPointsPaymentMethod;


    List<PaymentTransaction> transactions;

    /**
     * This method mocks the required objects before tests
     */
    @BeforeEach
    public void setUp() {

        when(milesTransaction.getPaymentMethod()).thenReturn(milesPaymentMethod);
        when(milesPaymentMethod.getPaymentType()).thenReturn(PaymentMethod.PaymentTypeEnum.MILESPAYMENT);

        when(creditCardTransaction.getPaymentMethod()).thenReturn(creditCardPaymentMethod);
        when(creditCardPaymentMethod.getId()).thenReturn(PaymentHelpers.METHOD_OF_PAYMENT_CREDIT_CARD);

        when(eJALPointsTransaction.getPaymentMethod()).thenReturn(eJALPointsPaymentMethod);
        when(eJALPointsPaymentMethod.getId()).thenReturn(PaymentHelpers.METHOD_OF_PAYMENT_EJAL_POINTS);
    }

    /**
     * This method tests the hasMilesPaymentType method when there is a miles payment type in the transactions
     */
    @Test
    public void testHasMilesPaymentType() {
        transactions = Arrays.asList(creditCardTransaction, milesTransaction);
        assertTrue(PaymentHelpers.hasMilesPaymentType(transactions));
    }

    /**
     * This method tests the hasMilesPaymentType method when there is no miles payment type in the transactions
     */
    @Test
    public void testHasNoMilesPaymentType() {
        transactions = Arrays.asList(creditCardTransaction, eJALPointsTransaction);
        assertFalse(PaymentHelpers.hasMilesPaymentType(transactions));
    }
}

```

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\RefundHelpersTest.java

```
package com.amadeus.dapi.jalext.email.helpers;

import com.amadeus.dapi.jalext.email.model.JLNoBreakdownRefundSummary;
import com.amadeus.dapi.jalext.email.model.JLRefundSummary;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Traveler;
import com.amadeus.jal.dapi.model.core.AmountView;
import com.amadeus.jal.dapi.model.core.CurrencyDictionaryItemView;
import com.amadeus.jal.dapi.model.core.OrderAppliedRefundOptionsItemView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundDictionaryView;
import com.amadeus.jal.dapi.model.core.OrderPaidAmountView;
import com.amadeus.jal.dapi.model.core.OrderRefundAmountsView;
import com.amadeus.jal.dapi.model.core.OrderUsedAmountView;
import com.amadeus.jal.dapi.model.core.PaymentMethodView;
import com.amadeus.jal.dapi.model.core.RefundPaymentTransactionView;
import com.amadeus.jal.dapi.model.core.TaxView;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import static com.amadeus.dapi.jalext.email.helpers.RefundHelpers.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class RefundHelpersTest {
    @Mock
    OrderAppliedRefundOptionsItemView refundOptionADT1;

    @Mock
    OrderAppliedRefundOptionsItemView refundOptionADT2;

    @Mock
    OrderAppliedRefundOptionsItemView refundOptionCHD1;

    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
    Order order;

    @Mock
    OrderCancelAndRefundDictionaryView refundDictionaryView;

    ResourceBundle currencySymbols;

    /**
     * This method mocks the required objects before tests
     */
    @BeforeEach
    public void setUp() {
        setUpRefundOption(refundOptionADT1, 125000L, 125000L, 0L, 0L, "ADT1", "JPY");
        setUpRefundOption(refundOptionADT2, 125000L, 125000L, 0L, 0L,"ADT2", "JPY");
        setUpRefundOption(refundOptionCHD1, 120000L, 120000L, 0L, 0L,"CHD1", "JPY");

        Traveler adt1 = new Traveler();
        adt1.setId("ADT1");
        adt1.setPassengerTypeCode("ADT");
        Traveler adt2 = new Traveler();
        adt2.setId("ADT2");
        adt2.setPassengerTypeCode("ADT");
        Traveler chd1 = new Traveler();
        chd1.setId("CHD1");
        chd1.setPassengerTypeCode("CHD");

        when(order.getAir().getPrices().getTotalPrices().get(0).getTotalTaxes().getValue()).thenReturn(0L);
        when(order.getTravelers()).thenReturn(new ArrayList<>(List.of(adt1, adt2, chd1)));

        HashMap currenciesDictionary = new HashMap<>();
        CurrencyDictionaryItemView currencyItemEUR = new CurrencyDictionaryItemView();
        currencyItemEUR.setDecimalPlaces(2);
        CurrencyDictionaryItemView currencyItemJPY = new CurrencyDictionaryItemView();
        currencyItemJPY.setDecimalPlaces(0);
        CurrencyDictionaryItemView currencyItemUSD = new CurrencyDictionaryItemView();
        currencyItemUSD.setDecimalPlaces(0);
        currenciesDictionary.put("EUR", currencyItemEUR);
        currenciesDictionary.put("JPY", currencyItemJPY);
        currenciesDictionary.put("USD", currencyItemUSD);

        when(refundDictionaryView.getCurrency()).thenReturn(currenciesDictionary);
        currencySymbols = ResourceBundle.getBundle("assets.data.currency-symbols");
    }

    private void setUpRefundOption(OrderAppliedRefundOptionsItemView refundOption, Long refundedAmount, Long paidAmount,
                                   Long usedAmount, Long ejalPointsAmount, String passengerId, String currency) {
        AmountView refundAmountTotal = new AmountView();
        refundAmountTotal.setValue(refundedAmount);
        AmountView refundAmountBase = new AmountView();
        refundAmountBase.setCurrencyCode(currency);
        OrderRefundAmountsView refundAmountsView = new OrderRefundAmountsView();
        refundAmountsView.setTotal(refundAmountTotal);
        refundAmountsView.setBase(refundAmountBase);

        AmountView paidAmountBase = new AmountView();
        paidAmountBase.setValue(paidAmount);
        OrderPaidAmountView paidAmountView = new OrderPaidAmountView();
        paidAmountView.setBase(paidAmountBase);
        paidAmountView.setTaxes(Collections.emptyList());

        AmountView usedAmountBase = new AmountView();
        usedAmountBase.setValue(usedAmount);
        OrderUsedAmountView usedAmountView = new OrderUsedAmountView();
        usedAmountView.setBase(usedAmountBase);
        usedAmountView.setTaxes(Collections.emptyList());

        RefundPaymentTransactionView ejalPointsTransaction = new RefundPaymentTransactionView();
        AmountView ejalPointsAmountView = new AmountView();
        ejalPointsAmountView.setValue(ejalPointsAmount);
        PaymentMethodView paymentMethodView = new PaymentMethodView();
        paymentMethodView.setId(PaymentHelpers.METHOD_OF_PAYMENT_EJAL_POINTS);
        ejalPointsTransaction.setAmount(ejalPointsAmountView);
        ejalPointsTransaction.setPaymentMethod(paymentMethodView);

        when(refundOption.getRefundAmounts()).thenReturn(refundAmountsView);
        when(refundOption.getPaidAmount()).thenReturn(paidAmountView);
        when(refundOption.getUsedAmount()).thenReturn(usedAmountView);
        when(refundOption.getTravelerIds()).thenReturn(new ArrayList<>(List.of(passengerId)));
        when(refundOption.getPaymentDetails()).thenReturn(new ArrayList<>(List.of(ejalPointsTransaction)));
    }


    /**
     * This method tests the BuildBreakdownRefundSummary method when there is eJal points refunded
     */
    @Test
    public void testBuildBreakdownRefundSummaryWithEjalPointsRefunded() {
        setUpRefundOption(refundOptionADT1, 125000L, 125000L, 0L, 50000L, "ADT1", "EUR");
        setUpRefundOption(refundOptionADT2, 125000L, 125000L, 0L, 30000L,"ADT2", "EUR");
        setUpRefundOption(refundOptionCHD1, 120000L, 120000L, 0L, 80000L,"CHD1", "EUR");
        List<OrderAppliedRefundOptionsItemView> refundOptions = new ArrayList<>(List.of(refundOptionCHD1, refundOptionADT1, refundOptionADT2));

        JLRefundSummary refundSummary = RefundHelpers.buildBreakdownRefundSummary(refundOptions, order, refundDictionaryView, "en-GB", currencySymbols);

        assertEquals(refundSummary.getRefundBreakdowns().get(0).getPassengerTypeCode(), "ADT");
        assertEquals(refundSummary.getRefundBreakdowns().get(0).getPassengerQuantity(), 2);
        assertEquals(refundSummary.getRefundBreakdowns().get(0).getRefundedAmount(),  new BigDecimal(250000L));
        assertEquals(refundSummary.getRefundBreakdowns().get(1).getPassengerTypeCode(), "CHD");
        assertEquals(refundSummary.getRefundBreakdowns().get(1).getPassengerQuantity(), 1);
        assertEquals(refundSummary.getRefundBreakdowns().get(1).getRefundedAmount(),  new BigDecimal(120000L));
        assertEquals(refundSummary.getTotal(),  new BigDecimal(210000L));
        assertEquals(refundSummary.getRefundedEjalPoints(),  new BigDecimal(160000L));
        assertEquals(refundSummary.getCurrencyCode(), "EUR");
        assertEquals(refundSummary.getCurrencySymbol(), "â‚¬");
        assertEquals(refundSummary.getPricePattern(), PRICE_PATTERN_7);
        assertEquals(refundSummary.getDecimalPlaces(), 2);
    }

    /**
     * This method tests the BuildBreakdownRefundSummary method when there is no eJal points refunded
     */
    @Test
    public void testBuildBreakdownRefundSummaryWithNoEjalPointsRefunded() {
        List<OrderAppliedRefundOptionsItemView> refundOptions = new ArrayList<>(List.of(refundOptionADT1, refundOptionADT2, refundOptionCHD1));

        JLRefundSummary refundSummary = RefundHelpers.buildBreakdownRefundSummary(refundOptions, order, refundDictionaryView, "ja-JP", currencySymbols);

        assertEquals(refundSummary.getRefundBreakdowns().get(0).getPassengerTypeCode(), "ADT");
        assertEquals(refundSummary.getRefundBreakdowns().get(0).getPassengerQuantity(), 2);
        assertEquals(refundSummary.getRefundBreakdowns().get(0).getRefundedAmount(),  new BigDecimal(250000L));
        assertEquals(refundSummary.getRefundBreakdowns().get(1).getPassengerTypeCode(), "CHD");
        assertEquals(refundSummary.getRefundBreakdowns().get(1).getPassengerQuantity(), 1);
        assertEquals(refundSummary.getRefundBreakdowns().get(1).getRefundedAmount(),  new BigDecimal(120000L));
        assertEquals(refundSummary.getTotal(),  new BigDecimal(370000L));
        assertEquals(refundSummary.getRefundedEjalPoints(), BigDecimal.ZERO);
        assertEquals(refundSummary.getCurrencyCode(), "JPY");
        assertEquals(refundSummary.getCurrencySymbol(), "Â¥");
        assertEquals(refundSummary.getPricePattern(), PRICE_PATTERN_5);
        assertEquals(refundSummary.getDecimalPlaces(), 0);
    }

    /**
     * This method tests the getTotalTaxes method
     */
    @Test
    public void testGetTotalTaxes() {
        TaxView tax1 = new TaxView();
        tax1.setValue(150L);
        TaxView tax2 = new TaxView();
        tax2.setValue(250L);
        TaxView tax3 = new TaxView();
        tax3.setValue(250L);
        List<TaxView> taxes = new ArrayList<>(List.of(tax1, tax2, tax3));
        assertEquals(RefundHelpers.getTotalTaxes(taxes), new BigDecimal(650L));
    }

    /**
     * This method tests the buildNoBreakdownRefundSummary method when the order is manually refundable
     */
    @Test
    public void testBuildNoBreakdownRefundSummaryWhenManuallyRefundable() {
        setUpRefundedAmountsForNoBreakDownSummary(refundOptionADT1, 10000L, 15000L, 25000L, "JPY");
        setUpRefundedAmountsForNoBreakDownSummary(refundOptionADT2, 10000L, 15000L, 25000L, "JPY");
        setUpRefundedAmountsForNoBreakDownSummary(refundOptionCHD1, 5000L, 10000L, 15000L, "JPY");
        List<OrderAppliedRefundOptionsItemView> refundOptions = new ArrayList<>(List.of(refundOptionADT1, refundOptionADT2, refundOptionCHD1));

        JLNoBreakdownRefundSummary refundSummary = RefundHelpers.buildNoBreakdownRefundSummary(refundOptions, true,  refundDictionaryView, "en-GB", currencySymbols);

        assertEquals(refundSummary.getTotalTaxes(), new BigDecimal(25000L));
        assertEquals(refundSummary.getBasePrice(), new BigDecimal(40000L));
        assertEquals(refundSummary.getTotalPrice(), new BigDecimal(65000L));
        assertEquals(refundSummary.getCurrencyCode(), "JPY");
        assertEquals(refundSummary.getCurrencySymbol(), "Â¥");
        assertEquals(refundSummary.getPricePattern(), PRICE_PATTERN_6);
        assertEquals(refundSummary.getDecimalPlaces(), 0);
    }

    private void setUpRefundedAmountsForNoBreakDownSummary(OrderAppliedRefundOptionsItemView refundOption, Long totalTaxesAmount,
            Long baseAmount, Long totalAmount, String currencyCode) {
        OrderRefundAmountsView refundAmountsView = new OrderRefundAmountsView();
        AmountView refundAmountTotalTaxes = new AmountView();
        refundAmountTotalTaxes.setValue(totalTaxesAmount);
        refundAmountTotalTaxes.setCurrencyCode(currencyCode);
        refundAmountsView.setTotalTaxes(refundAmountTotalTaxes);

        if (baseAmount != null) {
            AmountView refundAmountBase = new AmountView();
            refundAmountBase.setValue(baseAmount);
            refundAmountsView.setBase(refundAmountBase);
        }

        if (totalAmount != null) {
            AmountView refundAmountTotal = new AmountView();
            refundAmountTotal.setValue(totalAmount);
            refundAmountsView.setTotal(refundAmountTotal);
        }

        when(refundOption.getRefundAmounts()).thenReturn(refundAmountsView);
    }

    /**
     * This method tests the buildNoBreakdownRefundSummary method when the order is not manually refundable
     */
    @Test
    public void testBuildNoBreakdownRefundSummaryWhenIsNotManuallyRefundable() {
        setUpRefundedAmountsForNoBreakDownSummary(refundOptionADT1, 10000L, null, null, "USD");
        setUpRefundedAmountsForNoBreakDownSummary(refundOptionADT2, 10000L, null, null, "USD");
        setUpRefundedAmountsForNoBreakDownSummary(refundOptionCHD1, 5000L, null, null, "USD");
        List<OrderAppliedRefundOptionsItemView> refundOptions = new ArrayList<>(List.of(refundOptionADT1, refundOptionADT2, refundOptionCHD1));

        JLNoBreakdownRefundSummary refundSummary = RefundHelpers.buildNoBreakdownRefundSummary(refundOptions, false, refundDictionaryView, "en-GB", currencySymbols);

        assertEquals(refundSummary.getTotalTaxes(), new BigDecimal(25000L));
        assertNull(refundSummary.getBasePrice());
        assertNull(refundSummary.getTotalPrice());
        assertEquals(refundSummary.getCurrencyCode(), "USD");
        assertEquals(refundSummary.getCurrencySymbol(), "$");
        assertEquals(refundSummary.getPricePattern(), PRICE_PATTERN_3);
        assertEquals(refundSummary.getDecimalPlaces(), 0);
    }
}

```

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\mappers\PaymentRecordsHistoryJsonResponseMapper.java

```
package com.amadeus.dapi.jalext.payment.summary.mappers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import javax.inject.Named;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.payment.summary.util.PaymentRecordUtils;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.base.PaymentMethodViewPrivate.PaymentTypeEnum;
import com.amadeus.jal.dapi.model.base.PaymentRecordsSummaryReplyDataViewPrivate.DocumentTypeEnum;
import com.amadeus.jal.dapi.model.core.AmountView;
import com.amadeus.jal.dapi.model.core.CurrencyDictionaryItemView;
import com.amadeus.jal.dapi.model.core.CustomPaymentView;
import com.amadeus.jal.dapi.model.core.PaymentCardView;
import com.amadeus.jal.dapi.model.core.PaymentRecordsSummaryDictionaryView;
import com.amadeus.jal.dapi.model.core.PaymentRecordsSummaryReplyDataView;
import com.amadeus.jal.dapi.model.core.PaymentRecordsSummaryReplyView;
import com.amadeus.jal.dapi.model.core.PaymentRequestView;
import com.amadeus.jal.dapi.model.core.WarningMessageView;
import com.amadeus.middleware.rfd.Currency;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS.Failure;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS.Success;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS.Success.Contract;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS.Success.Contract.PaymentSummary;
import com.amadeus.xml._2010._06.fop_types_v5.MethodOfPaymentType;
import com.amadeus.xml._2010._06.fop_types_v5.MethodOfPaymentType.Card;
import com.amadeus.xml._2010._06.fop_types_v5.MethodOfPaymentType.Loyalty;
import com.amadeus.xml._2010._06.fop_types_v5.MethodOfPaymentType.Miscellaneous;
import com.amadeus.xml._2010._06.quotationtypes_v1.PriceType;

/**
 * Class is responsible to map verb response to json response
 * 
 * @author ysiva
 */
@Named
public class PaymentRecordsHistoryJsonResponseMapper {

  private static final String PAYMENT_RECORD_HISTORY_INCOMPLETE_MSG = "Payment Records History Incomplete";

  private static final String PAYMENT_RECORD_HISTORY_INCOMPLETE_TITLE = "PAYMENT RECORD HISTORY INCOMPLETE";

  private static final Integer PAYMENT_RECORD_HISTORY_INCOMPLETE = 40786;
  
  private static final int INDEX_4 = 4;

  private Set<String> currencyCodes = new HashSet<>();

  /**
   * Method to build the json response
   * 
   * @param success
   *          success
   * @param paymentRecordsSummaryReplyView
   *          paymentRecordsSummaryReplyView
   * @param dataRepositoryHelper
   *          dataRepositoryHelper
   */
  public Response buildJsonResponse(Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary,
      Map<String, String> travelDocumentToDocumentType, DataRepositoryHelper dataRepositoryHelper,
      Constraints constraints) {
    PaymentRecordsSummaryReplyView paymentRecordsSummaryReplyView = new PaymentRecordsSummaryReplyView();
    List<PaymentRecordsSummaryReplyDataView> data = new ArrayList<>();
    AtomicInteger errorOrWarningCounter = new AtomicInteger(0);
    MapUtils.emptyIfNull(travelDocumentToPaymentSummary)
        .forEach((String ticketNumber, AMA_FOP_GetPaymentSummaryRS paymentSummaryResponse) -> {
          Success success = getSuccess(paymentSummaryResponse);
          if (checkAnyErrorsAndInvalidResponsePresent(paymentSummaryResponse, success)) {
            errorOrWarningCounter.getAndIncrement();
          }
          if (travelDocumentToDocumentType.containsKey(ticketNumber)) {
            String documentType = travelDocumentToDocumentType.get(ticketNumber);
            buildData(success, ticketNumber, documentType, data);
          }
        });
    paymentRecordsSummaryReplyView.setData(data);
    buildDictionary(paymentRecordsSummaryReplyView, dataRepositoryHelper);
    addErrorOrWarningForPaymentHistory(paymentRecordsSummaryReplyView, errorOrWarningCounter, constraints);
    return Response.status(Status.OK)
        .entity(paymentRecordsSummaryReplyView)
        .build();
  }

  /**
   * Raises an error when errorOrWarningCounter > 0 and all the FOP history is returned as empty or has error.
   * Otherwise, adds a warning if errorOrWarningCounter > 0 and some FOP History had valid response.
   *
   * @param paymentRecordsSummaryReplyView
   *          paymentRecordsSummaryReplyView
   * @param errorOrWarningCounter
   *          indicates if error or warning needs to be added
   * @param constraints
   *          constraints
   */
  private void addErrorOrWarningForPaymentHistory(PaymentRecordsSummaryReplyView paymentRecordsSummaryReplyView,
      AtomicInteger errorOrWarningCounter, Constraints constraints) {
    if (errorOrWarningCounter.get() != 0) {
      if (errorOrWarningCounter.get() < paymentRecordsSummaryReplyView.getData().size()) {
        paymentRecordsSummaryReplyView.addWarningsItem(getPaymentHistoryWarning());
      } else {
        logPaymentRecordHistoryIncomplete(constraints);
      }
    }
  }

  private WarningMessageView getPaymentHistoryWarning() {
    WarningMessageView warning = new WarningMessageView();
    warning.setCode(PAYMENT_RECORD_HISTORY_INCOMPLETE_MSG);
    warning.setTitle(PAYMENT_RECORD_HISTORY_INCOMPLETE_TITLE);
    warning.setDetail(PAYMENT_RECORD_HISTORY_INCOMPLETE_MSG);
    return warning;
  }

  /**
   * @param paymentSummaryResponse
   * @param success
   * @return
   */
  private static boolean checkAnyErrorsAndInvalidResponsePresent(AMA_FOP_GetPaymentSummaryRS paymentSummaryResponse,
      Success success) {
    return success == null || Boolean.TRUE.equals(isPaymentSummarriesNotPresent(success))
        || Boolean.TRUE.equals(isErrorsPresentInResponse(paymentSummaryResponse));
  }
  
  /**
   * @param success
   * @return
   */
  private static boolean isPaymentSummarriesNotPresent(Success success) {
    return CollectionUtils.emptyIfNull(success.getContract())
        .stream()
        .map(Contract::getPaymentSummary)
        .flatMap(Collection::stream)
        .filter(Objects::nonNull)
        .collect(Collectors.toList())
        .isEmpty();
  }
  
  /**
   * @param paymentSummaryResponse
   * @return
   */
  private static boolean isErrorsPresentInResponse(AMA_FOP_GetPaymentSummaryRS paymentSummaryResponse) {
    return Optional.ofNullable(paymentSummaryResponse)
        .map(AMA_FOP_GetPaymentSummaryRS::getFailure)
        .map(Failure::getErrors)
        .isPresent();
  }

  /**
   * @param success
   * @param paymentRecordsSummaryReplyView
   */
  private void buildData(Success success, String ticketNumber, String documentType,
      List<PaymentRecordsSummaryReplyDataView> data) {
    List<Contract> contracts = getContractsFromVerbResponse(success);
    PaymentRecordsSummaryReplyDataView paymentRecordsSummaryReplyDataView = new PaymentRecordsSummaryReplyDataView();
    paymentRecordsSummaryReplyDataView.setId(ticketNumber);
    paymentRecordsSummaryReplyDataView.setDocumentType(DocumentTypeEnum.fromValue(documentType));
    List<PaymentRequestView> paymentRequestViews = new ArrayList<>();
    CollectionUtils.emptyIfNull(contracts)
        .forEach((Contract contract) -> mapPaymentRecordsHistoryData(paymentRequestViews, contract));
    paymentRecordsSummaryReplyDataView.setPaymentTransactions(paymentRequestViews);
    data.add(paymentRecordsSummaryReplyDataView);
  }

  /**
   * @param paymentRequestViews
   * @param contract
   */
  private void mapPaymentRecordsHistoryData(List<PaymentRequestView> paymentRequestViews, Contract contract) {
    List<PaymentSummary> paymentSummaries = contract.getPaymentSummary();
    CollectionUtils.emptyIfNull(paymentSummaries).forEach((PaymentSummary paymentSummary) -> {
      if (paymentSummary != null) {
        PaymentRequestView paymentRequestView = new PaymentRequestView();
        mapMethodOfPayment(paymentSummary, paymentRequestView);
        paymentRequestViews.add(paymentRequestView);
      }
    });
  }

  private void mapMethodOfPayment(PaymentSummary paymentSummary, PaymentRequestView paymentRequestView) {
    mapPaymentCardDetails(paymentSummary, paymentRequestView);
    mapCustomPaymentDetails(paymentSummary, paymentRequestView);
  }
  

  /**
   * @param success
   * @return
   */
  private static List<Contract> getContractsFromVerbResponse(Success success) {
    return Optional
        .ofNullable(success)
        .map(Success::getContract)
        .orElse(Collections.emptyList());
  }

  /**
   * @param paymentSummary
   * @param paymentRequestView
   */
  private void mapPaymentCardDetails(PaymentSummary paymentSummary, PaymentRequestView paymentRequestView) {
    if (Boolean.TRUE.equals(isCardTypePayment(paymentSummary))) {
      paymentSummary.getMethodOfPayment().getCard();
      PaymentCardView paymentMethodView = new PaymentCardView();
      paymentMethodView.setPaymentType(PaymentTypeEnum.PAYMENTCARD);
      Card card = paymentSummary.getMethodOfPayment().getCard();
      if (card != null) {
        paymentMethodView
            .setCardNumber(
                PaymentRecordUtils.concealCCNumber(card.getPrimaryAccountNumber().getValue(), 0, INDEX_4));
        if(card.getVendor() != null) {
          paymentMethodView.setVendorCode(card.getVendor().getCode());
        }   
        paymentMethodView.setExpiryDate(card.getValidity().getEndDate());
      }
      mapAmountView(paymentSummary, paymentRequestView);
      paymentRequestView.setPaymentMethod(paymentMethodView);
    }
  }

  private static Boolean isCardTypePayment(PaymentSummary paymentSummary) {
    return Optional.ofNullable(paymentSummary)
        .map(PaymentSummary::getMethodOfPayment)
        .map(MethodOfPaymentType::getCard)
        .map(Card.class::isInstance)
        .orElse(false);
  }

  private void mapCustomPaymentDetails(PaymentSummary paymentSummary, PaymentRequestView paymentRequestView) {
    if (Boolean.TRUE.equals(isMiscellaneousPayment(paymentSummary)) || 
    		Boolean.TRUE.equals(hasLoyalty(paymentSummary))) {
      String code = paymentSummary.getMethodOfPayment().getCode();
      CustomPaymentView customPaymentView = new CustomPaymentView();
      customPaymentView.setId(code);
      customPaymentView.setPaymentType(PaymentTypeEnum.CUSTOMPAYMENT);
      mapAmountView(paymentSummary, paymentRequestView);
      paymentRequestView.setPaymentMethod(customPaymentView);
    }
  }
  
  private static Boolean hasLoyalty(PaymentSummary paymentSummary) {
    return Optional.ofNullable(paymentSummary)
        .map(PaymentSummary::getMethodOfPayment)
        .map(MethodOfPaymentType::getLoyalty)
        .map(Loyalty.class::isInstance)
        .orElse(false);
  }

  private static Boolean isMiscellaneousPayment(PaymentSummary paymentSummary) {
    return Optional.ofNullable(paymentSummary)
        .map(PaymentSummary::getMethodOfPayment)
        .map(MethodOfPaymentType::getMiscellaneous)
        .map(Miscellaneous.class::isInstance)
        .orElse(false);
  }

  /**
   * @param paymentSummary
   * @param paymentRequestView
   */
  private void mapAmountView(PaymentSummary paymentSummary, PaymentRequestView paymentRequestView) {
    AmountView amountView = getAmountView(paymentSummary);
    paymentRequestView.setAmount(amountView);
  }

  /**
   * @param paymentSummary
   * @return
   */
  private AmountView getAmountView(PaymentSummary paymentSummary) {
    AmountView amountView = new AmountView();
    PriceType priceType = getPriceType(paymentSummary);
    if (priceType == null) {
      return amountView;
    }
    amountView.setCurrencyCode(priceType.getCurrencyCode());
    currencyCodes.add(priceType.getCurrencyCode());
    amountView.setValue(Long.valueOf(priceType.getAmount()));
    return amountView;
  }

  /**
   * @param paymentSummary
   * @return
   */
  private static PriceType getPriceType(PaymentSummary paymentSummary) {
    return CollectionUtils.emptyIfNull(paymentSummary.getAmount()).stream().findFirst().orElse(null);
  }

  /**
   * @param paymentRecordsSummaryReplyView
   * @param dataRepositoryHelper
   */
  private void buildDictionary(PaymentRecordsSummaryReplyView paymentRecordsSummaryReplyView,
      DataRepositoryHelper dataRepositoryHelper) {
    PaymentRecordsSummaryDictionaryView paymentRecordsSummaryDictionaryView = new PaymentRecordsSummaryDictionaryView();
    paymentRecordsSummaryDictionaryView.currency(buildCurrencyInformation(dataRepositoryHelper));
    paymentRecordsSummaryReplyView.setDictionaries(paymentRecordsSummaryDictionaryView);
  }

  /**
   * @param dataRepositoryHelper
   * @return
   */
  private Map<String, CurrencyDictionaryItemView> buildCurrencyInformation(DataRepositoryHelper dataRepositoryHelper) {
    Map<String, CurrencyDictionaryItemView> currencyItem = new HashMap<>();
    CollectionUtils.emptyIfNull(currencyCodes).forEach((String currencyCode) -> {
      if (StringUtils.isNotBlank(currencyCode)) {
        Currency currency = dataRepositoryHelper.getCurrency(currencyCode);
        currencyItem.put(currencyCode, buildCurrencyDictionaryItemView(currency));
      }
    });
    return currencyItem;
  }

  /**
   * This method builds the CurrencyDictionaryItemView
   * 
   * @param currency
   * @return
   */
  private static CurrencyDictionaryItemView buildCurrencyDictionaryItemView(Currency currency) {
    CurrencyDictionaryItemView currencyDictionaryItemView = new CurrencyDictionaryItemView();
    if (currency == null) {
      return currencyDictionaryItemView;
    }
    currencyDictionaryItemView.setName(currency.getName());
    Integer decimalPlaces = currency.getDecpos()
        .intValue();
    currencyDictionaryItemView.setDecimalPlaces(decimalPlaces);
    return currencyDictionaryItemView;
  }

  /**
   * @param paymentSummaryResponse
   * @return
   */
  private static Success getSuccess(AMA_FOP_GetPaymentSummaryRS paymentSummaryResponse) {
    return Optional.ofNullable(paymentSummaryResponse)
        .map(AMA_FOP_GetPaymentSummaryRS::getSuccess)
        .orElse(null);
  }

  /**
   * Method to validate verb response have failure message then log the error
   */
  public void logPaymentRecordHistoryIncomplete(Constraints constraints) {
    constraints.validate(constraints.validator(() -> true,
        () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY, PAYMENT_RECORD_HISTORY_INCOMPLETE_MSG,
            PAYMENT_RECORD_HISTORY_INCOMPLETE)));
  }
}

```

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\service\FopGetPaymentSummaryResponseService.java

```
package com.amadeus.dapi.jalext.payment.summary.service;

import java.math.BigDecimal;

import javax.inject.Inject;
import javax.inject.Named;

import org.springframework.beans.factory.annotation.Value;

import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.middleware.connector.client.DcxOptions;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRQ;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRQ.Contract;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRQ.Contract.Record;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;

/**
 * Class is responsible to make verb call and get the response from verb i.e
 * FOP_GetPaymentSummary1.0
 * 
 * @author ysiva
 */
@Named
public class FopGetPaymentSummaryResponseService {

	private ClientConversationHandlerFactory clientConversationHandlerFactory;

	@Value("${dapi.collateral.xml.sap.main:}")
	private String xmlSap;

	@Inject
	public FopGetPaymentSummaryResponseService(ClientConversationHandlerFactory clientConversationHandlerFactory) {
		this.clientConversationHandlerFactory = clientConversationHandlerFactory;
	}

	/**
	 * @param webservicesClient webservicesClient
	 * @param travelDcouments   travelDcouments
	 * @return AMA_FOP_GetPaymentSummaryRS response
	 */
	public AMA_FOP_GetPaymentSummaryRS getSummaryResponse(XmlWebservicesClient webservicesClient,
			String travelDcoumentId) {
		ClientConversationHandler clientConversationHandler = null;
		try {
			clientConversationHandler = clientConversationHandlerFactory.newConversation(xmlSap,
					DcxOptions.incomingDcxBuilder().build());
			return webservicesClient.getPaymentSummary(buildRequest(travelDcoumentId), clientConversationHandler);
		} finally {
			if (clientConversationHandler != null) {
				try {
					clientConversationHandler.close();
				} catch (Exception e) { // IGNORE
				}
			}
		}
	}

	/**
	 * @param travelDcouments
	 * @return
	 */
	private static AMA_FOP_GetPaymentSummaryRQ buildRequest(String travelDcoumentId) {
		AMA_FOP_GetPaymentSummaryRQ request = new AMA_FOP_GetPaymentSummaryRQ();
		request.setVersion(BigDecimal.valueOf(1.000));
		Contract contract = new Contract();
		buildRecord(travelDcoumentId, contract);
		return request.withContract(contract);
	}

	/**
	 * @param travelDcoument
	 * @param contract
	 */
	private static void buildRecord(String travelDcoumentId, Contract contract) {
		Record record = new Record();
		record.setContractNumber(travelDcoumentId);
		contract.setRecord(record);
	}
}

```

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\service\PaymentRecordsHistorySevice.java

```
package com.amadeus.dapi.jalext.payment.summary.service;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.payment.summary.mappers.PaymentRecordsHistoryJsonResponseMapper;
import com.amadeus.digital.api.cartdapibox.rs.v2.analytics.gdprfiltered.model.FareInfoTravelDocument.CouponStatusEnum;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.FareInfoTravelDocument;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocument;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocumentsListData;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocumentsListReply;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import com.amadeus.jal.dapi.model.core.PaymentRecordsSummaryReplyView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;

/**
 * Service class is responsible to provide service to get the FOP history details
 * 
 * @author ysiva
 */
@Named
public class PaymentRecordsHistorySevice {

  private DapiClient dapiClient;

  private XmlWebservicesClient webservicesClient;

  private RestJsonResponseParser restParser;

  private FopGetPaymentSummaryResponseService fopGetPaymentSummaryResponseService;

  private PaymentRecordsHistoryJsonResponseMapper paymentRecordsHistoryJsonResponseMapper;

  private RfdCannedMessageRepository cannedMessageRepository;

  private Constraints constraints;

  private static final Logger LOG = LoggerFactory.getLogger(PaymentRecordsHistorySevice.class);

  private static final String ERROR_MESSAGE = "Error occured while retriving FOP history";

  /**
   * Constructor to inject required classes
   * 
   * @param dapiClient
   *          dapiClient
   * @param webservicesClient
   *          webservicesClient
   * @param restParser
   *          restParser
   * @param fopGetPaymentSummaryResponseService
   *          fopGetPaymentSummaryResponseService
   * @param paymentRecordsHistoryJsonResponseMapper
   *          paymentRecordsHistoryJsonResponseMapper
   * @param cannedMessageRepository
   *          cannedMessageRepository
   * @param constraints
   *          constraints
   */
  @Inject
  public PaymentRecordsHistorySevice(DapiClient dapiClient, XmlWebservicesClient webservicesClient,
      RestJsonResponseParser restParser,
      FopGetPaymentSummaryResponseService fopGetPaymentSummaryResponseService,
      PaymentRecordsHistoryJsonResponseMapper paymentRecordsHistoryJsonResponseMapper,
      RfdCannedMessageRepository cannedMessageRepository,
      Constraints constraints) {
    this.dapiClient = dapiClient;
    this.webservicesClient = webservicesClient;
    this.restParser = restParser;
    this.fopGetPaymentSummaryResponseService = fopGetPaymentSummaryResponseService;
    this.paymentRecordsHistoryJsonResponseMapper = paymentRecordsHistoryJsonResponseMapper;
    this.cannedMessageRepository = cannedMessageRepository;
    this.constraints = constraints;
  }

  /**
   * Method to handle the request and process to get json response
   * 
   * @param orderId
   *          orderId
   * @param lang
   *          lang
   * @param lastName
   *          lastName
   * @param firstName
   * @param dataRepositoryHelper
   *          dataRepositoryHelper
   * @return json response
   */
  public Response handleRequest(String orderId, String lang, String lastName, String firstName,
      DataRepositoryHelper dataRepositoryHelper) {
    try {
      Response travelDocuments = dapiClient.retrieveTravelDocuments(orderId, lastName, firstName, lang);
      TravelDocumentsListReply travelDocumentReply = restParser.parse(travelDocuments, TravelDocumentsListReply.class);
      List<TravelDocument> travelDcouments = getTravelDocuments(travelDocumentReply);
      return getJsonResponse(dataRepositoryHelper, travelDocumentReply, travelDcouments);
    } catch (ConstraintViolationException constraintViolations) {
      return ErrorResponseUtils.getConstraintViloationsResponse(lang, cannedMessageRepository,
          constraintViolations);
    } catch (RuntimeException ex) {
      LOG.error(ERROR_MESSAGE, ex);
      return Response.status(Status.INTERNAL_SERVER_ERROR)
          .entity(ErrorResponseUtils.buildInternalErrorMessage(cannedMessageRepository))
          .build();
    }
  }

  private Response getJsonResponse(DataRepositoryHelper dataRepositoryHelper,
      TravelDocumentsListReply travelDocumentReply, List<TravelDocument> travelDcouments) {
    if (travelDocumentReply.getErrors() != null) {
      return getErrorResponse(travelDocumentReply);
    }
    Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary = new HashMap<>();
    Map<String, String> travelDocumentToDocumentType = new HashMap<>();
    CollectionUtils.emptyIfNull(travelDcouments).forEach((TravelDocument travelDcoument) -> {
      if (Boolean.FALSE.equals(isTicketExchangeOrReissued(travelDcoument))
          && StringUtils.isNotBlank(travelDcoument.getId())) {
        String travelDcoumentId = travelDcoument.getId();
        AMA_FOP_GetPaymentSummaryRS paymentSummaryResponse = fopGetPaymentSummaryResponseService
            .getSummaryResponse(webservicesClient, travelDcoumentId);
        travelDocumentToPaymentSummary.put(travelDcoumentId, paymentSummaryResponse);
        travelDocumentToDocumentType.put(travelDcoumentId, travelDcoument.getDocumentType().value());
      }
    });
    return getResponse(travelDocumentToPaymentSummary, travelDocumentToDocumentType, dataRepositoryHelper);
  }

  private static boolean isTicketExchangeOrReissued(TravelDocument travelDcoument) {
    return StringUtils.equalsIgnoreCase("ETICKET", travelDcoument.getDocumentType().name()) && CollectionUtils
        .emptyIfNull(travelDcoument.getFareInfos())
        .stream()
        .map(FareInfoTravelDocument::getCouponStatus)
        .allMatch(couponStatus -> CouponStatusEnum.EXCHANGEDORREISSUED.name().equalsIgnoreCase(couponStatus.name()));
  }

  /**
   * @param paymentSummaryResponse
   * @param dataRepositoryHelper
   * @return
   */
  private Response getResponse(Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary,
      Map<String, String> travelDocumentToDocumentType, DataRepositoryHelper dataRepositoryHelper) {
    return paymentRecordsHistoryJsonResponseMapper.buildJsonResponse(travelDocumentToPaymentSummary,
        travelDocumentToDocumentType, dataRepositoryHelper, constraints);
  }

  /**
   * @param travelDocumentReply
   * @return
   */
  private static List<TravelDocument> getTravelDocuments(TravelDocumentsListReply travelDocumentReply) {
    return Optional.ofNullable(travelDocumentReply)
        .map(TravelDocumentsListReply::getData)
        .map(TravelDocumentsListData::getTravelDocuments)
        .orElse(Collections.emptyList());
  }

  /**
   * Method to map error response
   * 
   * @param travelDocumentReply
   * @return
   */
  private Response getErrorResponse(TravelDocumentsListReply travelDocumentReply) {
    List<ErrorMessageView> errorsView = ErrorResponseUtils.getErrorMessages(travelDocumentReply.getErrors());
    PaymentRecordsSummaryReplyView paymentRecordsSummaryReplyView = new PaymentRecordsSummaryReplyView();
    paymentRecordsSummaryReplyView.setErrors(errorsView);
    return Response.status(Status.NOT_FOUND)
        .entity(paymentRecordsSummaryReplyView)
        .build();
  }
  
}

```

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\util\PaymentRecordUtils.java

```
package com.amadeus.dapi.jalext.payment.summary.util;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.digital.api.lib.logging.BusinessLogger;

/**
 * Util class to mask the credit card details like number
 * 
 * @author ysiva
 *
 */
public final class PaymentRecordUtils {

  private static final Pattern PATTERNCARD = Pattern.compile("\\b([0-9]{4})[0-9]{0,12}([0-9]{4})\\b");
  
  private static final char MASKING_CHAR = 'X';

  private PaymentRecordUtils() {
  }

  /**
   * Obfuscates the credit card number, between the posIni and posEnd characters.
   * 
   * @param creditCardNumber
   * @param posIni
   * @param posEnd
   * @return
   */
  public static String concealCCNumber(String creditCardNumber, int posIni, int posEnd) {
    if (StringUtils.isBlank(creditCardNumber)) {
      return StringUtils.EMPTY;
    }
    String creditCardResult = creditCardNumber;
    try {
      Matcher matcher = PATTERNCARD.matcher(creditCardNumber);
      if (matcher.find()) {
        creditCardResult = maskCCnumber(creditCardNumber, posIni, posEnd, matcher);
      }
    } catch (NumberFormatException e) {
      // Invalid format
      BusinessLogger.warn(PaymentRecordUtils.class,
          String.format("Exception concealing creditCardNumber: %s", creditCardNumber), e);
    }
    return creditCardResult;
  }

  /**
   * @param creditCardNumber
   * @param posIni
   * @param posEnd
   * @param matcher
   * @return
   */
  private static String maskCCnumber(String creditCardNumber, int posIni, int posEnd, Matcher matcher) {
    StringBuilder finalMask = new StringBuilder();
    String group = matcher.group();
    int groupLen = group.length();
    if (groupLen > posIni) {
      finalMask.append(group.substring(0, posIni));
      for (int i = posIni; i <= group.length() - (posEnd + 1); i++) {
        finalMask.append(MASKING_CHAR);
      }
      finalMask.append(group.substring(groupLen - posEnd));
    }
    return creditCardNumber.replace(group, finalMask);
  }
}

```

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\mappers\PaymentRecordsHistoryJsonResponseMapperTest.java

```
package com.amadeus.dapi.jalext.payment.summary.mappers;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyString;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolation;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.core.PaymentRecordsSummaryReplyView;
import com.amadeus.middleware.rfd.Currency;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class PaymentRecordsHistoryJsonResponseMapperTest {

  private PaymentRecordsHistoryJsonResponseMapper paymentRecordsHistoryJsonResponseMapper;

  private static final String AMA_FOP_PAYMENT_SUMMARY_RESPONSE = "AMA_FOP_GetPaymentSummaryWithCreditCardCash.xml";

  private static final String AMA_FOP_PAYMENT_SUMMARY_EMPTY_RESPONSE = "AMA_FOP_GetPaymentSummaryEmptyResponse.xml";
  
  private static final String AMA_FOP_PAYMENT_SUMMARY_RESPONSE_WE = "AMA_FOP_GetPaymentSummaryEmptyResponse_WE.xml";

  private static final String TICKET_ID_1 = "1312135764471";

  private static final String TICKET_ID_2 = "1312135764472";

  private static final Integer PAYMENT_RECORD_HISTORY_INCOMPLETE = 40786;

  @Mock
  private DataRepositoryHelper dataRepositoryHelper;

  private Constraints constraints;

  private AmadeusConstraintViolation<?> violations;

  @Mock
  private Currency currency;

  @BeforeEach
  public void setUp() {
    constraints = new Constraints(new ConstraintViolationFactoryImpl());
    paymentRecordsHistoryJsonResponseMapper = new PaymentRecordsHistoryJsonResponseMapper();
  }

  @Test
  public void testJsonResponsePopulated() {
    AMA_FOP_GetPaymentSummaryRS response = getFOPSummaryResponse(AMA_FOP_PAYMENT_SUMMARY_RESPONSE);
    Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary = new HashMap<>();
    travelDocumentToPaymentSummary.put(TICKET_ID_1, response);
    Map<String, String> travelDocumentToDocumentType = new HashMap<>();
    travelDocumentToDocumentType.put(TICKET_ID_1, "eticket");
    Mockito.when(dataRepositoryHelper.getCurrency(anyString())).thenReturn(currency);
    Mockito.when(currency.getName()).thenReturn("JAPANESE YEN");
    Mockito.when(currency.getDecpos()).thenReturn(BigDecimal.valueOf(0));
    Response jsonResponse = paymentRecordsHistoryJsonResponseMapper.buildJsonResponse(travelDocumentToPaymentSummary,
        travelDocumentToDocumentType, dataRepositoryHelper, constraints);
    PaymentRecordsSummaryReplyView replyView = (PaymentRecordsSummaryReplyView)jsonResponse.getEntity();
    assertNotNull(replyView.getData());
    assertNotNull(replyView.getDictionaries());
  }

  @Test
  public void testJsonResponseNotPopulatedIfVerbResponseNotValid() {
    AMA_FOP_GetPaymentSummaryRS response = getFOPSummaryResponse(AMA_FOP_PAYMENT_SUMMARY_EMPTY_RESPONSE);
    Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary = new HashMap<>();
    travelDocumentToPaymentSummary.put(TICKET_ID_1, response);
    Map<String, String> travelDocumentToDocumentType = new HashMap<>();
    travelDocumentToDocumentType.put(TICKET_ID_1, "eticket");
    violations = runValidatorAndGetError(travelDocumentToPaymentSummary, travelDocumentToDocumentType);
    assertNotNull(violations);
    assertEquals(PAYMENT_RECORD_HISTORY_INCOMPLETE, violations.getCanMessageNumber());
  }
  
  @Test
  public void testJsonResponsePopulatedIfVerbResponseHasWE() {
    AMA_FOP_GetPaymentSummaryRS response = getFOPSummaryResponse(AMA_FOP_PAYMENT_SUMMARY_RESPONSE_WE);
    Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary = new HashMap<>();
    travelDocumentToPaymentSummary.put(TICKET_ID_1, response);
    Map<String, String> travelDocumentToDocumentType = new HashMap<>();
    travelDocumentToDocumentType.put(TICKET_ID_1, "eticket");
    Mockito.when(dataRepositoryHelper.getCurrency(anyString()))
        .thenReturn(currency);
    Mockito.when(currency.getName())
        .thenReturn("JAPANESE YEN");
    Mockito.when(currency.getDecpos())
        .thenReturn(BigDecimal.valueOf(0));
    Response jsonResponse = paymentRecordsHistoryJsonResponseMapper.buildJsonResponse(travelDocumentToPaymentSummary,
        travelDocumentToDocumentType, dataRepositoryHelper, constraints);
    PaymentRecordsSummaryReplyView replyView = (PaymentRecordsSummaryReplyView) jsonResponse.getEntity();
    assertNotNull(replyView.getData());
    assertNotNull(replyView.getDictionaries());
  }

  @Test
  public void testPaymentSummaryResponseWithWarning() {
    AMA_FOP_GetPaymentSummaryRS emptyResponse = getFOPSummaryResponse(AMA_FOP_PAYMENT_SUMMARY_EMPTY_RESPONSE);
    Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary = new HashMap<>();
    Map<String, String> travelDocumentToDocumentType = new HashMap<>();
    travelDocumentToPaymentSummary.put(TICKET_ID_2, emptyResponse);
    travelDocumentToDocumentType.put(TICKET_ID_2, "eticket");
    AMA_FOP_GetPaymentSummaryRS response = getFOPSummaryResponse(AMA_FOP_PAYMENT_SUMMARY_RESPONSE);
    travelDocumentToPaymentSummary.put(TICKET_ID_1, response);
    travelDocumentToDocumentType.put(TICKET_ID_1, "eticket");
    Response jsonResponse = paymentRecordsHistoryJsonResponseMapper.buildJsonResponse(travelDocumentToPaymentSummary,
        travelDocumentToDocumentType, dataRepositoryHelper, constraints);
    PaymentRecordsSummaryReplyView replyView = (PaymentRecordsSummaryReplyView) jsonResponse.getEntity();
    assertFalse(replyView.getWarnings().isEmpty());
    assertNotNull(replyView.getData());
    assertNotNull(replyView.getDictionaries());
  }

  private static AMA_FOP_GetPaymentSummaryRS getFOPSummaryResponse(String xmlName) {
    return Format.xml()
        .parse(AMA_FOP_GetPaymentSummaryRS.class, PaymentRecordsHistoryJsonResponseMapperTest.class, xmlName);
  }

  /**
   * Method to validate the request and get the error from constraint
   */
  private AmadeusConstraintViolation<?>
      runValidatorAndGetError(Map<String, AMA_FOP_GetPaymentSummaryRS> travelDocumentToPaymentSummary,
          Map<String, String> travelDocumentToDocumentType) {
    try {
      paymentRecordsHistoryJsonResponseMapper.buildJsonResponse(travelDocumentToPaymentSummary,
          travelDocumentToDocumentType, dataRepositoryHelper, constraints);
    } catch (ConstraintViolationException e) {
      violations = (AmadeusConstraintViolation<?>)e.getConstraintViolations()
          .toArray()[0];
    }
    return violations;
  }
}

```

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\service\FopGetPaymentSummaryResponseServiceTest.java

```
package com.amadeus.dapi.jalext.payment.summary.service;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRQ;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class FopGetPaymentSummaryResponseServiceTest {

	private FopGetPaymentSummaryResponseService fopGetPaymentSummaryResponseService;

	@Mock
	private XmlWebservicesClient webservicesClient;

	@Mock
	private ClientConversationHandler clientConversationHandler;

	@Mock
	private ClientConversationHandlerFactory clientConversationHandlerFactory;

	private static final String TICKET_ID_1 = "1312135764471";

	@Mock
	private AMA_FOP_GetPaymentSummaryRQ amaFOPGetPaymentSummaryRQ;

	@BeforeEach
	public void setUp() {
		fopGetPaymentSummaryResponseService = new FopGetPaymentSummaryResponseService(clientConversationHandlerFactory);
	}

	@Test
	public void testGetSummaryResponseInvoked() {
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
				.thenReturn(clientConversationHandler);
		fopGetPaymentSummaryResponseService.getSummaryResponse(webservicesClient, TICKET_ID_1);
		Mockito.verify(webservicesClient, times(1)).getPaymentSummary(any(AMA_FOP_GetPaymentSummaryRQ.class),
				any(ClientConversationHandler.class));
	}
}

```

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\service\PaymentRecordsHistorySeviceTest.java

```
package com.amadeus.dapi.jalext.payment.summary.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.validation.Path;
import javax.ws.rs.core.Response;

import org.apache.commons.collections4.CollectionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.dapi.jalext.payment.summary.mappers.PaymentRecordsHistoryJsonResponseMapper;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Messages;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.TravelDocumentsListReply;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolationImpl;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import com.amadeus.jal.dapi.model.core.PaymentRecordsSummaryReplyView;
import com.amadeus.middleware.rfd.Currency;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import com.amadeus.xml._2010._06.fop_paymentsummary_v1.AMA_FOP_GetPaymentSummaryRS;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class PaymentRecordsHistorySeviceTest {

  private PaymentRecordsHistorySevice paymentRecordsHistorySevice;

  @Mock
  private DapiClient dapiClient;

  @Mock
  private XmlWebservicesClient webservicesClient;

  @Mock
  private RestJsonResponseParser restParser;

  @Mock
  private FopGetPaymentSummaryResponseService fopGetPaymentSummaryResponseService;

  @Mock
  private RfdCannedMessageRepository cannedMessageRepository;

  @Mock
  private DataRepositoryHelper dataRepositoryHelper;

  @Mock
  private Currency currency;

  @Mock
  private Path path;

  private static final String ORDER_ID = "W4DLIP";

  private static final String LANGUAGE = "EN";

  private static final String LAST_NAME = "Tata";

  private static final String FIRST_NAME = "Ekojuroku";

  private static final String TRAVEL_DOCUMENT_JSON_REPLY = "TravelDocumentJsonReply.json";

  private static final String AMA_FOP_PAYMENT_SUMMARY_RESPONSE = "AMA_FOP_GetPaymentSummaryRS.xml";

  private static final String TRAVEL_DOCUMENT_JSON_ERROR_REPLY = "TravelDocumentJsonErrorResponse.json";

  private static final String TRAVEL_DOCUMENT_NOT_FOUND_MSG = "TRAVEL DOCUMENT NOT FOUND";

  private static final String TRAVEL_DOCUMENT_NOT_FOUND_ERROR_CODE = "36893";

  private static final String UNABLE_TO_PROCESS_MSG = "UNABLE TO PROCESS";

  @BeforeEach
  public void setUp() {
    Constraints constraints = new Constraints(new ConstraintViolationFactoryImpl());
    PaymentRecordsHistoryJsonResponseMapper paymentRecordsHistoryJsonResponseMapper = new PaymentRecordsHistoryJsonResponseMapper();
    paymentRecordsHistorySevice = new PaymentRecordsHistorySevice(dapiClient, webservicesClient, restParser,
        fopGetPaymentSummaryResponseService, paymentRecordsHistoryJsonResponseMapper, cannedMessageRepository,
        constraints);
  }

  @Test
  public void testHandleRequest() {
    TravelDocumentsListReply travelDocumentsListReply = getTravelDocumentsListReply(TRAVEL_DOCUMENT_JSON_REPLY);
    Mockito.when(restParser.parse(any(), any())).thenReturn(travelDocumentsListReply);
    AMA_FOP_GetPaymentSummaryRS fopGetPaymentSummaryRS = getFOPSummaryResponse(AMA_FOP_PAYMENT_SUMMARY_RESPONSE);
    Mockito.when(fopGetPaymentSummaryResponseService.getSummaryResponse(any(), any()))
        .thenReturn(fopGetPaymentSummaryRS);
    Mockito.when(currency.getName()).thenReturn("JAPANESE YEN");
    Mockito.when(currency.getDecpos()).thenReturn(BigDecimal.valueOf(0));
    Mockito.when(dataRepositoryHelper.getCurrency(anyString())).thenReturn(currency);
    Response actualResponse = paymentRecordsHistorySevice.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
        dataRepositoryHelper);
    assertNotNull(actualResponse);
    assertEquals(200, actualResponse.getStatus());
  }

  @Test
  public void testTraveleDocumentsNotFoundError() {
    TravelDocumentsListReply travelDocumentsListReply = getTravelDocumentsListReply(TRAVEL_DOCUMENT_JSON_ERROR_REPLY);
    Mockito.when(restParser.parse(any(), any())).thenReturn(travelDocumentsListReply);
    Response response = paymentRecordsHistorySevice.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
        dataRepositoryHelper);
    PaymentRecordsSummaryReplyView jsonResponse = (PaymentRecordsSummaryReplyView)response.getEntity();
    assertNotNull(jsonResponse);
    ErrorMessageView errorMessage = CollectionUtils.emptyIfNull(jsonResponse.getErrors()).stream().findFirst().orElse(
        new ErrorMessageView());
    assertNotNull(errorMessage);
    assertEquals(TRAVEL_DOCUMENT_NOT_FOUND_ERROR_CODE, errorMessage.getCode());
    assertEquals(TRAVEL_DOCUMENT_NOT_FOUND_MSG, errorMessage.getTitle());
  }

  @Test
  public void testExceptionThrown() {
    Mockito.when(restParser.parse(any(), any())).thenReturn(new RuntimeException());
    Response response = paymentRecordsHistorySevice.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
        dataRepositoryHelper);
    Messages messages = (Messages)response.getEntity();
    assertNotNull(messages.getErrors());
    assertNotNull(UNABLE_TO_PROCESS_MSG, messages.getErrors().get(0).getTitle());
  }

  @Test
  public void testConstraintViolationThrown() {
    Set<ConstraintViolation<?>> violation = new HashSet<>();
    AmadeusConstraintViolationImpl<?> impl = new AmadeusConstraintViolationImpl<>(path, "validationError",
        40786);
    violation.add(impl);
    Mockito.when(restParser.parse(any(), any()))
        .thenThrow(new ConstraintViolationException("ValidationError", violation));
    Response response = paymentRecordsHistorySevice.handleRequest(ORDER_ID, LANGUAGE, LAST_NAME, FIRST_NAME,
        dataRepositoryHelper);
    Messages messages = (Messages)response.getEntity();
    assertNotNull(messages.getErrors());
    assertNotNull(UNABLE_TO_PROCESS_MSG, messages.getErrors().get(0).getTitle());
  }

  private static TravelDocumentsListReply getTravelDocumentsListReply(String fileName) {
    return Format.json()
        .parse(TravelDocumentsListReply.class, PaymentRecordsHistorySeviceTest.class, fileName);
  }

  private static AMA_FOP_GetPaymentSummaryRS getFOPSummaryResponse(String xmlName) {
    return Format.xml()
        .parse(AMA_FOP_GetPaymentSummaryRS.class, PaymentRecordsHistorySeviceTest.class, xmlName);
  }
}

```

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\util\PaymentRecordUtilsTest.java

```
package com.amadeus.dapi.jalext.payment.summary.util;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

/**
 * Test class for PaymentRecordUtils.java class
 * 
 * @author ysiva
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class PaymentRecordUtilsTest {

  private static final String CREDIT_CARD = "4012999999999999";

  private static final int INDEX_4 = 4;

  private static final int INDEX_0 = 0;

  @Test
  public void testCreditCardConcealed() {
    String cardNumberObfuscated1 = PaymentRecordUtils.concealCCNumber(CREDIT_CARD, INDEX_0, INDEX_4);
    String cardNumberObfuscated2 = PaymentRecordUtils.concealCCNumber(CREDIT_CARD, INDEX_4, INDEX_0);
    String cardNumberObfuscated3 = PaymentRecordUtils.concealCCNumber(CREDIT_CARD, INDEX_4, INDEX_4);
    String cardNumberObfuscated4 = PaymentRecordUtils.concealCCNumber(CREDIT_CARD, INDEX_0, INDEX_0);
    assertEquals("XXXXXXXXXXXX9999", cardNumberObfuscated1);
    assertEquals("4012XXXXXXXXXXXX", cardNumberObfuscated2);
    assertEquals("4012XXXXXXXX9999", cardNumberObfuscated3);
    assertEquals("XXXXXXXXXXXXXXXX", cardNumberObfuscated4);
  }

  @Test
  public void testCreditCardNumberisNull() {
    String cardNumberObfuscated = PaymentRecordUtils.concealCCNumber(null, INDEX_0, INDEX_4);
    assertEquals(StringUtils.EMPTY, cardNumberObfuscated);
  }
}

```

---

## File: jal-payment-summary\src\test\resources\com\amadeus\dapi\jalext\payment\summary\service\TravelDocumentJsonErrorResponse.json

```
{
    "errors": [
        {
            "code": "36893",
            "title": "TRAVEL DOCUMENT NOT FOUND",
            "detail": "Travel Document not found.",
            "source": {
                "pointer": "0",
                "parameter": "/travel-documents"
            }
        }
    ]
}
```

---

## File: jal-payment-summary\src\test\resources\com\amadeus\dapi\jalext\payment\summary\service\TravelDocumentJsonReply.json

```
{
    "data": {
        "travelDocuments": [
            {
                "flightIds": [
                    "ST1",
                    "ST2"
                ],
                "travelerIds": [
                    "PI2"
                ],
                "id": "1312407277487",
                "documentType": "eticket",
                "price": {
                    "base": 0,
                    "total": 0,
                    "currencyCode": "JPY",
                    "totalTaxes": 0
                },
                "fareInfos": [
                    {
                        "fareClass": "QPPTCEAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-06-01T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-06-01T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "OPRSIEAB",
                        "fareFamilyCode": "6JPJPYSA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-06-10T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-06-10T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST1",
                    "ST2"
                ],
                "travelerIds": [
                    "PT4"
                ],
                "id": "1312407277486",
                "documentType": "eticket",
                "price": {
                    "base": 12075,
                    "total": 13822,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 1207,
                            "currencyCode": "JPY",
                            "code": "JP",
                            "applicationLevel": "itinerary"
                        }
                    ],
                    "totalTaxes": 1747
                },
                "fareInfos": [
                    {
                        "fareClass": "QPPTCEAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "exchangedOrReissued",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-06-01T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-06-01T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "OPRSIEAB",
                        "fareFamilyCode": "6JPJPYSA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-06-10T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-06-10T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST1",
                    "ST2"
                ],
                "travelerIds": [
                    "PT2"
                ],
                "id": "1312407277485",
                "documentType": "eticket",
                "price": {
                    "base": 16100,
                    "total": 18810,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 1610,
                            "currencyCode": "JPY",
                            "code": "JP",
                            "applicationLevel": "itinerary"
                        }
                    ],
                    "totalTaxes": 2710
                },
                "fareInfos": [
                    {
                        "fareClass": "QPPTCEAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-06-01T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-06-01T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "OPRSIEAB",
                        "fareFamilyCode": "6JPJPYSA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-06-10T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-06-10T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "serviceIds": [
                    "TSM55"
                ],
                "travelerIds": [
                    "PT2"
                ],
                "id": "1315534314772",
                "documentType": "services",
                "price": {
                    "base": 30270,
                    "total": 33300,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 3030,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 3030
                }
            }
        ]
    },
    "dictionaries": {
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "1028",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-06-10T11:25:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "HND",
                    "dateTime": "2021-06-10T12:25:00.000+09:00",
                    "terminal": "1"
                },
                "aircraftCode": "E70",
                "duration": 3600,
                "isOpenSegment": false,
                "isInformational": false,
                "secureFlightIndicator": false
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "operatingAirlineName": "JAPAN AIRLINES",
                "marketingFlightNumber": "1418",
                "operatingAirlineFlightNumber": "1418",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-06-01T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-06-01T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "isInformational": false,
                "secureFlightIndicator": false
            }
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        }
    }
}
```

---

## File: mox-campaign\src\main\docker\ghostData\MOX\V2\1-1-1_GetOrderWithCheckInMethodsEligibilities\test-config.json

```
{
	"test-id": "1-1-1_GetOrderWithCheckInMethodsEligibilities"
}
```

---

## File: webapp\src\main\java\com\amadeus\config\JlpAppConfig.java

```
package com.amadeus.config;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Provider;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;

import org.apache.cxf.Bus;
import org.apache.cxf.endpoint.Server;
import org.apache.cxf.feature.Feature;
import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;
import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationOutInterceptor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import com.amadeus.dapi.jalext.filters.JalRequestTypeAppEventRestFilter;
import com.amadeus.dapi.jalext.impl.JalDapiExtensionServerImpl;
import com.amadeus.dapi.jalext.impl.configuration.provider.RequestFilter;
import com.amadeus.dapi.jalext.impl.configuration.provider.ResponseTechnicalHeaderFilter;
import com.amadeus.dapi.jalext.interceptor.SetAmaRefInterceptor;
import com.amadeus.digital.api.lib.analytics.interfaces.AppEventMonitoring;
import com.amadeus.digital.api.lib.concealment.SensitiveContext;
import com.amadeus.digital.api.lib.jaxrs.builders.RequestTypeAppEventBuilder;
import com.amadeus.digital.api.lib.jaxrs.clients.AnalyticsServiceClient;
import com.amadeus.digital.api.lib.jaxrs.filters.RestResponseFilter;
import com.amadeus.digital.api.lib.jaxrs.interceptors.RequestContextInterceptor;
import com.amadeus.digital.api.lib.jaxrs.interceptors.ResponseContextInterceptor;
import com.amadeus.digital.api.lib.jaxrs.providers.JacksonProvider;
import com.amadeus.digital.api.lib.jaxrs.providers.JaxRsExceptionMapper;
import com.amadeus.digital.api.lib.log.CollateralCallsLogInInterceptor;
import com.amadeus.digital.api.lib.log.CollateralCallsLogOutInterceptor;
import com.amadeus.digital.api.lib.log.CollateralCallsStatsLogInInterceptor;
import com.amadeus.digital.api.lib.log.CollateralCallsStatsLogOutInterceptor;
import com.amadeus.digital.api.lib.log.IncomingCallsInInterceptor;
import com.amadeus.digital.api.lib.log.IncomingCallsOutInterceptor;
import com.amadeus.digital.api.lib.log.RestStatisticsLogFilter;
import com.amadeus.digital.api.lib.log.RestStatisticsRequestLogFilter;
import com.amadeus.digital.api.lib.traceability.TraceabilityInInterceptor;
import com.amadeus.digital.api.lib.traceability.TraceabilityOutInterceptor;
import com.amadeus.middleware.dcx.DistributedContextWrapper;
import com.amadeus.middleware.securitycontext.SecurityContext;
import com.amadeus.webservices.retailing.orchestration.jcppack.JCPPackEnvironmentProvider;
import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

@Named
@Configuration
@PropertySource("classpath:/version.properties")
@ComponentScan({ "com.amadeus.middleware", "com.amadeus.config", "com.amadeus.dapi.jalext", "com.amadeus.jal",
    "com.amadeus.shoppingbasket.webservices", "com.amadeus.pelican.common.fwk.core.*", "com.amadeus.tds",
    "com.amadeus.digital.api.lib", "com.amadeus.digital.api.config", "com.amadeus.webservices.retailing.orchestration.jcppack" })
public class JlpAppConfig extends WebAppInitializer {

  @Inject
  private ResponseTechnicalHeaderFilter responseTechnicalHeaderFilter;

  @Inject
  private RequestFilter requestFilter;

  @Inject
  private Provider<SecurityContext> securityContextProvider;

  @Inject
  private Provider<DistributedContextWrapper> distributedContextWrapperProvider;

  @Inject
  private Provider<AppEventMonitoring> monitoringProvider;

  @Inject
  private Provider<JCPPackEnvironmentProvider> jcpPackEnvironmentProvider;

  @Inject
  private AnalyticsServiceClient analyticsService;

  @Inject
  private RequestTypeAppEventBuilder requestTypeAppEventBuilder;

  @Inject
  private ThreadPoolExecutorFactoryBean threadPoolExecutorFactoryBean;

  @Bean
  public Server createServer(Feature ojfServerRsFeature, Bus cxfBus, JalDapiExtensionServerImpl serverImpl,
      IncomingCallsInInterceptor incomingCallsInInterceptor, IncomingCallsOutInterceptor incomingCallsOutInterceptor,
      CollateralCallsLogInInterceptor collateralCallsLogInInterceptor, CollateralCallsLogOutInterceptor collateralCallsLogOutInterceptor) {
    JAXRSServerFactoryBean serverFactory = new JAXRSServerFactoryBean();
    serverFactory.setFeatures(Collections.singletonList(ojfServerRsFeature));
    serverFactory.setProviders(getProviders());
    serverFactory.setServiceBean(serverImpl);
    serverFactory.setBus(cxfBus);
    serverFactory.getInInterceptors().add(new RequestContextInterceptor());
    serverFactory.getOutInterceptors().add(new ResponseContextInterceptor());
    addInterceptorsToBus(cxfBus, incomingCallsInInterceptor, incomingCallsOutInterceptor, collateralCallsLogInInterceptor, collateralCallsLogOutInterceptor);
    return serverFactory.create();
  }

  private void addInterceptorsToBus(Bus cxfBus, IncomingCallsInInterceptor incomingCallsInInterceptor, IncomingCallsOutInterceptor incomingCallsOutInterceptor,
      CollateralCallsLogInInterceptor collateralCallsLogInInterceptor, CollateralCallsLogOutInterceptor collateralCallsLogOutInterceptor) {
    // "In" interceptors
    cxfBus.getInInterceptors().add(new TraceabilityInInterceptor());
    cxfBus.getInInterceptors().add(new SetAmaRefInterceptor());
    cxfBus.getInInterceptors().add(incomingCallsInInterceptor);
    cxfBus.getInInterceptors().add(collateralCallsLogInInterceptor);
    cxfBus.getInInterceptors().add(new CollateralCallsStatsLogInInterceptor());

    // "Out" interceptors
    cxfBus.getOutInterceptors().add(new TraceabilityOutInterceptor());
    cxfBus.getOutInterceptors().add(incomingCallsOutInterceptor);
    cxfBus.getOutInterceptors().add(collateralCallsLogOutInterceptor);
    cxfBus.getOutInterceptors().add(new CollateralCallsStatsLogOutInterceptor());

    // "Out Fault" interceptors
    cxfBus.getOutFaultInterceptors().add(incomingCallsOutInterceptor);
    cxfBus.getOutFaultInterceptors().add(new TraceabilityOutInterceptor());
  }

  @Bean
  public IncomingCallsInInterceptor getIncomingCallsInInterceptor(SensitiveContext sensitiveContext) {
    return new IncomingCallsInInterceptor(sensitiveContext);
  }

  @Bean
  public IncomingCallsOutInterceptor getIncomingCallsOutInterceptor(SensitiveContext sensitiveContext) {
    return new IncomingCallsOutInterceptor(sensitiveContext);
  }

  @Bean
  public CollateralCallsLogInInterceptor getCollateralCallsLogInInterceptor(SensitiveContext sensitiveContext) {
    return new CollateralCallsLogInInterceptor(sensitiveContext);
  }

  @Bean
  public CollateralCallsLogOutInterceptor getCollateralCallsLogOutInterceptor(SensitiveContext sensitiveContext) {
    return new CollateralCallsLogOutInterceptor(sensitiveContext);
  }

  private List<Object> getProviders() {
    List<Object> providers = new ArrayList<>();
    providers.add(new JacksonProvider());
    providers.add(new JaxRsExceptionMapper());
    providers.add(new JAXRSBeanValidationInInterceptor());
    providers.add(new JAXRSBeanValidationOutInterceptor());
    providers.add(responseTechnicalHeaderFilter);
    providers.add(requestFilter);
    providers.add(new RestResponseFilter());
    providers.add(new RestStatisticsRequestLogFilter());
    providers.add(new RestStatisticsLogFilter(securityContextProvider, jcpPackEnvironmentProvider, distributedContextWrapperProvider, monitoringProvider));
    providers.add(new JalRequestTypeAppEventRestFilter(analyticsService, requestTypeAppEventBuilder, threadPoolExecutorFactoryBean));
    return providers;
  }

  @Override
  public void onStartup(ServletContext container) throws ServletException {
    // to add init parameter
    System.setProperty("spring.main.allow-bean-definition-overriding", "true");
    // To allow circular references until fix for circular reference between contactMapper and addressMapper
    System.setProperty("spring.main.allow-circular-references", "true");
    // setting default timeout to 60sec
    System.setProperty("com.amadeus.digital.api.lib.client.connectivity.REST_RECEIVE_TIMEOUT", "60000");
    super.onStartup(container);
    container.getServletRegistration(OJF_SERVLET_NAME).setInitParameter("hide-service-list-page", Boolean.TRUE.toString());
  }

}
```

---

## File: webapp\src\main\java\com\amadeus\config\RfdPackConfig.java

```
package com.amadeus.config;

import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

import com.amadeus.middleware.ezt.EztDataSourceBuilder;
import com.amadeus.middleware.ezt.EztEntityManagerFactoryBuilder;
import com.amadeus.middleware.ioc.annotation.Value;

/**
 * <p>
 * RFD configuration for a RFD SQLite database.
 * <ol>
 * <li>Configuration should define a {@link DataSource}, {@link EntityManager},
 * {@link EntityManagerFactory} and {@link PlatformTransactionManager}.</li>
 * <li>Reference them accordingly in the {@link EnableJpaRepositories}
 * annotation attributes (except for {@link EntityManager}, which requires no
 * reference).</li>
 * <li>Ensure {@link Entity} beans associated with different data sources are in
 * different packages.</li>
 * <li>Ensure that the "flip-flop" file is in the same directory as the
 * database(s).</li>
 * </ol>
 * </p>
 */
@Configuration
@EnableJpaRepositories(basePackages = "com.amadeus.middleware.rfd", transactionManagerRef = "rfdPackTransactionManager",
    entityManagerFactoryRef = "rfdPackEntityManagerFactory")
public class RfdPackConfig {

  @Value("${CONF_RFD_DIR:${ojf.root-dir-path}/data/rfd/}")
  private String rfdDir;

  @Bean(name = "rfdPackEntityManager")
  public EntityManager entityManager(EztDataSourceBuilder dsBuilder, EztEntityManagerFactoryBuilder emfBuilder) {
    return entityManagerFactory(dsBuilder, emfBuilder).createEntityManager();
  }

  @Bean(name = "rfdPackTransactionManager")
  public PlatformTransactionManager transactionManager(EztDataSourceBuilder dsBuilder,
      EztEntityManagerFactoryBuilder emfBuilder) {
    return new JpaTransactionManager(entityManagerFactory(dsBuilder, emfBuilder));
  }

  @Bean(name = "rfdPackEntityManagerFactory")
  public EntityManagerFactory entityManagerFactory(EztDataSourceBuilder dsBuilder,
      EztEntityManagerFactoryBuilder emfBuilder) {
    return emfBuilder.packagesToScan("com.amadeus.middleware.rfd").dataSource(rfdDataSource(dsBuilder)).build();
  }

  private DataSource rfdDataSource(EztDataSourceBuilder builder) {
    return builder.path(rfdDir).packageName("ref_synchro").build();
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\config\TaskExecutorConfig.java

```
package com.amadeus.config;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.ThreadPoolExecutor;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;
import com.amadeus.middleware.concurrent.ExecutorServiceDecorator;
import com.amadeus.middleware.ioc.annotation.Value;

@Configuration
public class TaskExecutorConfig {
  private static final int CORE_SIZE = 10;

  private static final int IDLE_TIME = 30;

  private static final int QUEUE_CAPACITY = 100;

  @Value("${taskexecutorconfig.gracefullshutdown.timeout:30}")
  private int taskexecutorconfigGracefullshutdownTimeout;

  /**
   * Expose a @{ThreadPoolExecutorFactoryBean} with an {@link ExecutorService} decorated with OJF
   * {@link ExecutorServiceDecorator}. The factory brings lifecycle support for graceful shutdown.
   */
  @Bean ThreadPoolExecutorFactoryBean
  restThreadPoolExecutorFactoryBean(final ExecutorServiceDecorator executorServiceDecorator) {
    ThreadPoolExecutorFactoryBean factoryBean = new ThreadPoolExecutorFactoryBean() {
      @Override
      public ExecutorService getObject() {
        return executorServiceDecorator.decorate(super.getObject());
      }
    };
    factoryBean.setCorePoolSize(CORE_SIZE);
    factoryBean.setMaxPoolSize(CORE_SIZE * 2);
    factoryBean.setKeepAliveSeconds(IDLE_TIME);
    factoryBean.setQueueCapacity(QUEUE_CAPACITY);
    factoryBean.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());
    factoryBean.setWaitForTasksToCompleteOnShutdown(true);
    factoryBean.setAwaitTerminationSeconds(taskexecutorconfigGracefullshutdownTimeout);
    return factoryBean;
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\filters\JalRequestTypeAppEventRestFilter.java

```
package com.amadeus.dapi.jalext.filters;

import javax.inject.Inject;
import javax.json.JsonObject;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerResponseContext;
import javax.ws.rs.container.ContainerResponseFilter;
import javax.ws.rs.container.ResourceInfo;
import javax.ws.rs.core.Context;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.digital.api.lib.analytics.beans.AppEventConfigurationAttributes;
import com.amadeus.digital.api.lib.jaxrs.MessageWrapperUtils;
import com.amadeus.digital.api.lib.jaxrs.builders.RequestTypeAppEventBuilder;
import com.amadeus.digital.api.lib.jaxrs.builders.analytics.constants.RequestTypeAppEventConstants;
import com.amadeus.digital.api.lib.jaxrs.builders.analytics.pojo.AppEventPayloadAttributes;
import com.amadeus.digital.api.lib.jaxrs.clients.AnalyticsServiceClient;
import com.amadeus.digital.api.lib.utils.AppEventUtils;
import com.amadeus.digital.api.lib.utils.HeadersUtils;
import com.amadeus.digital.api.lib.utils.RestMessageUtils;
import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;

public class JalRequestTypeAppEventRestFilter implements ContainerResponseFilter {

    private static final String APP_EVENT_TECH_SOURCE = "JAL-Ext";

    private static final String APP_EVENT_CUSTOMER_CODE = "JL";

    private static final String APP_EVENT_SOURCE = "DAPI-Ext";

    private static final String APP_EVENT_TYPE = "request";

    private static final String SWAGGER_SPEC_VERSION_VALUE = System
            .getProperty(RequestTypeAppEventConstants.VersionNodeConstants.SWAGGER_SPEC_VERSION, StringUtils.EMPTY);

    private final AnalyticsServiceClient analyticsService;
    private final RequestTypeAppEventBuilder requestTypeAppEventBuilder;

    private ThreadPoolExecutorFactoryBean threadPoolExecutorFactoryBean;

    @Context
    private ResourceInfo resourceInfo;

    @Context
    private HttpServletRequest httpServletRq;

    @Inject
    public JalRequestTypeAppEventRestFilter(AnalyticsServiceClient analyticsService,
            RequestTypeAppEventBuilder requestTypeAppEventBuilder, ThreadPoolExecutorFactoryBean threadPoolExecutorFactoryBean) {
        this.analyticsService = analyticsService;
        this.requestTypeAppEventBuilder = requestTypeAppEventBuilder;
        this.threadPoolExecutorFactoryBean = threadPoolExecutorFactoryBean;
    }

    @Override
    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {
        final AppEventPayloadAttributes appEventPayloadAttributes = populateAppEventPayloadAttributes(requestContext,
                responseContext);

        String callID = AppEventUtils.retrieveUUID();

        final AppEventConfigurationAttributes configAttributes = populateConfigAttributes(requestContext,
            responseContext, callID);

        threadPoolExecutorFactoryBean.getObject().execute(() -> {
            JsonObject payloadJsonObject = requestTypeAppEventBuilder.buildRequestTypeAppEvent(requestContext,
                appEventPayloadAttributes, true);
            analyticsService.run(configAttributes, payloadJsonObject);
        });

    }

    private AppEventConfigurationAttributes populateConfigAttributes(final ContainerRequestContext req,
        final ContainerResponseContext res, String callID) {
        AppEventConfigurationAttributes configAttributes = new AppEventConfigurationAttributes();
        configAttributes.setSource(APP_EVENT_SOURCE);
        configAttributes.setAmaRequestId(HeadersUtils.getAmaRequestId(req, res));
        configAttributes.setAppEventType(APP_EVENT_TYPE);
        configAttributes.setCustomerCode(APP_EVENT_CUSTOMER_CODE);
        if (StringUtils.isNotEmpty(MessageWrapperUtils.getAmaClientRefHeader())) {
            configAttributes.setSessionId(MessageWrapperUtils.getAmaClientRefHeader());
        } else {
            configAttributes.setSessionId(RequestTypeAppEventConstants.DEFAULT_VALUE);
        }
        configAttributes.setTechSource(APP_EVENT_TECH_SOURCE);
        configAttributes.setCallID(callID);
        return configAttributes;
    }

    private AppEventPayloadAttributes populateAppEventPayloadAttributes(final ContainerRequestContext req,
            final ContainerResponseContext res) {

        AppEventPayloadAttributes appEventPayloadAttributes = new AppEventPayloadAttributes();
        appEventPayloadAttributes.setIp(RestMessageUtils.getClientIpAddress(req, httpServletRq));
        appEventPayloadAttributes.setEndPointName(RestMessageUtils.getResourceName(resourceInfo));
        appEventPayloadAttributes.setOperationalId(RestMessageUtils.getResourceMethod(resourceInfo));
        appEventPayloadAttributes.setStartTimestamp(RestMessageUtils.getRequestTimestamp(req).toString());
        appEventPayloadAttributes.setBaseUrl(req.getUriInfo().getBaseUri().toString());
        appEventPayloadAttributes.setHttpCode(res.getStatus());
        appEventPayloadAttributes.setUrlAbsolutePath(req.getUriInfo().getAbsolutePath().toString());

        String swaggerVersion = HeadersUtils.getSwaggerVersion(res.getStringHeaders());
        // If Swagger version is missing in header, we check if it is set in System
        // Property
        if (StringUtils.isEmpty(swaggerVersion) && StringUtils.isNotEmpty(SWAGGER_SPEC_VERSION_VALUE)) {
            swaggerVersion = SWAGGER_SPEC_VERSION_VALUE;
        }
        appEventPayloadAttributes.setVersion(swaggerVersion);
        if (res.hasEntity()) {
            appEventPayloadAttributes.setResponseBody(res.getEntity());
        }
        return appEventPayloadAttributes;
    }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\configuration\provider\RequestFilter.java

```
package com.amadeus.dapi.jalext.impl.configuration.provider;

import lombok.extern.java.Log;

import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.Context;
import javax.ws.rs.ext.Provider;

/**
 * Filter to store the request timestamp
 * 
 * @author smallick
 */
@Named
@Log
@Provider
public class RequestFilter implements ContainerRequestFilter {

  static final String REQUEST_TIMESTAMP_PROPERTY = "JalRequestTimestamp";

  @Context
  private HttpServletRequest httpServletRq;

  @Override
  public void filter(ContainerRequestContext req) {
    req.setProperty(REQUEST_TIMESTAMP_PROPERTY, Long.valueOf(System.currentTimeMillis()));
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\configuration\provider\ResponseTechnicalHeaderFilter.java

```
package com.amadeus.dapi.jalext.impl.configuration.provider;

import javax.inject.Named;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerResponseContext;
import javax.ws.rs.container.ContainerResponseFilter;
import javax.ws.rs.ext.Provider;

import org.springframework.beans.factory.annotation.Value;

@Named
@Provider
public class ResponseTechnicalHeaderFilter implements ContainerResponseFilter {

  @Value("${application.version}")
  private String applicationVersion;

  @Value("${specification.version}")
  private String specificationVersion;

  @Value("${paas}")
  private String paasName;
  
  @Override
  public void filter(ContainerRequestContext req, ContainerResponseContext res) {
    res.getHeaders()
        .add("jal-application-version", applicationVersion);
    res.getHeaders()
        .add("jal-specification-version", specificationVersion);
    res.getHeaders()
    	.add("jal-paas-name", paasName);

    Object requestTimestamp = req.getProperty(RequestFilter.REQUEST_TIMESTAMP_PROPERTY);
    if (requestTimestamp instanceof Long) {
      res.getHeaders()
          .add("jal-ama-elapsed", String.valueOf(System.currentTimeMillis() - (Long)requestTimestamp));
    }
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\config\JalConfig.java

```
package com.amadeus.dapi.jalext.impl.deeplinks.config;

import java.util.Map;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableConfigurationProperties(JalConfig.class)
@ConfigurationProperties(prefix = "external-providers-config.deeplink.jal")
public class JalConfig {

  private Map<String, String> config;

  public Map<String, String> getConfig() {
    return config;
  }

  public void setConfig(Map<String, String> config) {
    this.config = config;
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\exception\EncryptionException.java

```
package com.amadeus.dapi.jalext.impl.deeplinks.exception;

public class EncryptionException extends RuntimeException {
  public EncryptionException(String message) {
    super(message);
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\util\DeeplinkResponseUtil.java

```
package com.amadeus.dapi.jalext.impl.deeplinks.util;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;

import org.apache.commons.collections4.CollectionUtils;

import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Messages;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.NonEligibilityReason;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.SeatChangeEligibility;
import com.amadeus.jal.dapi.model.core.DeeplinkReplyView;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

public class DeeplinkResponseUtil {

  /**
   * Method to get error response from order reply
   * 
   * @param orderReply
   * @return
   */
  public static Response getErrorResponse(OrderReply orderReply) {
    List<ErrorMessageView> errorsView = ErrorResponseUtils.getErrorMessages(orderReply.getErrors());
    DeeplinkReplyView deeplinkReplyView = new DeeplinkReplyView();
    deeplinkReplyView.setErrors(errorsView);
    return Response.status(Response.Status.BAD_REQUEST).entity(deeplinkReplyView).build();
  }

  /**
   * Method to get error response from constraint violations
   * 
   * @param lang
   *          lang
   * @param cannedMessageRepository
   *          cannedMessageRepository
   * @param constraintViolations
   *          constraintViolations
   * @return error response
   */
  public static Response getConstraintViolationsResponse(String lang,
      RfdCannedMessageRepository cannedMessageRepository,
      ConstraintViolationException constraintViolations) {
    Messages messages =
        ErrorResponseUtils.getConstraintViolationsMessage(lang, cannedMessageRepository, constraintViolations);
    DeeplinkReplyView deeplinkReplyView = new DeeplinkReplyView();
    deeplinkReplyView.setErrors(Optional.of(messages)
        .map(Messages::getErrors)
        .orElse(Collections.emptyList())
        .stream()
        .map(errorMessage -> {
          ErrorMessageView errorMessageView = new ErrorMessageView();
          errorMessageView.setCode(errorMessage.getCode());
          errorMessageView.setTitle(errorMessage.getTitle());
          errorMessageView.detail(errorMessage.getDetail());
          return errorMessageView;
        })
        .collect(Collectors.toList()));
    return Response.status(Response.Status.OK)
        .entity(deeplinkReplyView)
        .build();
  }

  public static Response getNonEligibilityResponse(SeatChangeEligibility seatChangeEligibility) {
    List<NonEligibilityReason> nonEligibilityReasons = seatChangeEligibility.getNonEligibilityReasons();
    List<ErrorMessageView> errorsView = new ArrayList<>();
    CollectionUtils.emptyIfNull(nonEligibilityReasons).forEach((NonEligibilityReason nonEligibilityReason) -> {
      ErrorMessageView errorMessageView = mapErrorMessageView(nonEligibilityReason);
      errorsView.add(errorMessageView);
    });
    DeeplinkReplyView deeplinkReplyView = new DeeplinkReplyView();
    deeplinkReplyView.setErrors(errorsView);
    return Response.status(Response.Status.OK).entity(deeplinkReplyView).build();
  }

  /**
   * Method to map error message view
   * 
   * @param nonEligibilityReason
   * @return
   */
  private static ErrorMessageView mapErrorMessageView(NonEligibilityReason nonEligibilityReason) {
    ErrorMessageView errorMessageView = new ErrorMessageView();
    errorMessageView.setCode(nonEligibilityReason.getCode());
    errorMessageView.setTitle(nonEligibilityReason.getTitle());
    return errorMessageView;
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\util\DeeplinkUtil.java

```
package com.amadeus.dapi.jalext.impl.deeplinks.util;

import java.util.Map;
import java.util.stream.Collectors;

import com.amadeus.jal.dapi.model.base.DeviceViewPrivate;
import com.amadeus.jal.dapi.model.core.DeviceView;

public class DeeplinkUtil {

  public static String mapDeviceCategory(DeviceView device) {
    if (device.getCategory() == DeviceViewPrivate.CategoryEnum.MOBILE_PHONE) {
      return "MOBILE";
    }
    return DeviceViewPrivate.CategoryEnum.DESKTOP.toString();
  }
  
  public static String getConcatenatedParams(Map<String, String> queryParams) {
    return queryParams.entrySet()
        .stream()
        .map(entry -> entry.getKey() + "=" + entry.getValue())
        .collect(Collectors.joining("&"));
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\validators\DeeplinkServiceValidator.java

```
package com.amadeus.dapi.jalext.impl.deeplinks.validators;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderDictionary;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.core.DeeplinkRequestView;
import com.amadeus.jal.dapi.model.core.FlightDesignatorView;
import com.amadeus.jal.dapi.model.core.StakeholderView;

@Named
public class DeeplinkServiceValidator {

  private final Constraints constraints;

  @Inject
  public DeeplinkServiceValidator(Constraints constraints) {
    this.constraints = constraints;
  }

  /**
   * Method to validate the deeplinkRequest parameters
   * 
   * @param orderReply
   * @param deeplinkRequest
   */
  public void validateRequest(OrderReply orderReply, DeeplinkRequestView deeplinkRequest) {
    validateTravelerInformation(orderReply, deeplinkRequest.getTraveler());
    validateFlightInformation(orderReply, deeplinkRequest.getFlightInformation());
    validateCallBackUrl(deeplinkRequest);
  }

  private void validateFlightInformation(OrderReply orderReply, FlightDesignatorView flightInformation) {
    constraints
        .validate(constraints.validator(
            () -> flightInformation == null || StringUtils.isEmpty(flightInformation.getFlightNumber())
                || StringUtils.isEmpty(flightInformation.getCarrierCode())
                || !isRequestedFlightPresentInOrder(orderReply, flightInformation),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY,
                ErrorResponseUtils.INVALID_FLIGHT_NUMBER_ERROR_MESSAGE,
                ErrorResponseUtils.INVALID_FLIGHT_NUMBER)));
  }

  private void validateTravelerInformation(OrderReply orderReply, StakeholderView travelerInformation) {
    constraints
        .validate(constraints.validator(
            () -> travelerInformation == null || StringUtils.isEmpty(travelerInformation.getLastName())
                || StringUtils.isEmpty(travelerInformation.getFirstName())
                || !isRequestedLastNamePresentInOrder(orderReply, travelerInformation.getLastName())
                || !isRequestedFirstNamePresentInOrder(orderReply, travelerInformation.getFirstName()),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY,
                ErrorResponseUtils.INVALID_TRAVELER_INFORMATION_ERROR_MESSAGE,
                ErrorResponseUtils.INVALID_TRAVELER_INFORMATION)));

  }

  private void validateCallBackUrl(DeeplinkRequestView deeplinkRequestView) {
    constraints
        .validate(constraints.validator(
            () -> StringUtils.isEmpty(deeplinkRequestView.getCallbackUrl()),
            () -> constraints.payloadViolationWithCanMessage(StringUtils.EMPTY,
                ErrorResponseUtils.RETURN_URL_IS_EMPTY_ERROR_MESSAGE,
                ErrorResponseUtils.RETURN_URL_IS_EMPTY)));
  }

  private boolean isRequestedLastNamePresentInOrder(OrderReply orderReply,
      String lastNameInRequest) {
    return Optional.of(orderReply)
        .map(OrderReply::getData)
        .map(Order::getTravelers)
        .orElse(Collections.emptyList())
        .stream()
        .anyMatch(traveler -> traveler.getNames()
            .stream()
            .anyMatch(name -> StringUtils.equalsIgnoreCase(name.getLastName(), lastNameInRequest)));
  }

  private boolean isRequestedFirstNamePresentInOrder(OrderReply orderReply,
      String firstNameInRequest) {
    return Optional.of(orderReply)
        .map(OrderReply::getData)
        .map(Order::getTravelers)
        .orElse(Collections.emptyList())
        .stream()
        .anyMatch(traveler -> traveler.getNames()
            .stream()
            .anyMatch(name -> StringUtils.equalsIgnoreCase(name.getFirstName(), firstNameInRequest)));
  }

  private boolean isRequestedFlightPresentInOrder(OrderReply orderReply,
      FlightDesignatorView flightInformation) {
    return Optional.of(orderReply)
        .map(OrderReply::getDictionaries)
        .map(OrderDictionary::getFlight)
        .orElse(Collections.emptyMap())
        .entrySet()
        .stream()
        .map(Map.Entry::getValue)
        .anyMatch(flight -> StringUtils.equalsIgnoreCase(flight.getMarketingFlightNumber(),
            flightInformation.getFlightNumber())
            && StringUtils.equalsIgnoreCase(flight.getMarketingAirlineCode(), flightInformation.getCarrierCode()));
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\SeatmapDeeplinkService.java

```
package com.amadeus.dapi.jalext.impl.deeplinks;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;

import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.ConstraintViolationException;
import javax.ws.rs.core.Response;

import lombok.extern.slf4j.Slf4j;

import org.apache.commons.collections4.CollectionUtils;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.util.UriComponentsBuilder;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.impl.deeplinks.config.JalConfig;
import com.amadeus.dapi.jalext.impl.deeplinks.util.DeeplinkResponseUtil;
import com.amadeus.dapi.jalext.impl.deeplinks.util.DeeplinkUtil;
import com.amadeus.dapi.jalext.impl.deeplinks.validators.DeeplinkServiceValidator;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Flight;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderDictionary;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderEligibilities;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.SeatChangeEligibility;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.model.core.DeeplinkDataView;
import com.amadeus.jal.dapi.model.core.DeeplinkReplyView;
import com.amadeus.jal.dapi.model.core.DeeplinkRequestView;
import com.amadeus.jal.dapi.model.core.UrlView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

@Named
@Slf4j
public class SeatmapDeeplinkService {

  private static final String QUERY_PARAM_ENC_NAME = "ENC";
  private static final String QUERY_PARAM_ENCT_NAME = "ENCT";
  private static final String QUERY_PARAM_LANGUAGE_NAME = "LANGUAGE";
  private static final String QUERY_PARAM_SITE_NAME = "SITE";

  private static final String DEFAULT_COUNTRY_SITE = "JAL_JR_JP";

  private static final String ERROR_MESSAGE = "Error occurred while processing the request";
  
  private static final String CONSTRAINT_VIOLATION_MESSAGE = "Constraint violation occurred while processing the request";
  private final DapiClient dapiClient;

  private final RestJsonResponseParser restParser;

  private final RfdCannedMessageRepository rfdCannedMessageRepository;

  private final DeeplinkServiceValidator deeplinkServiceValidator;

  private final WdkEncryptionService wdkEncryptionService;

  private final JalConfig jalConfig;

  @Value("${externalProvidersConfig.deeplink.baseUrl:}")
  private String baseUrl;
  @Value("${externalProvidersConfig.deeplink.path:}")
  private String resourcePath;
  @Value("${externalProvidersConfig.deeplink.encryptParams:}")
  private boolean encryptParams;

  /**
   * @param dapiClient
   * @param restParser
   * @param rfdCannedMessageRepository
   * @param deeplinkServiceValidator
   * @param wdkEncryptionService
   * @param jalConfig
   */
  @Inject
  public SeatmapDeeplinkService(DapiClient dapiClient, RestJsonResponseParser restParser,
      RfdCannedMessageRepository rfdCannedMessageRepository, DeeplinkServiceValidator deeplinkServiceValidator,
      WdkEncryptionService wdkEncryptionService, JalConfig jalConfig) {
    this.dapiClient = dapiClient;
    this.restParser = restParser;
    this.rfdCannedMessageRepository = rfdCannedMessageRepository;
    this.deeplinkServiceValidator = deeplinkServiceValidator;
    this.wdkEncryptionService = wdkEncryptionService;
    this.jalConfig = jalConfig;
  }

  /**
   * Method to handle deeplink request
   * 
   * @param orderId
   * @param lang
   * @param deeplinkRequest
   * @return
   */
  public Response handleRequest(String orderId, String lang, DeeplinkRequestView deeplinkRequest) {
    try {
      if (deeplinkRequest == null) {
        deeplinkRequest = new DeeplinkRequestView();
      }

      String lastName = null;
      if (deeplinkRequest.getTraveler() != null) {
        lastName = deeplinkRequest.getTraveler().getLastName();
      }

      Response orderRetrievalResponse = dapiClient.getOrder(orderId, lang, lastName, null,
          true);
      orderRetrievalResponse.bufferEntity();
      OrderReply orderReply = restParser.parse(orderRetrievalResponse, OrderReply.class);
      if (null == orderReply || CollectionUtils.isNotEmpty(orderReply.getErrors())) {
        return DeeplinkResponseUtil.getErrorResponse(orderReply);
      }
      deeplinkServiceValidator.validateRequest(orderReply, deeplinkRequest);

      // check seat change eligibility
      SeatChangeEligibility seatChangeEligibility = getSeatChangeEligibility(orderReply);
      if (seatChangeEligibility != null && !seatChangeEligibility.getIsEligible()) {
        return DeeplinkResponseUtil.getNonEligibilityResponse(seatChangeEligibility);
      }

      UriComponentsBuilder uriComponentsBuilder = getUriComponentsBuilder(orderReply, lang, deeplinkRequest);
      return getDeepLinkResponse(uriComponentsBuilder);
    } catch (ConstraintViolationException constraintViolations) {
      log.error(CONSTRAINT_VIOLATION_MESSAGE, constraintViolations);
      return DeeplinkResponseUtil.getConstraintViolationsResponse(lang, rfdCannedMessageRepository,
          constraintViolations);
    } catch (RuntimeException ex) {
      log.error(ERROR_MESSAGE, ex);
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
          .entity(ErrorResponseUtils.buildInternalErrorMessage(rfdCannedMessageRepository))
          .build();
    }
  }

  private Response getDeepLinkResponse(UriComponentsBuilder uriComponentsBuilder) {
    DeeplinkReplyView deeplinkReplyView = new DeeplinkReplyView();
    DeeplinkDataView deeplinkDataView = new DeeplinkDataView();
    UrlView urlView = new UrlView();
    urlView.setHref(uriComponentsBuilder.encode().build().toUriString());
    deeplinkDataView.setDeeplinkRedirectionUrl(urlView);
    deeplinkReplyView.setData(deeplinkDataView);
    return Response.status(Response.Status.OK)
        .entity(deeplinkReplyView)
        .build();
  }

  private UriComponentsBuilder getUriComponentsBuilder(OrderReply orderReply, String lang,
      DeeplinkRequestView deeplinkRequest) {
    UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromHttpUrl(baseUrl + resourcePath);

    uriComponentsBuilder.queryParam("PNR_RECLOC", orderReply.getData().getId());
    uriComponentsBuilder.queryParam("BOARDING_DATE",
        getBoardingDate(orderReply, deeplinkRequest.getFlightInformation().getFlightNumber()));
    uriComponentsBuilder.queryParam("CARRIER_CODE", deeplinkRequest.getFlightInformation().getCarrierCode());
    uriComponentsBuilder.queryParam("COUNTRY_SITE", DEFAULT_COUNTRY_SITE);
    uriComponentsBuilder.queryParam("DEVICE_TYPE",
        DeeplinkUtil.mapDeviceCategory(deeplinkRequest.getDevice()));
    uriComponentsBuilder.queryParam("FIRST_NAME", deeplinkRequest.getTraveler().getFirstName());
    uriComponentsBuilder.queryParam("LAST_NAME", deeplinkRequest.getTraveler().getLastName());
    uriComponentsBuilder.queryParam("FLIGHT_NUMBER", deeplinkRequest.getFlightInformation().getFlightNumber());
    uriComponentsBuilder.queryParam(QUERY_PARAM_LANGUAGE_NAME, lang);
    uriComponentsBuilder.queryParam("RETURN_URL", deeplinkRequest.getCallbackUrl());
    // Check if JAL configuration is set
    if (jalConfig.getConfig() == null || jalConfig.getConfig().isEmpty()) {
      throw new RuntimeException("JAL configuration is not set");
    }
    // Add all the configuration parameters for JAL
    jalConfig.getConfig().entrySet().stream().forEach(entry -> {
      uriComponentsBuilder.queryParam(entry.getKey(), entry.getValue());
    });
    // In case of encryptParams is true, encrypt the query parameters
    if (encryptParams) {
      // Concatenate query parameters into a single string
      Map<String, String> queryParams = uriComponentsBuilder.build().getQueryParams().toSingleValueMap();
      String concatenatedParams = DeeplinkUtil.getConcatenatedParams(queryParams);
      // Encrypt the concatenated string
      String encryptedParams = wdkEncryptionService.encrypt(baseUrl, concatenatedParams, lang);
      // Rebuild the URL with the encrypted parameters
      UriComponentsBuilder encryptedUriComponentsBuilder = UriComponentsBuilder.fromHttpUrl(baseUrl + resourcePath);
      encryptedUriComponentsBuilder.queryParam(QUERY_PARAM_ENC_NAME, encryptedParams);
      encryptedUriComponentsBuilder.queryParam(QUERY_PARAM_ENCT_NAME, "2");
      encryptedUriComponentsBuilder.queryParam(QUERY_PARAM_LANGUAGE_NAME, lang);
      encryptedUriComponentsBuilder.queryParam(QUERY_PARAM_SITE_NAME, jalConfig.getConfig().get("SITE"));
      return encryptedUriComponentsBuilder;
    }

    return uriComponentsBuilder;
  }

  private String getBoardingDate(OrderReply orderReply, String marketingFlightNumber) {
    DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyyMMdd");
    return Optional.ofNullable(orderReply)
        .map(OrderReply::getDictionaries)
        .map(OrderDictionary::getFlight)
        .orElse(Collections.emptyMap())
        .entrySet()
        .stream()
        .map(Map.Entry::getValue)
        .filter(flight -> marketingFlightNumber.equals(flight.getMarketingFlightNumber()))
        .findFirst()
        .map(Flight::getDeparture)
        .map(flightEndPoint -> flightEndPoint.getDateTime().toString(formatter))
        .orElse(null);
  }

  private SeatChangeEligibility getSeatChangeEligibility(OrderReply orderReply) {
    return Optional.of(orderReply)
        .map(OrderReply::getData)
        .map(Order::getOrderEligibilities)
        .map(OrderEligibilities::getSeatChange)
        .orElse(Collections.emptyList())
        .stream()
        .findFirst()
        .orElse(null);
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\WdkEncryptionService.java

```
package com.amadeus.dapi.jalext.impl.deeplinks;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Scanner;

import javax.inject.Named;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;

import com.amadeus.dapi.jalext.impl.deeplinks.exception.EncryptionException;

@Named
public class WdkEncryptionService {

  private static final int TIMEOUT = 7000;

  @Value("${externalProvidersConfig.deeplink.jal.wdk.user:}")
  private String user;

  @Value("${externalProvidersConfig.deeplink.jal.wdk.password:}")
  private String password;

  @Value("${externalProvidersConfig.deeplink.jal.config.SITE:}")
  private String jalSite;

  /**
   * Encrypts the plain text using the JAL WDK encryption service
   * 
   * @param serverUrl
   * @param plainText
   * @param lang
   * @return
   */
  public String encrypt(String serverUrl, String plainText, String lang) {

    String encType = "2"; // actual encType value
    String cryptoInput = URLEncoder.encode(plainText, StandardCharsets.UTF_8);
    String urlString = serverUrl + "/JLInt/dyn/wdk/encrypt.jsonp?SITE=" + jalSite +
        "&LANGUAGE=" + lang + "&ENCT=" + encType + "&SERVICE_ID=1" + "&CRYPTO_INPUT=" + cryptoInput;

    HttpURLConnection connection = null;
    String encryptedParams;
    try {
      connection = createConnection(urlString);
      connection.setRequestMethod("GET");
      connection.setRequestProperty("Content-Type", "application/json");
      // Set Basic Authentication
      String auth = user + ":" + password;
      String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));
      connection.setRequestProperty("Authorization", "Basic " + encodedAuth);
      // set Timeout
      connection.setReadTimeout(TIMEOUT);
      connection.setConnectTimeout(TIMEOUT);

      int responseCode = connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_OK) {
        try (InputStream responseStream = connection.getInputStream();
            Scanner scanner = new Scanner(responseStream, StandardCharsets.UTF_8)) {
          String responseBody = scanner.useDelimiter("\\A").next();
          // Extract JSON from callback
          String jsonResponse = responseBody.substring(responseBody.indexOf('(') + 1, responseBody.lastIndexOf(')'));
          // Parse the response body as JSON
          JSONObject jsonObjectEncryption = new JSONObject(jsonResponse);
          // Extract the "ENC" value
          encryptedParams = jsonObjectEncryption.getString("ENC");
        }
      } else {
        throw new EncryptionException(responseCode + " - " + connection.getResponseMessage());
      }
    } catch (Exception e) {
      throw new EncryptionException("Failed to encrypt parameters : " + e);
    } finally {
      if (connection != null) {
        connection.disconnect();
      }
    }
    return encryptedParams;
  }

  public HttpURLConnection createConnection(String urlString) {
    try {
      URL url = new URL(urlString);
      return (HttpURLConnection)url.openConnection();
    } catch (Exception e) {
      throw new EncryptionException("Failed to create connection : " + e);
    }
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\notification\NotificationByOrderService.java

```
package com.amadeus.dapi.jalext.impl.notification;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;

import com.amadeus.jal.dapi.mapper.StandaloneNotificationRequestMapper;
import com.amadeus.jal.dapi.model.core.StandaloneNotificationRequestView;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.dapi.jalext.common.configuration.SiteParameters;
import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.email.service.EmailService;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

import java.util.regex.Pattern;

@Named
public class NotificationByOrderService {

    private static final Logger LOG = LoggerFactory.getLogger(NotificationByOrderService.class);

    private static final String LOG_ERROR_MESSAGE_NOTIFICATION = "Error occurred while sending confirmation email";

    private static final Pattern EMAIL_PATTERN = Pattern.compile("^[A-Za-z0-9\\._%25+\\-]+@[A-Za-z0-9\\.\\-]+\\.[A-Za-z]{2,}$");

    private EmailService emailService;

    private DapiClient dapiClient;

    private ACPRequestHandler acpRequestHandler;

    private RestJsonResponseParser restParser;

    private RfdCannedMessageRepository rfdCannedMessageRepository;

    private StandaloneNotificationRequestMapper standaloneNotificationRequestMapper;

    @Inject
    public NotificationByOrderService(DapiClient dapiClient, ACPRequestHandler acpRequestHandler,
            EmailService emailService, RestJsonResponseParser restParser,
            RfdCannedMessageRepository rfdCannedMessageRepository,
            StandaloneNotificationRequestMapper standaloneNotificationRequestMapper) {
        this.dapiClient = dapiClient;
        this.acpRequestHandler = acpRequestHandler;
        this.emailService = emailService;
        this.restParser = restParser;
        this.rfdCannedMessageRepository = rfdCannedMessageRepository;
        this.standaloneNotificationRequestMapper = standaloneNotificationRequestMapper;
    }

    /**
     * Send the confirmation email if the ACP parameter SEND_CONFIRMATION_EMAIL is set to true
     * else call the DAPI endpoint
     *
     * @param standaloneNotificationRequestView
     * @param assetsUri the assetsUri used to display the images in the confirmation email
     *
     * @return The notification response
     */
    public Response handleRequest(StandaloneNotificationRequestView standaloneNotificationRequestView, String assetsUri) {
        try {
            if (acpRequestHandler.getBooleanValue(SiteParameters.SEND_CONFIRMATION_EMAIL, false)) {
                if (StringUtils.isBlank(standaloneNotificationRequestView.getLastName())) {
                    return Response.status(Response.Status.BAD_REQUEST)
                            .entity(ErrorResponseUtils.buildErrorMessage(rfdCannedMessageRepository,
                                    ErrorResponseUtils.LAST_NAME_SHOULD_BE_PROVIDED_CODE,
                                    ErrorResponseUtils.LAST_NAME_SHOULD_BE_PROVIDED_TITLE, null))
                            .build();
                } else if (StringUtils.isBlank(standaloneNotificationRequestView.getMarket())) {
                    return Response.status(Response.Status.BAD_REQUEST)
                            .entity(ErrorResponseUtils.buildErrorMessage(rfdCannedMessageRepository,
                                    ErrorResponseUtils.MARKET_SHOULD_BE_PROVIDED_CODE,
                                    ErrorResponseUtils.MARKET_SHOULD_BE_PROVIDED_TITLE, null))
                            .build();
                } else if (CollectionUtils.isEmpty(standaloneNotificationRequestView.getEmailAddresses()) ||
                        StringUtils.isBlank(standaloneNotificationRequestView.getEmailAddresses().get(0))) {
                    return Response.status(Response.Status.BAD_REQUEST)
                            .entity(ErrorResponseUtils.buildErrorMessage(rfdCannedMessageRepository,
                                    ErrorResponseUtils.EMAIL_ADDRESS_SHOULD_BE_PROVIDED_CODE,
                                    ErrorResponseUtils.EMAIL_ADDRESS_SHOULD_BE_PROVIDED_TITLE, null))
                            .build();
                } else if (!EMAIL_PATTERN.matcher(standaloneNotificationRequestView.getEmailAddresses().get(0)).matches()) {
                    return Response.status(Response.Status.BAD_REQUEST)
                            .entity(ErrorResponseUtils.buildErrorMessage(rfdCannedMessageRepository,
                                    ErrorResponseUtils.INVALID_EMAIL_ADDRESS_PROVIDED_CODE,
                                    ErrorResponseUtils.INVALID_EMAIL_ADDRESS_PROVIDED_TITLE, null))
                            .build();
                } else {
                    Response orderRetrievalResponse =
                            dapiClient.getOrder(
                                    standaloneNotificationRequestView.getOrderId(),
                                    standaloneNotificationRequestView.getLang(),
                                    standaloneNotificationRequestView.getLastName(),
                                    null,
                                    true
                            );
                    OrderReply orderReply = restParser.parse(orderRetrievalResponse, OrderReply.class);
                    if (CollectionUtils.isNotEmpty(orderReply.getErrors())) {
                        return Response.status(orderRetrievalResponse.getStatus()).entity(orderReply).build();
                    }
                    Response emailResponse = emailService.sendConfirmationEmail(
                            orderReply,
                            standaloneNotificationRequestView.getLang(),
                            standaloneNotificationRequestView.getEmailAddresses().get(0),
                            standaloneNotificationRequestView.getErrorCodes(),
                            standaloneNotificationRequestView.getWarningCodes(),
                            standaloneNotificationRequestView.getConfirmedBoundIds(),
                            assetsUri,
                            standaloneNotificationRequestView.getMarket()
                    );

                    if (emailResponse != null && emailResponse.getStatus() == Response.Status.INTERNAL_SERVER_ERROR.getStatusCode()) {
                        return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                                .entity(ErrorResponseUtils.buildErrorMessage(rfdCannedMessageRepository,
                                        ErrorResponseUtils.CONFIRMATION_EMAIL_COULD_NOT_BE_SENT_CODE,
                                        ErrorResponseUtils.CONFIRMATION_EMAIL_COULD_NOT_BE_SENT_TITLE, null))
                                .build();
                    } else {
                        return Response.status(Response.Status.NO_CONTENT).build();
                    }
                }
            } else {
                return dapiClient.notificationByOrder(
                        this.standaloneNotificationRequestMapper.create(standaloneNotificationRequestView)
                );
            }
        } catch (RuntimeException ex) {
            LOG.error(LOG_ERROR_MESSAGE_NOTIFICATION, ex);
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                    .entity(ErrorResponseUtils.buildInternalErrorMessage(rfdCannedMessageRepository))
                    .build();
        }
    }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\exception\RetrieveOrderException.java

```
package com.amadeus.dapi.jalext.impl.order.exception;

/**
 * Customized exception to handle exceptions related to retrieve order
 * 
 * @author smallick
 */
public class RetrieveOrderException extends Exception {

  private static final long serialVersionUID = 1L;

  /**
   * constructor
   * 
   * @param exception
   *          exception
   */
  public RetrieveOrderException(Exception exception) {
    super(exception);
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\mapper\OrderRetrievalResponseMapper.java

```
package com.amadeus.dapi.jalext.impl.order.mapper;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.inject.Named;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.collections4.CollectionUtils;

import com.amadeus.dapi.jalext.impl.order.model.CheckInWrapper;
import com.amadeus.jal.dapi.model.base.CheckInMethodViewPrivate.MethodEnum;
import com.amadeus.jal.dapi.model.core.CheckInEligibilityView;
import com.amadeus.jal.dapi.model.core.CheckInMethodView;
import com.amadeus.jal.dapi.model.core.CheckInReasonView;
import com.amadeus.jal.dapi.model.core.OrderEligibilitiesView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.jal.dapi.model.core.TravelerView;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS.Success.CheckIn;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS.Success.CheckIn.Description;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS.Success.CheckIn.IDs;

/**
 * Class responsible for mapping the success and failure flow. The mapping involves filtering only AIR segments from the
 * AMA_TTR_GetQuiC_CheckInMethod response and grouping the segments and travelers that are sharing the same check-in
 * method to a single entity
 * 
 * @author smallick
 */
@Named
public class OrderRetrievalResponseMapper {

  private static final String DELIMITER = "+";

  private static final String LANGUAGE_EN = "EN";

  private static final String SEGMENT_NM = "NM";

  private static final String SEGMENT_AIR = "AIR";

  /**
   * This method adds checkin method to the orderReply
   * 
   * @return Response
   */
  public Response buildResponseWithCheckIn(AMA_TTR_GetQuiC_CheckInMethodRS response, OrderReplyView reply) {
    AMA_TTR_GetQuiC_CheckInMethodRS.Success success = response.getSuccess();
    List<CheckIn> checkinMethods = success.getCheckIn();
    Map<String, CheckInWrapper> reducedMap = new HashMap<>();
    // Filter all the checkin methods which has Air segment and reduce it to map
    CollectionUtils.emptyIfNull(checkinMethods)
        .stream()
        .filter(checkinMethod -> checkinMethod.getIDs()
            .stream()
            .map(IDs::getSegmentType)
            .anyMatch(segmentType -> segmentType.equals(SEGMENT_AIR)))
        .filter(checkinMethod -> filterCheckinMethodForGroupOrder(checkinMethod, reply))
        .forEach(checkIn -> getReducedMap(checkIn, reducedMap));
    if(!reducedMap.isEmpty()) {
      // Convert CheckinWrapper to CheckInEligibility
      List<CheckInEligibilityView> eligibilites = CollectionUtils.emptyIfNull(reducedMap.values()
          .stream()
          .collect(Collectors.toMap(OrderRetrievalResponseMapper::getKey, Function.identity(),
              OrderRetrievalResponseMapper::mergeCheckinMethods))
          .values()).stream().map(this::getCheckinFromWrapper).collect(Collectors.toList());
      // check if the orderreply has getOrderEligibilities else create one and
      // set the checkin eligibilites
      if(reply.getData().getOrderEligibilities()!=null) {
        reply.getData().getOrderEligibilities().setCheckIn(eligibilites);
      } else {
        reply.getData()
            .setOrderEligibilities(new OrderEligibilitiesView().checkIn(eligibilites));
      }
    }
    return Response.status(Status.OK)
        .entity(reply)
        .build();
  }

  /**
   * Filter the checkin method based on travelerId retrieved from a group order
   * 
   * @param checkinMethod
   * @param orderReply
   * @return
   */
  private static boolean filterCheckinMethodForGroupOrder(CheckIn checkinMethod, OrderReplyView reply) {
    if (Boolean.TRUE.equals(reply.getData().isIsGroupBooking())) {
      List<String> travelerIds = CollectionUtils.emptyIfNull(reply.getData().getTravelers())
          .stream()
          .map(TravelerView::getId)
          .collect(Collectors.toList());
      return CollectionUtils.emptyIfNull(checkinMethod.getIDs())
          .stream()
          .filter(Objects::nonNull)
          .filter(id -> SEGMENT_NM.equals(id.getSegmentType()))
          .anyMatch(id -> travelerIds.contains(getTattoo(id)));
    }
    return true;
  }

  /**
   * Get combination of check-in method, reason code and flight ids as key
   * 
   * @param wrapper
   * @return
   */
  private static String getKey(CheckInWrapper wrapper) {
    CheckInMethodView checkinMethod = wrapper.getCheckInMethod().get(0);
    return checkinMethod.getMethod().toString() + DELIMITER + getReasonKeyFromWrapper(checkinMethod.getReasons())
        + DELIMITER + getListFromSet(wrapper.getFlightIds()).stream().collect(Collectors.joining(DELIMITER));
  }

  private static String getReasonKeyFromWrapper(List<CheckInReasonView> reasons) {
    return CollectionUtils.emptyIfNull(reasons)
        .stream()
        .filter(Objects::nonNull)
        .map(OrderRetrievalResponseMapper::getReasonCode)
        .sorted()
        .collect(Collectors.joining(DELIMITER));
  }

  private static String getReasonCode(CheckInReasonView reason) {
    return Long.toString(reason.getCode());
  }

  /**
   * Method to merge the checkInWrapper with same check-in method and same list of flight ids
   * 
   * @param existingWrapper
   * @param wrapper
   * @return
   */
  private static CheckInWrapper mergeCheckinMethods(CheckInWrapper existingWrapper, CheckInWrapper wrapper) {
    if (existingWrapper.getFlightIds().containsAll(wrapper.getFlightIds())) {
      existingWrapper.addTravelerId(getListFromSet(wrapper.getTravelerIds()));
    }
    return existingWrapper;
  }

  /**
   * Method to get the formatted tattoo id
   * 
   * @param id
   * @return
   */
  private static String getTattoo(IDs id) {
    return id.getLegacyType() + id.getTattoo();
  }

  /**
   * Method to transform CheckInWrapper to CheckInEligibility
   * 
   * @param wrapper
   * @return
   */
  private CheckInEligibilityView getCheckinFromWrapper(CheckInWrapper wrapper) {
    return new CheckInEligibilityView().flightIds(getListFromSet(wrapper.getFlightIds()))
        .travelerIds(getListFromSet(wrapper.getTravelerIds()))
        .checkInMethods(wrapper.getCheckInMethod());
  }

  /**
   * Method to convert set to list
   * 
   * @param ids
   * @return
   */
  public static List<String> getListFromSet(Set<String> ids) {
    return CollectionUtils.emptyIfNull(ids).stream().sorted().collect(Collectors.toList());
  }

  /**
   * Method to reduce list to map
   * 
   * @param checkinFiltered
   * @return
   */
  private void getReducedMap(CheckIn checkIn, Map<String, CheckInWrapper> reducedMap) {
    String key = getKey(checkIn);
    if (reducedMap.containsKey(key)) {
      update(reducedMap.get(key), checkIn);
    } else {
      reducedMap.put(key, create(checkIn));
    }
  }

  /**
   * Method to create CheckInWrapper from CheckIn
   * 
   * @param checkIn
   * @return
   */
  private CheckInWrapper create(CheckIn checkIn) {
    CheckInWrapper wrapper = new CheckInWrapper();
    wrapper.addTravelerId(getTravelerIds(checkIn));
    wrapper.addFlightId(getFlightIds(checkIn));
    wrapper.setCheckInMethod(getCheckinMethods(checkIn));
    return wrapper;
  }

  /**
   * Method to update CheckInWrapper with the flightids and travelerIds from CheckIn
   * 
   * @param checkInWrapper
   * @param checkIn
   */
  private static void update(CheckInWrapper checkInWrapper, CheckIn checkIn) {
    checkInWrapper.addTravelerId(getTravelerIds(checkIn));
    checkInWrapper.addFlightId(getFlightIds(checkIn));
  }

  /**
   * Method to create key for map
   * 
   * @param checkIn
   * @return
   */
  public String getKey(CheckIn checkIn) {
    return checkIn.getMethod().get(0) + DELIMITER + getReasonKey(checkIn.getDescription()) + DELIMITER
        + getTravelerIds(checkIn).get(0);
  }

  /**
   * Method to combine all the description code to a single string
   * 
   * @param descriptions
   * @return
   */
  private static String getReasonKey(List<Description> descriptions) {
    return CollectionUtils.emptyIfNull(descriptions)
        .stream()
        .filter(Objects::nonNull)
        .filter(description -> description.getLanguage().equals(LANGUAGE_EN))
        .map(Description::getCode)
        .sorted()
        .collect(Collectors.joining(DELIMITER));
  }

  /**
   * Get list of CheckInMethod from Checkin
   * 
   * @param checkIn
   * @return
   */
  private List<CheckInMethodView> getCheckinMethods(CheckIn checkIn) {
    CheckInMethodView checkInMethod = new CheckInMethodView();
    checkInMethod.setMethod(fromValue(checkIn.getMethod()
        .get(0)));
    List<CheckInReasonView> reasons = getReasons(checkIn.getDescription());
    if (CollectionUtils.isNotEmpty(reasons)) {
      checkInMethod.setReasons(reasons);
    }
    return Arrays.asList(checkInMethod);
  }

  /**
   * Get MethodEnum for matching text value(Non case sensitive)
   * 
   * @param text
   * @return
   */
  public static MethodEnum fromValue(String text) {
    for (MethodEnum b : MethodEnum.values()) {
      if (String.valueOf(b.getValue())
          .equalsIgnoreCase(text)) {
        return b;
      }
    }
    return null;
  }

  /**
   * Get list of CheckInReason from list of Description
   * 
   * @param descriptions
   * @return
   */
  private List<CheckInReasonView> getReasons(List<Description> descriptions) {
    return CollectionUtils.emptyIfNull(descriptions)
        .stream()
        .filter(Objects::nonNull)
        .filter(description -> description.getLanguage().equals(LANGUAGE_EN))
        .map(this::buildReason)
        .collect(Collectors.toList());
  }

  /**
   * Extract list of travelerIds from CheckIn
   * 
   * @param checkIn
   * @return
   */
  private static List<String> getFlightIds(CheckIn checkIn) {
    return CollectionUtils.emptyIfNull(checkIn.getIDs())
        .stream()
        .filter(Objects::nonNull)
        .filter(id -> SEGMENT_AIR.equals(id.getSegmentType()))
        .map(OrderRetrievalResponseMapper::getTattoo)
        .collect(Collectors.toList());
  }

  /**
   * Extract list of flightIds from CheckIn
   * 
   * @param checkIn
   * @return
   */
  private static List<String> getTravelerIds(CheckIn checkIn) {
    return CollectionUtils.emptyIfNull(checkIn.getIDs())
        .stream()
        .filter(Objects::nonNull)
        .filter(id -> SEGMENT_NM.equals(id.getSegmentType()))
        .map(OrderRetrievalResponseMapper::getTattoo)
        .collect(Collectors.toList());
  }

  /**
   * Build CheckInReason from description
   * 
   * @param description
   * @return
   */
  private CheckInReasonView buildReason(Description description) {
    CheckInReasonView reason = new CheckInReasonView();
    reason.setCode(Long.valueOf(description.getCode()));
    reason.setDescription(description.getValue());
    return reason;
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\model\CheckInWrapper.java

```
package com.amadeus.dapi.jalext.impl.order.model;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import com.amadeus.jal.dapi.model.core.CheckInMethodView;

/**
 * Wrapper class for segment in checkIn
 * 
 * @author smallick
 */
public class CheckInWrapper {

  private Set<String> travelerIds;

  private Set<String> flightIds;

  private List<CheckInMethodView> checkInMethod;

  public Set<String> getTravelerIds() {
    return travelerIds.stream()
        .collect(Collectors.toSet());
  }

  public Set<String> getFlightIds() {
    return flightIds.stream()
        .collect(Collectors.toSet());
  }

  public List<CheckInMethodView> getCheckInMethod() {
    return checkInMethod.stream()
        .collect(Collectors.toList());
  }

  public void setCheckInMethod(List<CheckInMethodView> checkInMethod) {
    this.checkInMethod = checkInMethod.stream()
        .collect(Collectors.toList());
  }

  public void addFlightId(List<String> flightIds) {
    if (this.flightIds == null) {
      this.flightIds = new HashSet<>();
    }
    this.flightIds.addAll(flightIds);
  }

  public void addTravelerId(List<String> travelerIds) {
    if (this.travelerIds == null) {
      this.travelerIds = new HashSet<>();
    }
    this.travelerIds.addAll(travelerIds);
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\OrderRetrievalService.java

```
package com.amadeus.dapi.jalext.impl.order;

import java.math.BigDecimal;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.impl.order.mapper.OrderRetrievalResponseMapper;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.digital.api.lib.client.connection.api.RestClientCallException;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.mapper.OrderReplyMapper;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.middleware.connector.client.DcxOptions;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRQ;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;

/**
 * Handles request for order retrival and adds checkin methods into response
 */
@Named
public class OrderRetrievalService {

  private static final String ERROR_DEMILATOR = ",";

  private static final String COLON = ":";

  private static final String LANGUAGE_EN = "EN";

  private static final double CHECKIN_METHOD_VERSION = 1.0;

  private static final Logger LOG = LoggerFactory.getLogger(OrderRetrievalService.class);

  @Value("${dapi.collateral.xml.sap.main:}")
  private String xmlSap;
  
  private DapiClient dapiClient;

  private XmlWebservicesClient webservicesClient;

  private ClientConversationHandlerFactory clientConversationHandlerFactory;
  
  private OrderRetrievalResponseMapper retrievalResponseMapper;

  private RestJsonResponseParser restParser;

  private OrderReplyMapper orderReplyMapper;

  private RfdCannedMessageRepository rfdCannedMessageRepository;

  private static final String ERROR_MESSAGE = "Error occured while retriving order";

  @Inject
  public OrderRetrievalService(DapiClient dapiClient, XmlWebservicesClient webservicesClient,
		  ClientConversationHandlerFactory clientConversationHandlerFactory,
		  OrderRetrievalResponseMapper retrievalResponseMapper, RestJsonResponseParser restParser,
		  OrderReplyMapper orderReplyMapper, RfdCannedMessageRepository rfdCannedMessageRepository) {
	  this.dapiClient = dapiClient;
	  this.webservicesClient = webservicesClient;
	  this.retrievalResponseMapper = retrievalResponseMapper;
	  this.restParser = restParser;
	  this.orderReplyMapper = orderReplyMapper;
	  this.rfdCannedMessageRepository = rfdCannedMessageRepository;
	  this.clientConversationHandlerFactory = clientConversationHandlerFactory;
  }

  /**
   * Call DAPI createOrder, and then update output with on hold eligibility
   *
   * @param orderId
   * @return the response
   */
  public Response handleRequest(String orderId, String languageCode, String lastName, String firstName,
		  Boolean showOrderEligibilities) {
	  Response orderRetrievalResponse = null;
	  ClientConversationHandler clientConversationHandler = null;
	  try {
	  	// Call DAPI order retrieval
		  orderRetrievalResponse = dapiClient.getOrder(orderId, languageCode, lastName, firstName,
				  showOrderEligibilities);
		  orderRetrievalResponse.bufferEntity();
		  OrderReply reply = restParser.parse(orderRetrievalResponse, OrderReply.class);
		  if (null != reply && reply.getErrors() == null && Boolean.TRUE.equals(showOrderEligibilities)) {
			  // Call TTR_GetQuiC_CheckInMethod
			  clientConversationHandler = clientConversationHandlerFactory.newConversation(xmlSap,
					  DcxOptions.incomingDcxBuilder().build());
			  AMA_TTR_GetQuiC_CheckInMethodRS response = webservicesClient.checkinMethod(buildRequest(orderId), clientConversationHandler);
			  if (null != response && null != response.getSuccess()) {
				  OrderReplyView replyView = orderReplyMapper.create(reply);
				  orderRetrievalResponse = retrievalResponseMapper.buildResponseWithCheckIn(response, replyView);
			  } else if (null != response) {
				  LOG.warn("Unable to get checkin method for order id {}, error {}", orderId, getfailureMessage(response));
			  }
		  }
		  return orderRetrievalResponse;
	  } catch (RestClientCallException ex) {
		  LOG.error(ERROR_MESSAGE, ex);
		  return orderRetrievalResponse;
	  } catch (RuntimeException ex) {
		  LOG.error(ERROR_MESSAGE, ex);
		  return ErrorResponseUtils.buildInternalErrorResponse(rfdCannedMessageRepository);
	  } finally {
		  if (clientConversationHandler != null) {
			  try {
				  clientConversationHandler.close();
			  } catch (Exception e) { // IGNORE
			  }
		  }
	  }
  }

  /**
   * Method to create log string from faulty response
   * 
   * @param response
   * @return
   */
  private String getfailureMessage(AMA_TTR_GetQuiC_CheckInMethodRS response) {
    return response.getFailure()
        .getError()
        .stream()
        .filter(error -> error.getLanguage()
            .equals(LANGUAGE_EN))
        .map(error -> error.getCode() + COLON + error.getShortText())
        .collect(Collectors.joining(ERROR_DEMILATOR));
  }

  /**
   * Method to create AMA_TTR_GetQuiC_CheckInMethodRQ request
   * 
   * @param orderId
   * @return
   */
  private AMA_TTR_GetQuiC_CheckInMethodRQ buildRequest(String orderId) {
    return new AMA_TTR_GetQuiC_CheckInMethodRQ().withBookingIdentifier(orderId)
        .withVersion(BigDecimal.valueOf(CHECKIN_METHOD_VERSION));
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\refund\mapper\CancelAndRefundMappers.java

```
package com.amadeus.dapi.jalext.impl.refund.mapper;

import java.util.Optional;

import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.Valid;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundRequest;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Remark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Source;
import com.amadeus.jal.dapi.mapper.OrderCancelAndRefundReplyMapper;
import com.amadeus.jal.dapi.mapper.OrderCancelAndRefundRequestMapper;
import com.amadeus.jal.dapi.mapper.RemarkMapper;
import com.amadeus.jal.dapi.mapper.SourceMapper;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundReplyView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundRequestView;
import com.amadeus.jal.dapi.model.core.RemarkView;
import com.amadeus.jal.dapi.model.core.SourceView;

/**
 * This classes exposes mapper function to use for converting between JAL types and DAPI types
 */
@Named
public class CancelAndRefundMappers {

  private OrderCancelAndRefundRequestMapper orderCancelAndRefundRequestMapper;
  
  private OrderCancelAndRefundReplyMapper orderCancelAndRefundReplyMapper;
  
  private RemarkMapper remarkMapper;
  
  private SourceMapper sourceMapper;

  @Inject
  public CancelAndRefundMappers(OrderCancelAndRefundRequestMapper orderCancelAndRefundRequestMapper,
      OrderCancelAndRefundReplyMapper orderCancelAndRefundReplyMapper, RemarkMapper remarkMapper,
      SourceMapper sourceMapper) {
    this.orderCancelAndRefundRequestMapper = orderCancelAndRefundRequestMapper;
    this.orderCancelAndRefundReplyMapper = orderCancelAndRefundReplyMapper;
    this.remarkMapper = remarkMapper;
    this.sourceMapper = sourceMapper;
  }
  
  /**
   * Maps a jal request to a DAPI request
   * 
   * @param jalRequest
   *          JAL request
   * @return DAPI request
   */
  public OrderCancelAndRefundRequest mapRequest(OrderCancelAndRefundRequestView jalRequest) {
    return orderCancelAndRefundRequestMapper.create(jalRequest);
  }

  /**
   * Maps a DAPI reply to a JAL reply
   * 
   * @param dapiReply
   *          DAPI reply
   * @return JAL reply
   */
  public OrderCancelAndRefundReplyView mapReply(@Valid OrderCancelAndRefundReply dapiReply) {
    return orderCancelAndRefundReplyMapper.create(dapiReply);
  }
  
  /**
   * Maps a JAL remark to a DAPI remark
   * 
   * @param jalRemark
   *          JAL remark
   * @return DAPI remark
   */
  public Remark mapRemark(RemarkView jalRemark) {
    return remarkMapper.create(jalRemark);
  }
  
  /**
   * Maps a DAPI remark to a JAL remark
   * 
   * @param dapiRemark
   *          DAPI remark
   * @return JAL remark
   */
  public RemarkView mapRemark(@Valid Remark dapiRemark) {
    return remarkMapper.create(dapiRemark);
  }
  
  /**
   * Maps a DAPI error or warning source to a JAL error or warning source
   * 
   * @param DAPI
   *          source
   * @return JAL source
   */
  public SourceView mapSource(Source source) {
    return Optional.ofNullable(source)
        .map(sourceMapper::create)
        .orElse(null);
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\refund\util\CancelAndRefundUtil.java

```
package com.amadeus.dapi.jalext.impl.refund.util;

import org.apache.commons.lang3.StringUtils;

import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.RemarksListReply;

public final class CancelAndRefundUtil {

  public static ErrorMessage getError(RemarksListReply remarksReply, String errorCode) {
    return remarksReply
        .getErrors()
        .stream()
        .filter(errorMessage -> StringUtils.isNotEmpty(errorCode) && errorCode.equals(errorMessage.getCode()))
        .findAny()
        .orElse(null);
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\refund\CancelAndRefundService.java

```
package com.amadeus.dapi.jalext.impl.refund;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import com.amadeus.dapi.jalext.email.service.EmailService;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundEligibility;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderEligibilitiesReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.dapi.jalext.common.configuration.SiteParameters;
import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.impl.refund.mapper.CancelAndRefundMappers;
import com.amadeus.dapi.jalext.impl.refund.util.CancelAndRefundUtil;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundRequest;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Remark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.RemarksListReply;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundReplyView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundRequestView;
import com.amadeus.jal.dapi.model.core.RemarkView;
import com.amadeus.jal.dapi.model.core.WarningMessageView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

import static com.amadeus.dapi.jalext.impl.request.RequestService.TEMPORARY_ASSETS_URI;

/**
 * This class performs a cancel and refund request, then add the provided remarks to the order upon success
 */
@Named
public class CancelAndRefundService {
  
  private static final String UNKNOWN_ERROR = "Unknown error";

  public static final String ADD_REMARK_ERROR_TITLE = "UNABLE TO CREATE SOME REMARK(S)";

  public static final String ADD_REMARK_ERROR_CODE = "40624";

  private static final Logger LOG = LoggerFactory.getLogger(CancelAndRefundService.class);
  
  private static final String LOG_ERROR_MESSAGE_REFUND = "Error occurred during cancel and refund";
  
  private static final String LOG_ERROR_MESSAGE_REMARKS = "Error occurred when adding remarks";

  public static final String SITE_ALLOW_REMARK_IN_REQUEST = "SITE_ALLOW_REMARK_IN_REQUEST";
  
  public static final int EOT_MAX_RETRY = 2;
  
  public static final String EOT_ERROR = "37808";

  public static final String CANCEL_REFUND_ACTION = "cancelAndRefund";

  private DapiClient dapiClient;

  private RestJsonResponseParser restParser;

  private RfdCannedMessageRepository rfdCannedMessageRepository;

  private CancelAndRefundMappers cancelAndRefundMappers;
  
  private ACPRequestHandler acpRequestHandler;

  private EmailService emailService;
  
  @Inject
  public CancelAndRefundService(DapiClient dapiClient, RestJsonResponseParser restParser,
      RfdCannedMessageRepository rfdCannedMessageRepository, CancelAndRefundMappers cancelAndRefundMappers,
      ACPRequestHandler acpRequestHandler, EmailService emailService) {
    this.dapiClient = dapiClient;
    this.restParser = restParser;
    this.rfdCannedMessageRepository = rfdCannedMessageRepository;
    this.cancelAndRefundMappers = cancelAndRefundMappers;
    this.acpRequestHandler = acpRequestHandler;
    this.emailService = emailService;
  }
  
  /**
   * Performs cancel and refund, then add the specified remarks to the order on success
   * 
   * @param orderId
   * @param lastName
   * @param lang
   * @param request JAL cancel and refund request
   * @param assetsUri the assetsUri used to display the images in the confirmation email
   *
   * @return The cancel and refund response with the new remarks
   */
  public Response handleRequest(String orderId, String lastName, String lang, String confirmationEmailAddress,
      OrderCancelAndRefundRequestView request, String assetsUri) {

    if(request==null) {
      request = new OrderCancelAndRefundRequestView();
    }
    Response response = null;

    try {
      if (remarksPresentAndRemarksNotAllowed(request)) {
        response = abortRefundRemarkNotAllowed();
      } else {
        Response orderRetrievalResponse = null;
        Response orderEligibilitiesResponse = null;
        if (acpRequestHandler.getBooleanValue(SiteParameters.SEND_CONFIRMATION_EMAIL, false)) {
          orderRetrievalResponse = dapiClient.getOrder(
                  orderId, lang, lastName, null, true);
          orderEligibilitiesResponse = dapiClient.orderEligibilities(orderId, List.of(CANCEL_REFUND_ACTION), lastName, lang);
        }
        JalCancelAndRefundReplyAndStatus replyAndStatus = cancelAndRefund(orderId, lastName, lang, request);
        OrderCancelAndRefundReplyView reply = replyAndStatus.getReply();
        if (reply != null) {
          if (CollectionUtils.isNotEmpty(request.getRemarks())) {
            String createdOrderId = getCreatedOrderId(reply);
            if (StringUtils.isNotBlank(createdOrderId)) {
              addRemarksToOrder(request, reply, createdOrderId, lang, lastName);
            } else {
              addRemarksToOrder(request, reply, orderId, lang, lastName);
            }
          }
          if (CollectionUtils.isEmpty(reply.getErrors())
              && acpRequestHandler.getBooleanValue(SiteParameters.SEND_CONFIRMATION_EMAIL, false) && orderRetrievalResponse != null) {
            orderRetrievalResponse.bufferEntity();
            orderEligibilitiesResponse.bufferEntity();
            OrderReply orderReply = restParser.parse(orderRetrievalResponse, OrderReply.class);

            Boolean isManuallyRefundable = false;

            if (orderEligibilitiesResponse != null) {
              OrderEligibilitiesReply eligibilitiesReply = restParser.parse(orderEligibilitiesResponse, OrderEligibilitiesReply.class);

              if (eligibilitiesReply != null && eligibilitiesReply.getData() != null && eligibilitiesReply.getData().getCancelAndRefund() != null) {
                isManuallyRefundable = OrderCancelAndRefundEligibility.RefundStatusEnum.MANUALLYREFUNDABLE.equals(eligibilitiesReply.getData().getCancelAndRefund().getRefundStatus());
              }
            }
            /* Using the temporary assets Uri which is the PRD one to avoid having missing images, will be removed during next JLP load */
            if (StringUtils.isBlank(assetsUri)) {
              assetsUri = TEMPORARY_ASSETS_URI;
            }

            // TODO remove the query param confirmation email address once the UI is not sending it anymore
            String emailAddress;
            if (StringUtils.isNotBlank(request.getConfirmationEmailAddress())) {
              emailAddress = request.getConfirmationEmailAddress();
            } else {
              emailAddress = confirmationEmailAddress;
            }
            Response emailResponse = emailService.sendRefundEmail(orderReply, reply, lang, emailAddress, isManuallyRefundable, assetsUri, request.getMarket());
            // Adding the email error to the reply if something went wrong during the email process
            if (emailResponse != null && emailResponse.getStatus() == Response.Status.INTERNAL_SERVER_ERROR.getStatusCode()) {
              ErrorMessageView emailError = (ErrorMessageView) emailResponse.getEntity();
              if (emailError != null && CollectionUtils.isEmpty(reply.getErrors())) {
                reply.setErrors(new ArrayList<>(List.of(emailError)));
              } else {
                reply.addErrorsItem(emailError);
              }
            }
          }
          
          response = Response.status(replyAndStatus.getStatus())
              .entity(reply)
              .build();
        }
      }
    } catch (RuntimeException ex) {
      LOG.error(LOG_ERROR_MESSAGE_REFUND, ex);
    }
    if (response == null) {
      response = ErrorResponseUtils.buildInternalErrorResponse(rfdCannedMessageRepository);
    }
    return response;
  }

  private static String getCreatedOrderId(OrderCancelAndRefundReplyView reply) {
    if (reply == null || reply.getData() == null) {
      return StringUtils.EMPTY;
    }
    return reply.getData().getCreatedOrderId();
  }

  /**
   * Returns whether remarks are present in the request but are not allowed
   * 
   * @param request
   *          The JAL cancel and refund request
   * @return True when remarks are present in the request but are not allowed
   */
  private boolean remarksPresentAndRemarksNotAllowed(OrderCancelAndRefundRequestView request) {
    return !CollectionUtils.isEmpty(request.getRemarks())
        && !acpRequestHandler.getBooleanValue(SITE_ALLOW_REMARK_IN_REQUEST, true);
  }
  
  /**
   * Aborts the refund flow when remarks are present in the request but are not allowed
   * 
   * @return The error response
   */
  private Response abortRefundRemarkNotAllowed() {
    return Response.status(Status.OK)
        .entity(ErrorResponseUtils.buildErrorMessage(rfdCannedMessageRepository,
            ErrorResponseUtils.REMARK_NOT_ALLOWED_CODE,
            ErrorResponseUtils.REMARK_NOT_ALLOWED_TITLE, null))
        .build();
  }

  /**
   * Performs the cancel and refund request
   * 
   * @param orderId
   * @param lastName
   * @param lang
   * @param cancelAndRefundRequest
   * @return The cancel and refund reply and the response status
   */
  private JalCancelAndRefundReplyAndStatus cancelAndRefund(String orderId, String lastName, String lang,
      OrderCancelAndRefundRequestView cancelAndRefundRequest) {
     
    OrderCancelAndRefundRequest dapiRequest = Optional.ofNullable(cancelAndRefundRequest)
        .map(cancelAndRefundMappers::mapRequest)
        .orElse(null);

    Response dapiResponse = dapiClient.cancelAndRefundOrder(orderId, lastName, lang, dapiRequest);

    OrderCancelAndRefundReply dapiReply = restParser.parse(dapiResponse, OrderCancelAndRefundReply.class);
    OrderCancelAndRefundReplyView jalReply = cancelAndRefundMappers.mapReply(dapiReply);

    return new JalCancelAndRefundReplyAndStatus(jalReply, dapiResponse.getStatus());
  }

  /**
   * Add remarks to the order if refund response is successful and there are remarks in the request
   * 
   * @param request Cancel and refund request
   * @param reply Cancel and refund reply 
   * @param orderId
   * @param lang
   * @param lastName
   */
  private void addRemarksToOrder(OrderCancelAndRefundRequestView request, OrderCancelAndRefundReplyView reply,
      String orderId, String lang, String lastName) {
    if (CollectionUtils.isEmpty(reply.getErrors())) {
      List<RemarkView> remarks = request.getRemarks();
      if (!CollectionUtils.isEmpty(remarks)) {
        List<Remark> dapiRemarks = remarks.stream()
            .map(cancelAndRefundMappers::mapRemark)
            .collect(Collectors.toList());
        addRemarksToOrder(orderId, dapiRemarks, lang, lastName, reply, 0);
      }
    }
  }
  
  /**
   * Performs the add remarks request
   * 
   * @param orderId
   * @param dapiRemarks
   * @param lang
   * @param lastName
   * @param cancelAndRefundReply
   */
  private void addRemarksToOrder(String orderId, List<Remark> dapiRemarks, String lang, String lastName,
      OrderCancelAndRefundReplyView cancelAndRefundReply, int retryCount) {
    try {
      Response remarksResponse = dapiClient.addRemarksToOrder(orderId, dapiRemarks, lang, lastName);
      RemarksListReply remarksReply = restParser.parse(remarksResponse, RemarksListReply.class);
      if (remarksReply != null && CollectionUtils.isEmpty(remarksReply.getErrors())) {
        addRemarksToReply(cancelAndRefundReply, remarksReply);

      } else if (retryCount < EOT_MAX_RETRY && CancelAndRefundUtil.getError(remarksReply, EOT_ERROR) != null) {
        // wait a bit...
        try {
          Integer waitTime = acpRequestHandler.getIntegerValue(SiteParameters.REFUND_TIME_BUFFER, 0);
          Thread.sleep(waitTime);
        } catch (InterruptedException e) {
          LOG.warn("Unable to wait before commit retry", e);
        }
        addRemarksToOrder(orderId, dapiRemarks, lang, lastName, cancelAndRefundReply, ++retryCount);
      } else {
        addRemarkWarningToReply(cancelAndRefundReply, remarksReply);
      }
    } catch (RuntimeException ex) {
      LOG.error(LOG_ERROR_MESSAGE_REMARKS, ex);
      addRemarkWarningToReply(cancelAndRefundReply, null);
    }
  }

  /**
   * Add the remarks to the cancel and refund response
   * 
   * @param cancelAndRefundReply
   * @param remarksReply
   */
  private void addRemarksToReply(OrderCancelAndRefundReplyView cancelAndRefundReply, RemarksListReply remarksReply) {
    remarksReply.getData()
        .stream()
        .forEach(
            (Remark remark) -> cancelAndRefundReply.getData().addRemarksItem(cancelAndRefundMappers.mapRemark(remark)));
  }

  /**
   * Add a warning to the cancel and refund response, called when addRemarksToOrder failed
   * 
   * @param cancelAndRefundReply
   * @param remarksReply
   */
  private void addRemarkWarningToReply(OrderCancelAndRefundReplyView cancelAndRefundReply,
      RemarksListReply remarksReply) {
    WarningMessageView warning = new WarningMessageView();
    warning.setCode(ADD_REMARK_ERROR_CODE);
    warning.setTitle(ADD_REMARK_ERROR_TITLE);
    buildWarningDetails(warning, remarksReply);
    List<WarningMessageView> warnings = Optional.ofNullable(cancelAndRefundReply.getWarnings())
        .orElse(new ArrayList<>());
    warnings.add(warning);
    cancelAndRefundReply.setWarnings(warnings);
  }

  /**
   * Sets the warning detail from the available information
   * @param warning
   * @param reply
   */
  private void buildWarningDetails(WarningMessageView warning, RemarksListReply reply) {
    if (reply != null && !CollectionUtils.isEmpty(reply.getErrors())) {
      ErrorMessage error = reply.getErrors().get(0);
      warning.setDetail(error.getDetail());
      warning.setSource(cancelAndRefundMappers.mapSource(error.getSource()));
    } else {
      warning.setDetail(UNKNOWN_ERROR);
    }
  }

  /**
   * Helper class to hold the cancel and refund reply and status
   */
  private static class JalCancelAndRefundReplyAndStatus {

    /**
     * Cancel and refund reply
     */
    private final OrderCancelAndRefundReplyView reply;
    
    /**
     * Cancel and refund reply status
     */
    private int status;
    
    public JalCancelAndRefundReplyAndStatus(OrderCancelAndRefundReplyView reply, int status) {
      this.reply = reply;
      this.status = status;
    }
    
    public OrderCancelAndRefundReplyView getReply() {
      return reply;
    }

    public int getStatus() {
      return status;
    }
    
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\request\RequestService.java

```
package com.amadeus.dapi.jalext.impl.request;

import lombok.Data;

import javax.inject.Named;

/* TODO Remove service once confirmation endpoints are removed */
@Named
@Data
public class RequestService {
    public static final String TEMPORARY_ASSETS_URI = "https://digital-i.jal.co.jp/statics/applications/self-reacc/dynamicContent/1.0.4/assets";
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\JalDapiExtensionServerImpl.java

```
package com.amadeus.dapi.jalext.impl;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Response;
import com.amadeus.dapi.jalext.JalDapiExtApi;

import com.amadeus.dapi.jalext.common.service.CommonDapiRetrieveService;
import com.amadeus.dapi.jalext.impl.authorization.service.FrequentFlyerProfilesService;
import com.amadeus.dapi.jalext.impl.authorization.service.LoginUrlConstructionsService;
import com.amadeus.dapi.jalext.impl.deeplinks.SeatmapDeeplinkService;
import com.amadeus.dapi.jalext.impl.disruption.reprice.service.DisruptionRepricingConfirmationService;
import com.amadeus.dapi.jalext.impl.disruption.reprice.service.DisruptionRepricingService;
import com.amadeus.dapi.jalext.impl.notification.NotificationByOrderService;
import com.amadeus.dapi.jalext.impl.order.OrderRetrievalService;
import com.amadeus.dapi.jalext.impl.refund.CancelAndRefundService;
import com.amadeus.dapi.jalext.payment.summary.service.PaymentRecordsHistorySevice;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.AcknowledgeRequest;
import com.amadeus.jal.dapi.model.core.DeeplinkRequestView;
import com.amadeus.jal.dapi.model.core.DisruptionRepricingConfirmationRequestView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfilesRequestView;
import com.amadeus.jal.dapi.model.core.LoginUrlConstructionsRequestView;
import com.amadeus.jal.dapi.model.core.MediaUriView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundRequestView;
import com.amadeus.jal.dapi.model.core.StandaloneNotificationRequestView;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryFactory;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;
import org.apache.commons.lang.StringUtils;
import org.springframework.http.HttpHeaders;

/**
 * Implementation of JalDapiExtApi
 * 
 * @author smallick
 */
@Named
public class JalDapiExtensionServerImpl implements JalDapiExtApi {

  private OrderRetrievalService orderRetrievalService;

  private DisruptionRepricingService disruptionRepricingService;
  
  private DisruptionRepricingConfirmationService disruptionRepricingConfirmationService;
  
  private DataRepositoryHelper dataRepositoryHelper;
  
  private PaymentRecordsHistorySevice paymentRecordsHistorySevice;

  private CancelAndRefundService cancelAndRefundService;

  private CommonDapiRetrieveService commonDapiRetrieveService;

  private LoginUrlConstructionsService loginUrlConstructionsService;

  private FrequentFlyerProfilesService frequentFlyerProfilesService;
  
  private SeatmapDeeplinkService seatmapDeeplinkService;

  private NotificationByOrderService notificationByOrderService;

  private HttpServletRequest httpServletRq;

  /**
   * To inject all required services
   * 
   * @param orderRetrievalService
   *          orderRetrievalService
   * @param disruptionRepricingService
   *          disruptionRepricingService
   * @param disruptionRepricingConfirmationService
   *          disruptionRepricingConfirmationService
   * @param paymentRecordsHistorySevice
   *          paymentRecordsHistorySevice
   * @param dataRepositoryFactory
   *          dataRepositoryFactory
   * @param cancelAndRefundService
   *          cancelAndRefundService
   * @param commonDapiRetrieveService
   *          commonDapiRetrieveService
   * @param loginUrlConstructionsService
   *         loginUrlConstructionsService
   * @param frequentFlyerProfilesService
   *        frequentFlyerProfilesService
   * @param seatmapDeeplinkService
   *        seatmapDeeplinkService
   */
  @Inject
  public JalDapiExtensionServerImpl(OrderRetrievalService orderRetrievalService,
      DisruptionRepricingService disruptionRepricingService,
      DisruptionRepricingConfirmationService disruptionRepricingConfirmationService,
      PaymentRecordsHistorySevice paymentRecordsHistorySevice,
      DataRepositoryFactory dataRepositoryFactory, CancelAndRefundService cancelAndRefundService,
      LoginUrlConstructionsService loginUrlConstructionsService,
      FrequentFlyerProfilesService frequentFlyerProfilesService,
      NotificationByOrderService notificationByOrderService,
      CommonDapiRetrieveService commonDapiRetrieveService,
      HttpServletRequest httpServletRq,
      SeatmapDeeplinkService seatmapDeeplinkService) {
    this.orderRetrievalService = orderRetrievalService;
    this.disruptionRepricingService = disruptionRepricingService;
    this.disruptionRepricingConfirmationService = disruptionRepricingConfirmationService;
    this.paymentRecordsHistorySevice = paymentRecordsHistorySevice;
    this.dataRepositoryHelper = dataRepositoryFactory.getDataRepositoryHelper();
    this.cancelAndRefundService = cancelAndRefundService;
    this.commonDapiRetrieveService = commonDapiRetrieveService;
    this.loginUrlConstructionsService = loginUrlConstructionsService;
    this.frequentFlyerProfilesService = frequentFlyerProfilesService;
    this.notificationByOrderService = notificationByOrderService;
    this.httpServletRq = httpServletRq;
    this.seatmapDeeplinkService = seatmapDeeplinkService;
  }

  @Override
  public Response retrieveOrder(String orderId, String lang, String lastName, String firstName,
      Boolean showOrderEligibilities) {
    return orderRetrievalService.handleRequest(orderId, lang, lastName, firstName, showOrderEligibilities);
  }

  @Override
  public Response retrieveDisruptionReprices(String orderId, String lang, String lastName, String firstName,
      String optionalFrequentFlyerCardNumber, String optionalCompanyCode, Boolean showMilesPrice,
      List<String> corporateCodes, List<String> boundIdsToBeDeleted) {
    return disruptionRepricingService.handleRequest(orderId, lang, lastName, firstName, showMilesPrice,
        corporateCodes, boundIdsToBeDeleted, dataRepositoryHelper);
  }

  @Override
  public Response disruptionRepricesConfirmation(
      DisruptionRepricingConfirmationRequestView disruptionRepricingConfirmationRequest, String orderId,
      String lang, String lastName, String firstName) {
    return disruptionRepricingConfirmationService.handleRequest(disruptionRepricingConfirmationRequest, orderId, lang,
        lastName, firstName);
  }

  @Override
  public Response cancelAndRefundOrder(String orderId, String lastName, String lang, String confirmationEmailAddress,
      OrderCancelAndRefundRequestView orderCancelAndRefundRequest) {
    return cancelAndRefundService.handleRequest(
            orderId,
            lastName,
            lang,
            confirmationEmailAddress,
            orderCancelAndRefundRequest,
            computeAssetsUri(orderCancelAndRefundRequest.getAssetsPath())
    );
  }

  @Override
  public Response loginUrlConstructionsEndpoint(LoginUrlConstructionsRequestView request) {
    return loginUrlConstructionsService.handleRequest(request);
  }

  @Override
  public Response frequentFlyerProfilesEndpoint(FrequentFlyerProfilesRequestView request) {
    return frequentFlyerProfilesService.handleRequest(request);
  }

  @Override
  public Response defaultPatch(String request) {
    return commonDapiRetrieveService.getCommonDapiResponse(request);
  }

  @Override
  public Response defaultGet(String request) {
    return commonDapiRetrieveService.getCommonDapiResponse(request);
  }

  @Override
  public Response defaultDelete(String request) {
    return commonDapiRetrieveService.getCommonDapiResponse(request);
  }

  @Override
  public Response defaultPost(String request) {
    return commonDapiRetrieveService.getCommonDapiResponse(request);
  }

  @Override
  public Response seatmapDeeplink(String orderId, String lang, DeeplinkRequestView deeplinkRequest) {
    return seatmapDeeplinkService.handleRequest(orderId, lang, deeplinkRequest);
  }

  @Override
  public Response retrievePaymentRecords(String orderId, String lang, String lastName, String firstName) {
    return paymentRecordsHistorySevice.handleRequest(orderId, lang, lastName, firstName, dataRepositoryHelper);
  }

  @Override
  public Response sendNotificationByOrder(StandaloneNotificationRequestView standaloneNotificationRequest) {
    return notificationByOrderService.handleRequest(standaloneNotificationRequest, computeAssetsUri(standaloneNotificationRequest.getAssetsPath()));
  }

  /**
   * Compute the assets Uri for the endpoints which are sending emails with images
   *
   * @param assetsPath
   *
   * @return the computed assets Uri or an empty string
   */
  private String computeAssetsUri(MediaUriView assetsPath) {
    if (assetsPath != null && StringUtils.isNotBlank(assetsPath.getUri())
            && StringUtils.isNotBlank(httpServletRq.getHeader(HttpHeaders.ORIGIN))) {
      return httpServletRq.getHeader(HttpHeaders.ORIGIN).concat(assetsPath.getUri());
    }
    return StringUtils.EMPTY;
  }
}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\interceptor\SetAmaRefInterceptor.java

```
package com.amadeus.dapi.jalext.interceptor;

import java.util.List;
import java.util.Map;

import javax.ws.rs.ext.Provider;

import org.apache.cxf.helpers.CastUtils;
import org.apache.cxf.message.Message;
import org.apache.cxf.phase.AbstractPhaseInterceptor;
import org.apache.cxf.phase.Phase;
import org.apache.log4j.MDC;

@Provider
public class SetAmaRefInterceptor extends AbstractPhaseInterceptor<Message> {

  public SetAmaRefInterceptor() {
    super(Phase.RECEIVE);
  }

  @Override
  public void handleMessage(Message message) {
    Map<String, List<String>> headers = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));
    setHeaderValueInMdc("Ama-Client-Ref", headers);
    setHeaderValueInMdc("Ama-Request-Id", headers);
  }

  private void setHeaderValueInMdc(String headerName, Map<String,List<String>> headers) {
    List<String> headerValues = headers.get(headerName);
    if (((headerValues != null) && !headerValues.isEmpty())) {
      MDC.put(headerName, headerValues.get(0));
    }
  }

}

```

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\JalDapiExtApi.java

```
package com.amadeus.dapi.jalext;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.PATCH;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import com.amadeus.jal.dapi.model.core.DeeplinkRequestView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfilesRequestView;
import com.amadeus.jal.dapi.model.core.LoginUrlConstructionsRequestView;
import org.springframework.web.bind.annotation.RequestBody;

import com.amadeus.jal.dapi.model.core.DisruptionRepricingConfirmationRequestView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundRequestView;
import com.amadeus.jal.dapi.model.core.StandaloneNotificationRequestView;

import io.swagger.annotations.ApiParam;

/**
 * Holds the endpoint information for jal-dapi-ext
 * 
 * @author smallick
 */
@Path("/v2")
public interface JalDapiExtApi {

  @GET
  @Path("/purchase/orders/{orderId}")
  @Produces({ "application/json" })
  Response retrieveOrder(@PathParam("orderId") String orderId, @QueryParam("lang") String lang,
      @QueryParam("lastName") String lastName, @QueryParam("firstName") String firstName,
      @QueryParam("showOrderEligibilities") Boolean showOrderEligibilities);

  /**
   * Endpoint to retrieve disruption prices.
   * 
   * @param orderId
   *          orderId
   * @param lang
   *          lang
   * @param lastName
   *          lastName
   * @param firstName
   *          firstName
   * @param orderId
   *          orderId
   * @param optionalFrequentFlyerCardNumber
   *          optionalFrequentFlyerCardNumber
   * @param optionalCompanyCode
   *          optionalCompanyCode
   * @param showMilesPrice
   *          showMilesPrice
   * @param corporateCodes
   *          corporateCodes
   * @return response
   */
  @GET
  @Path("/purchase/orders/{orderId}/disruption-repricing")
  @Produces({ "application/json" })
  Response retrieveDisruptionReprices(@PathParam("orderId") String orderId, @QueryParam("lang") String lang,
      @QueryParam("lastName") String lastName, @QueryParam("firstName") String firstName,
      @QueryParam("optionalFrequentFlyerCardNumber") String optionalFrequentFlyerCardNumber,
      @QueryParam("optionalCompanyCode") String optionalCompanyCode,
      @QueryParam("showMilesPrice") @DefaultValue("false") Boolean showMilesPrice,
      @ApiParam(allowMultiple = true) @QueryParam("corporateCodes") @Size(max = 6) List<String> corporateCodes,
      @QueryParam("orderAirBoundIdsToBeDeleted") @Size(max = 6) List<String>  boundIdsToBeDeleted);

  @POST
  @Path("/purchase/orders/{orderId}/disruption-repricing-confirmation")
  @Produces({ "application/json" })
  Response disruptionRepricesConfirmation(
      @Valid @NotNull DisruptionRepricingConfirmationRequestView disruptionRepricingConfirmationRequest,
      @PathParam("orderId") String orderId, @QueryParam("lang") String lang,
      @QueryParam("lastName") String lastName, @QueryParam("firstName") String firstName);

  /**
   * Endpoint to perform a cancel and refund
   *
   * @param orderId
   * @param lastName
   * @param lang
   * @param orderCancelAndRefundRequest
   * @return response
   */
  @POST
  @Path("/purchase/orders/{orderId}/cancellation")
  @Consumes({ "application/json" })
  @Produces({ "application/json" })
  Response cancelAndRefundOrder(
      @PathParam("orderId") String orderId,
      @QueryParam("lastName") String lastName,
      @QueryParam("lang") String lang,
      @QueryParam("confirmationEmailAddress") String confirmationEmailAddress,
      OrderCancelAndRefundRequestView orderCancelAndRefundRequest);

  /**
   * EndPoint to retrieve payment records based on tickets present in order
   * 
   * @param orderId
   * @param lang
   * @param lastName
   * @param firstName
   * @return
   */
  @GET
  @Path("/purchase/orders/{orderId}/travel-documents/payments-summary")
  @Consumes({ "application/json" })
  @Produces({ "application/json" })
  Response retrievePaymentRecords(@PathParam("orderId") String orderId, @QueryParam("lang") String lang,
      @QueryParam("lastName") String lastName, @QueryParam("firstName") String firstName);

  @POST
  @Path("/security/authentication/authorization-delegation/login-url-constructions")
  @Consumes({ "application/json" })
  @Produces({ "application/json" })
  Response loginUrlConstructionsEndpoint(@RequestBody @Valid @NotNull LoginUrlConstructionsRequestView request);

  @POST
  @Path("/search/frequent-flyer-profiles")
  @Consumes({ "application/json" })
  @Produces({ "application/json" })
  Response frequentFlyerProfilesEndpoint(@RequestBody @Valid @NotNull FrequentFlyerProfilesRequestView request);

  /**
   * Endpoint to perform non-implemented patch request
   * 
   * @param request
   * @return
   */
  @PATCH
  @Path("{path: .*}")
  @Produces({ "application/json" })
  Response defaultPatch(@RequestBody String request);

  /**
   * Endpoint to perform non-implemented GET request
   * 
   * @param request
   * @return
   */
  @GET
  @Path("{path: .*}")
  @Produces({ "application/json" })
  Response defaultGet(@RequestBody String request);

  /**
   * Endpoint to perform non-implemented DELETE request
   * 
   * @param request
   * @return
   */
  @DELETE
  @Path("{path: .*}")
  @Produces({ "application/json" })
  Response defaultDelete(@RequestBody String request);

  /**
   * Endpoint to perform non-implemented POST request
   * 
   * @param request
   * @return
   */
  @POST
  @Path("{path: .*}")
  @Produces({ "application/json" })
  Response defaultPost(@RequestBody String request);
          
  @POST
  @Path("/shopping/seatmaps/by-order/deeplink")
  @Consumes({ "application/json" })
  @Produces({ "application/json" })
  Response seatmapDeeplink(@QueryParam("orderId") String orderId, @QueryParam("lang") String lang,
      @RequestBody DeeplinkRequestView deeplinkRequest);

  /**
   * EndPoint to send a notification by order
   *
   * @return
   */
  @POST
  @Path("/communication/user-notifications/by-order")
  @Consumes({ "application/json" })
  @Produces({ "application/json" })
  Response sendNotificationByOrder(
          @RequestBody StandaloneNotificationRequestView standaloneNotificationRequest);
}

```

---

## File: webapp\src\test\java\com\amadeus\config\AppConfigTest.java

```
package com.amadeus.config;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.apache.cxf.Bus;
import org.apache.cxf.BusException;
import org.apache.cxf.binding.BindingFactoryManager;
import org.apache.cxf.binding.BindingFactory;
import org.apache.cxf.endpoint.Server;
import org.apache.cxf.feature.Feature;
import org.apache.cxf.jaxrs.JAXRSBindingFactory;
import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedConstruction;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.impl.JalDapiExtensionServerImpl;
import com.amadeus.dapi.jalext.impl.configuration.provider.RequestFilter;
import com.amadeus.dapi.jalext.impl.configuration.provider.ResponseTechnicalHeaderFilter;
import com.amadeus.digital.api.lib.concealment.SensitiveContext;
import com.amadeus.digital.api.lib.log.CollateralCallsLogInInterceptor;
import com.amadeus.digital.api.lib.log.CollateralCallsLogOutInterceptor;
import com.amadeus.digital.api.lib.log.IncomingCallsInInterceptor;
import com.amadeus.digital.api.lib.log.IncomingCallsOutInterceptor;

/**
 * Test class for AppConfig
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class AppConfigTest {

  @Mock
  private Feature ojfServerRsFeature;
  @Mock
  private JalDapiExtensionServerImpl serverImpl;
  @Mock
  private CollateralCallsLogInInterceptor collateralCallsLogInInterceptor;
  @Mock
  private CollateralCallsLogOutInterceptor collateralCallsLogOutInterceptor;
  @Mock
  private IncomingCallsInInterceptor incomingCallsInInterceptor;
  @Mock
  private IncomingCallsOutInterceptor incomingCallsOutInterceptor;
  @Mock
  private ResponseTechnicalHeaderFilter responseTechnicalHeaderFilter;
  @Mock
  private RequestFilter requestFilter;
  @Mock
  private SensitiveContext sensitiveContext;
  @InjectMocks
  private JlpAppConfig appConfig;
  @Mock
  private Bus cxfBus;
  @Mock
  private BindingFactoryManager bindingFactoryManager;
  @Mock
  private BindingFactory bindingFactory;
  @Mock
  private Server server;

	@Test
	public void testCreateServer() {
		Mockito.when(cxfBus.getExtension(BindingFactoryManager.class)).thenReturn(bindingFactoryManager);
		try {
			Mockito.when(bindingFactoryManager.getBindingFactory(JAXRSBindingFactory.JAXRS_BINDING_ID))
					.thenReturn(bindingFactory);
		} catch (BusException e) {
			e.printStackTrace();
		}

		try (MockedConstruction<JAXRSServerFactoryBean> mocked = Mockito.mockConstruction(JAXRSServerFactoryBean.class,
				(mock, context) -> {
					// further stubbings ...
					Mockito.when(mock.create()).thenReturn(server);
				})) {
			Server server = appConfig.createServer(ojfServerRsFeature, cxfBus, serverImpl, incomingCallsInInterceptor,
					incomingCallsOutInterceptor, collateralCallsLogInInterceptor, collateralCallsLogOutInterceptor);
			assertNotNull(server);
		}
	}

  @Test
  public void testIncomingCallsInInterceptor() {
    IncomingCallsInInterceptor interceptor = appConfig.getIncomingCallsInInterceptor(sensitiveContext);
    assertNotNull(interceptor);
  }

  @Test
  public void testIncomingCallsOutInterceptor() {
    IncomingCallsOutInterceptor interceptor = appConfig.getIncomingCallsOutInterceptor(sensitiveContext);
    assertNotNull(interceptor);
  }

  @Test
  public void testCollateralCallsLogInInterceptor() {
    CollateralCallsLogInInterceptor interceptor = appConfig.getCollateralCallsLogInInterceptor(sensitiveContext);
    assertNotNull(interceptor);
  }

  @Test
  public void testCollateralCallsLogOutInterceptor() {
    CollateralCallsLogOutInterceptor interceptor = appConfig.getCollateralCallsLogOutInterceptor(sensitiveContext);
    assertNotNull(interceptor);
  }

}

```

---

## File: webapp\src\test\java\com\amadeus\config\TaskExecutorConfigTest.java

```
package com.amadeus.config;

import static org.junit.Assert.assertNotNull;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.test.util.TestExecutorServiceDecorator;
import com.amadeus.middleware.concurrent.ExecutorServiceDecorator;

/**
 * Test class for TaskExecutorConfig
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class TaskExecutorConfigTest {

  @InjectMocks
  private TaskExecutorConfig executorConfig;

  private ExecutorServiceDecorator executorServiceDecorator = new TestExecutorServiceDecorator();

  @Test
  public void testrestThreadPoolExecutorFactoryBean() {
    assertNotNull(executorConfig.restThreadPoolExecutorFactoryBean(executorServiceDecorator));
  }

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\authorization\builder\FrequentFlyerProfileBuilderTest.java

```
package com.amadeus.dapi.jalext.impl.authorization.builder;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Birthday;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Mail;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2MemberProfileBase;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2MobTel;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Name;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2ResponseData;
import com.amadeus.edc.jal.generated.ws.memberprofilev2.pojos.MemberProfileV2Tel;
import com.amadeus.jal.dapi.model.base.NameViewPrivate;
import com.amadeus.jal.dapi.model.core.EmailView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileBaseView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileBirthdayView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileMilesInfoView;
import com.amadeus.jal.dapi.model.core.FrequentFlyerProfileView;
import com.amadeus.jal.dapi.model.core.NameView;
import com.amadeus.jal.dapi.model.core.PhoneView;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.LinkedList;
import java.util.List;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class FrequentFlyerProfileBuilderTest {

  private FrequentFlyerProfileBuilder frequentFlyerProfileBuilder;

  @BeforeEach
  public void setup() {
    frequentFlyerProfileBuilder = new FrequentFlyerProfileBuilder();
  }

  @Test
  public void testBuildFrequentFlyerProfile() {
    // Create mock objects
    MemberProfileV2ResponseData memberProfileV2ResponseData = mock(MemberProfileV2ResponseData.class);
    MemberProfileV2Birthday memberProfileBirthday = mock(MemberProfileV2Birthday.class);
    MemberProfileV2Mail memberProfileMail = mock(MemberProfileV2Mail.class);
    MemberProfileV2MemberProfileBase memberProfileBase = mock(MemberProfileV2MemberProfileBase.class);
    MemberProfileV2Tel memberProfileTel = mock(MemberProfileV2Tel.class);
    MemberProfileV2MobTel memberProfileMobTel = mock(MemberProfileV2MobTel.class);

    // Set up mock object interactions
    when(memberProfileV2ResponseData.getBirthday()).thenReturn(memberProfileBirthday);
    when(memberProfileV2ResponseData.getMail()).thenReturn(memberProfileMail);
    when(memberProfileV2ResponseData.getMemberProfileBase()).thenReturn(memberProfileBase);
    when(memberProfileV2ResponseData.getTel()).thenReturn(memberProfileTel);
    when(memberProfileV2ResponseData.getMobTel()).thenReturn(memberProfileMobTel);

    // Call the method under test
    FrequentFlyerProfileView result = frequentFlyerProfileBuilder.buildFrequentFlyerProfile(memberProfileV2ResponseData);

    // Assert the result
    assertNotNull(result);
    assertNotNull(result.getBirthday());
    assertNotNull(result.getEmail());
    assertNotNull(result.getFrequentFlyerProfileBase());
    assertNotNull(result.getFrequentFlyerProfileMilesInfo());
    assertNotNull(result.getName());
    assertNotNull(result.getMobilePhone());
    assertNotNull(result.getPhone());
  }

  @Test
  public void testBuildEmail() {
    // Create mock objects
    MemberProfileV2Mail memberProfileMail = mock(MemberProfileV2Mail.class);

    // Set up mock object interactions
    when(memberProfileMail.getMailAddress()).thenReturn("test@example.com");

    // Call the method under test
    EmailView result = frequentFlyerProfileBuilder.buildEmail(memberProfileMail);

    // Assert the result
    assertNotNull(result);
    assertEquals("test@example.com", result.getAddress());
  }

  // Add more test methods for other builder methods...

   @Test
  public void testBuildFrequentFlyerProfileBase() {
    // Create mock objects
    MemberProfileV2MemberProfileBase memberProfileBase = mock(MemberProfileV2MemberProfileBase.class);

    // Set up mock object interactions
    when(memberProfileBase.getMemberNo()).thenReturn("123456");
    when(memberProfileBase.getRegion()).thenReturn("US");

    // Call the method under test
    FrequentFlyerProfileBaseView result = frequentFlyerProfileBuilder.buildFrequentFlyerProfileBase(memberProfileBase);

    // Assert the result
    assertNotNull(result);
    assertEquals("123456", result.getMemberNo());
    assertEquals("US", result.getRegion());
  }

    @Test
    public void testBuildFrequentFlyerProfileMilesInfo() {
        // Create mock objects
        MemberProfileV2ResponseData memberProfileV2ResponseData = mock(MemberProfileV2ResponseData.class);

        // Set up mock object interactions
        when(memberProfileV2ResponseData.getMileInfo().getEffectiveMile()).thenReturn("1000");
        when(memberProfileV2ResponseData.getEJalPoint().getRestJP()).thenReturn("500");
        when(memberProfileV2ResponseData.getMileInfo().getTotalEffectiveMile()).thenReturn("1500");

        // Call the method under test
        FrequentFlyerProfileMilesInfoView result = frequentFlyerProfileBuilder.buildFrequentFlyerProfileMilesInfo(memberProfileV2ResponseData);

        // Assert the result
        assertNotNull(result);
        assertEquals(1000, result.getEffectiveMile());
        assertEquals(500, result.getRestPoint());
        assertEquals(1500, result.getTotalEffectiveMile());
    }

    @Test
    public void testBuildFrequentFlyerProfileBirthday() {
        // Create mock objects
        MemberProfileV2Birthday memberProfileBirthday = mock(MemberProfileV2Birthday.class);

        // Set up mock object interactions
        when(memberProfileBirthday.getBirthdayDay()).thenReturn("1");
        when(memberProfileBirthday.getBirthdayMonth()).thenReturn("1");
        when(memberProfileBirthday.getBirthdayYear()).thenReturn("2000");

        // Call the method under test
        FrequentFlyerProfileBirthdayView result = frequentFlyerProfileBuilder.buildFrequentFlyerProfileBirthday(memberProfileBirthday);

        // Assert the result
        assertNotNull(result);
        assertEquals(1, result.getDay());
        assertEquals(1, result.getMonth());
        assertEquals(2000, result.getYear());
    }

    @Test
    public void testBuildFrequentFlyerProfileName() {
        // Create mock objects
        MemberProfileV2Name memberProfileName = mock(MemberProfileV2Name.class);

        // Set up mock object interactions
        when(memberProfileName.getFirstname()).thenReturn("John");
        when(memberProfileName.getLastname()).thenReturn("Doe");

        // Call the method under test
        List<MemberProfileV2Name> names = new LinkedList<>();
        names.add(memberProfileName);
        NameView result = frequentFlyerProfileBuilder.buildFrequentFlyerProfileName(names);

        // Assert the result
        assertNotNull(result);
        assertEquals("John", result.getFirstName());
        assertEquals("Doe", result.getLastName());
    }

    @Test
    public void testBuildMobilePhone() {
        // Create mock objects
        MemberProfileV2MobTel memberProfileMobTel = mock(MemberProfileV2MobTel.class);

        // Set up mock object interactions
        when(memberProfileMobTel.getMobTelNumber()).thenReturn("1234567890");

        // Call the method under test
        PhoneView result = frequentFlyerProfileBuilder.buildMobilePhone(memberProfileMobTel);

        // Assert the result
        assertNotNull(result);
        assertEquals("1234567890", result.getNumber());
    }

    @Test
    public void testBuildPhone() {
        // Create mock objects
        MemberProfileV2Tel memberProfileTel = mock(MemberProfileV2Tel.class);

        // Set up mock object interactions
        when(memberProfileTel.getTelNumber()).thenReturn("1234567890");

        // Call the method under test
        PhoneView result = frequentFlyerProfileBuilder.buildPhone(memberProfileTel);

        // Assert the result
        assertNotNull(result);
        assertEquals("1234567890", result.getNumber());
    }

    @Test
    public void testBuildNameTypeEnum() {
        // Call the method under test
        NameViewPrivate.NameTypeEnum result = frequentFlyerProfileBuilder.buildNameTypeEnum("test");

        // Assert the result
        assertNotNull(result);
        assertEquals(NameViewPrivate.NameTypeEnum.UNIVERSAL, result);
    }
}
```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\authorization\service\FrequentFlyerProfilesServiceTest.java

```
package com.amadeus.dapi.jalext.impl.authorization.service;

import com.amadeus.jal.dapi.model.core.FrequentFlyerProfilesRequestView;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import javax.ws.rs.core.Response;

import static org.junit.jupiter.api.Assertions.assertNotNull;

/**
 * Test class to test methods in FrequentFlyerProfilesService.java class
 *
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class FrequentFlyerProfilesServiceTest {

  @InjectMocks
  private FrequentFlyerProfilesService frequentFlyerProfilesService;

  private static final String CLIENT_ID = "CLIENT_ID";

  private static final String CLIENT_SECRET = "CLIENT_SECRET";

  private static final String FREQUENT_FLYER_CODE = "FREQUENT_FLYER_CODE";

  private static final String ENCRYPTED_CODE_VERIFIER = "ENCRYPTED_CODE_VERIFIER";

  @Before
  public void before() {
/*    when(authorizationSecretProvider.getClientSecret(AuthenticationBackEndType.PRODUCTION)).thenReturn(CLIENT_SECRET);
    when(authorizationSecretProvider.getClientId(AuthenticationBackEndType.PRODUCTION)).thenReturn(CLIENT_ID);*/
  }

  @Test
  void testHandleRequest() {
    FrequentFlyerProfilesRequestView frequentFlyerProfilesRequestView = new FrequentFlyerProfilesRequestView();
    frequentFlyerProfilesRequestView.setFrequentFlyerCode(FREQUENT_FLYER_CODE);
    frequentFlyerProfilesRequestView.setEncryptedCodeVerifier(ENCRYPTED_CODE_VERIFIER);
    
    Response response = frequentFlyerProfilesService.handleRequest(frequentFlyerProfilesRequestView);
    assertNotNull(response);
  }

}
```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\authorization\service\LoginUrlConstructionsServiceTest.java

```
package com.amadeus.dapi.jalext.impl.authorization.service;

import com.amadeus.jal.dapi.model.base.LoginUrlConstructionsRequestViewPrivate;
import com.amadeus.jal.dapi.model.core.LoginUrlConstructionsRequestView;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import javax.ws.rs.core.Response;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class to test methods in LoginUrlConstructionsService.java class
 *
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class LoginUrlConstructionsServiceTest {

    @InjectMocks
    private LoginUrlConstructionsService loginUrlConstructionsService;

    private static final String CLIENT_ID = "CLIENT_ID";

    private static final String CLIENT_SECRET = "CLIENT_SECRET";

    private static final String CALLBACK_URL = "CALLBACK_URL";

    private static final String GUEST_URL = "CALLBACK_URL";

    @Before
    public void before() {
/*        when(authorizationSecretProvider.getClientSecret(AuthenticationBackEndType.MAINTENANCE)).thenReturn(CLIENT_SECRET);
        when(authorizationSecretProvider.getClientId(AuthenticationBackEndType.MAINTENANCE)).thenReturn(CLIENT_ID);*/
    }

    @Test
    void testHandleRequest() {
        LoginUrlConstructionsRequestView loginUrlConstructionsRequestView = new LoginUrlConstructionsRequestView();
        loginUrlConstructionsRequestView.setCallbackUrl(CALLBACK_URL);
        loginUrlConstructionsRequestView.setGuestUrl(GUEST_URL);
        loginUrlConstructionsRequestView.setIsAutoLogin(false);
        loginUrlConstructionsRequestView.setAuthenticationPlatform(LoginUrlConstructionsRequestViewPrivate.AuthenticationPlatformEnum.MAINTENANCE);
        Response response = loginUrlConstructionsService.handleRequest(loginUrlConstructionsRequestView);
        assertNotNull(response);
    }
    
}
```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\configuration\provider\RequestFilterTest.java

```
package com.amadeus.dapi.jalext.impl.configuration.provider;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import javax.ws.rs.container.ContainerRequestContext;

import org.junit.jupiter.api.Test;

import com.amadeus.dapi.jalext.test.util.ContainerRequestContextImpl;

/**
 * Test class for RequestFilter
 * 
 * @author smallick
 */
public class RequestFilterTest {

  static final String REQUEST_TIMESTAMP_PROPERTY = "JalRequestTimestamp";

  @Test
  public void testFilter() {
    RequestFilter filter = new RequestFilter();
    ContainerRequestContext req = new ContainerRequestContextImpl();
    filter.filter(req);
    assertNotNull(req.getProperty(REQUEST_TIMESTAMP_PROPERTY));
  }

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\configuration\provider\ResponseTechnicalHeaderFilterTest.java

```
package com.amadeus.dapi.jalext.impl.configuration.provider;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerResponseContext;

import org.junit.jupiter.api.Test;

import com.amadeus.dapi.jalext.test.util.ContainerRequestContextImpl;
import com.amadeus.dapi.jalext.test.util.ContainerResponseContextImpl;

/**
 * Test class for ResponseTechnicalHeaderFilterTest
 * 
 * @author smallick
 */
public class ResponseTechnicalHeaderFilterTest {

  static final String REQUEST_TIMESTAMP_PROPERTY = "JalRequestTimestamp";

  @Test
  public void testFilter() {
    ContainerRequestContext req = new ContainerRequestContextImpl();
    ContainerResponseContext res = new ContainerResponseContextImpl();
    ResponseTechnicalHeaderFilter headerFilter = new ResponseTechnicalHeaderFilter();
    req.setProperty(REQUEST_TIMESTAMP_PROPERTY, Long.valueOf(System.currentTimeMillis()));
    headerFilter.filter(req, res);
    assertTrue(res.getHeaders()
        .containsKey("jal-application-version"));
    assertTrue(res.getHeaders()
        .containsKey("jal-specification-version"));
    assertTrue(res.getHeaders()
        .containsKey("jal-ama-elapsed"));
    req.setProperty(REQUEST_TIMESTAMP_PROPERTY, "anything");
    res = new ContainerResponseContextImpl();
    headerFilter.filter(req, res);
    assertFalse(res.getHeaders()
        .containsKey("jal-ama-elapsed"));
  }

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\deeplinks\validators\DeeplinkServiceValidatorTest.java

```
package com.amadeus.dapi.jalext.impl.deeplinks.validators;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import javax.validation.ConstraintViolationException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.digital.api.lib.validation.constraints.AmadeusConstraintViolation;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.core.DeeplinkRequestView;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class DeeplinkServiceValidatorTest {

  private static final String GET_ORDER_JSON = "Get_Order.json";
  private static final String GET_DEEPLINK_REQUEST_JSON = "Deeplink_Request.json";

  @InjectMocks
  DeeplinkServiceValidator deeplinkServiceValidator;

  private AmadeusConstraintViolation<?> violations;

  /**
   * Method to return order reply view from Json
   * 
   * @return OrderReply
   */
  @Test
  public static OrderReply getOrderReply() {
    OrderReply orderReply = Format.json()
        .parse(OrderReply.class,
            DeeplinkServiceValidatorTest.class, GET_ORDER_JSON);
    assertNotNull(orderReply);
    return orderReply;
  }

  /**
   * Method to return deeplink request view from Json.
   *
   * @return DeeplinkRequestView
   */
  @Test
  public static DeeplinkRequestView getDeeplinRequestView() {
    DeeplinkRequestView deeplinkRequestView = Format.json()
        .parse(DeeplinkRequestView.class,
            DeeplinkServiceValidatorTest.class, GET_DEEPLINK_REQUEST_JSON);
    assertNotNull(deeplinkRequestView);
    return deeplinkRequestView;
  }

  @BeforeEach
  public void setUp() {
    Constraints constraints = new Constraints(new ConstraintViolationFactoryImpl());
    deeplinkServiceValidator = new DeeplinkServiceValidator(constraints);
  }

  @Test
  public void testValidation_WhenValidRequest() {
    OrderReply orderReply = getOrderReply();
    DeeplinkRequestView deeplinkRequestView = getDeeplinRequestView();
    AmadeusConstraintViolation<?> violation = runValidatorAndGetError(orderReply, deeplinkRequestView);
    assertNull(violation);
  }

  @Test
  public void testValidation_WhenFlightInformationIsNull() {
    OrderReply orderReply = getOrderReply();
    DeeplinkRequestView deeplinkRequestView = getDeeplinRequestView();
    deeplinkRequestView.getFlightInformation().setFlightNumber(null);
    AmadeusConstraintViolation<?> violation = runValidatorAndGetError(orderReply, deeplinkRequestView);
    assertNotNull(violation);
    assertEquals(ErrorResponseUtils.INVALID_FLIGHT_NUMBER_ERROR_MESSAGE, violation.getMessage());
  }

  @Test
  public void testValidation_WhenTravelerFirstNameNotInOrder() {
    OrderReply orderReply = getOrderReply();
    DeeplinkRequestView deeplinkRequestView = getDeeplinRequestView();
    deeplinkRequestView.getTraveler().setFirstName("Test");
    AmadeusConstraintViolation<?> violation = runValidatorAndGetError(orderReply, deeplinkRequestView);
    assertNotNull(violation);
    assertEquals(ErrorResponseUtils.INVALID_TRAVELER_INFORMATION_ERROR_MESSAGE, violation.getMessage());
  }

  @Test
  public void testValidation_WhenTravelerInforationIsNull() {
    OrderReply orderReply = getOrderReply();
    DeeplinkRequestView deeplinkRequestView = getDeeplinRequestView();
    deeplinkRequestView.setTraveler(null);
    AmadeusConstraintViolation<?> violation = runValidatorAndGetError(orderReply, deeplinkRequestView);
    assertNotNull(violation);
    assertEquals(ErrorResponseUtils.INVALID_TRAVELER_INFORMATION_ERROR_MESSAGE, violation.getMessage());
  }

  @Test
  public void testValidation_WhenCallBackUrlIsNull() {
    OrderReply orderReply = getOrderReply();
    DeeplinkRequestView deeplinkRequestView = getDeeplinRequestView();
    deeplinkRequestView.setCallbackUrl(null);
    AmadeusConstraintViolation<?> violation = runValidatorAndGetError(orderReply, deeplinkRequestView);
    assertNotNull(violation);
    assertEquals(ErrorResponseUtils.RETURN_URL_IS_EMPTY_ERROR_MESSAGE, violation.getMessage());
  }

  /**
   * Method to validate the request and get the error from constraint
   * 
   * @param orderReply
   * @param deeplinkRequestView
   * @return AmadeusConstraintViolation
   */
  private AmadeusConstraintViolation<?>
      runValidatorAndGetError(OrderReply orderReply, DeeplinkRequestView deeplinkRequestView) {
    try {
      deeplinkServiceValidator.validateRequest(orderReply, deeplinkRequestView);
    } catch (ConstraintViolationException e) {
      violations = (AmadeusConstraintViolation)e.getConstraintViolations()
          .toArray()[0];
    }
    return violations;
  }
}
```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\deeplinks\SeatmapDeeplinkServiceTest.java

```
package com.amadeus.dapi.jalext.impl.deeplinks;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.Map;

import javax.ws.rs.core.Response;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.impl.deeplinks.config.JalConfig;
import com.amadeus.dapi.jalext.impl.deeplinks.validators.DeeplinkServiceValidator;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Order;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.digital.api.lib.validation.constraints.ConstraintViolationFactoryImpl;
import com.amadeus.digital.api.lib.validation.constraints.Constraints;
import com.amadeus.jal.dapi.model.base.DeviceViewPrivate;
import com.amadeus.jal.dapi.model.core.DeeplinkReplyView;
import com.amadeus.jal.dapi.model.core.DeeplinkRequestView;
import com.amadeus.jal.dapi.model.core.DeviceView;
import com.amadeus.jal.dapi.model.core.FlightDesignatorView;
import com.amadeus.jal.dapi.model.core.StakeholderView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;


@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class SeatmapDeeplinkServiceTest {

  public static final String ORDER_ID = "123";
  public static final String LANGUAGE = "GB";

  @Mock
  UriComponentsBuilder uriComponentsBuilder;

  @Mock
  UriComponents uriComponents;

  @Mock
  OrderReply orderReply;

  @Mock
  Order order;

  @Mock
  private DapiClient dapiClient;

  @Mock
  private RestJsonResponseParser restParser;

  @Mock
  private RfdCannedMessageRepository rfdCannedMessageRepository;

  @Mock
  private WdkEncryptionService wdkEncryptionService;

  @Mock
  private JalConfig jalConfig;

  @InjectMocks
  private SeatmapDeeplinkService seatmapDeeplinkService;

  @BeforeEach
  public void setUp() {
    when(orderReply.getData()).thenReturn(order);
    when(order.getId()).thenReturn(ORDER_ID);
    Response orderRetrievalResponse = Response.ok().entity(orderReply).build();

    when(uriComponentsBuilder.build()).thenReturn(uriComponents);
    when(uriComponents.toUriString()).thenReturn("http://mocked-url.com/mocked-path");
    when(dapiClient.getOrder(anyString(), anyString(), anyString(), any(), anyBoolean()))
        .thenReturn(orderRetrievalResponse);
    when(restParser.parse(any(), eq(OrderReply.class))).thenReturn(orderReply);
    when(jalConfig.getConfig()).thenReturn(Map.of("SITE", "JAL_JR_JP"));

    Constraints constraints = new Constraints(new ConstraintViolationFactoryImpl());
    DeeplinkServiceValidator deeplinkServiceValidator = new DeeplinkServiceValidator(
        constraints);
    seatmapDeeplinkService = new SeatmapDeeplinkService(dapiClient, restParser, rfdCannedMessageRepository,
        deeplinkServiceValidator, wdkEncryptionService, jalConfig);

    try {
      Field baseUrl = seatmapDeeplinkService.getClass().getDeclaredField("baseUrl");
      baseUrl.setAccessible(true);
      baseUrl.set(seatmapDeeplinkService, "http://mocked-url.com");
      Field resourcePath = seatmapDeeplinkService.getClass().getDeclaredField("resourcePath");
      resourcePath.setAccessible(true);
      resourcePath.set(seatmapDeeplinkService, "/mocked-path");
    } catch (IllegalAccessException e) {
      throw new RuntimeException(e);
    } catch (NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
  }

  private DeeplinkRequestView initDeeplinkRequestView(boolean withFlightInformation, boolean withTravelerInformatio) {
    DeeplinkRequestView deeplinkRequest = new DeeplinkRequestView();
    if (withTravelerInformatio) {
      StakeholderView stakeholderView = new StakeholderView();
      stakeholderView.setLastName("Doe");
      stakeholderView.setFirstName("John");
      deeplinkRequest.setTraveler(stakeholderView);
    }
    if (withFlightInformation) {
      FlightDesignatorView flightDesignatorView = new FlightDesignatorView();
      flightDesignatorView.setCarrierCode("AA");
      flightDesignatorView.setFlightNumber("123");
      deeplinkRequest.setFlightInformation(flightDesignatorView);
    }
    DeviceView deviceView = new DeviceView();
    deviceView.setCategory(DeviceViewPrivate.CategoryEnum.DESKTOP);
    deeplinkRequest.setDevice(deviceView);
    return deeplinkRequest;
  }

  @Test
  void testHandleRequest_returnsDeeplinkResponse() {
    DeeplinkRequestView deeplinkRequest = initDeeplinkRequestView(true, true);
    Response orderRetrievalResponse = Response.ok().entity(orderReply).build();

    when(uriComponentsBuilder.build()).thenReturn(uriComponents);
    when(uriComponents.toUriString()).thenReturn("http://mocked-url.com/mocked-path");
    when(dapiClient.getOrder(anyString(), anyString(), anyString(), any(), anyBoolean()))
        .thenReturn(orderRetrievalResponse);
    when(restParser.parse(any(), eq(OrderReply.class))).thenReturn(orderReply);
    when(jalConfig.getConfig()).thenReturn(Map.of("SITE", "JAL_JR_JP"));

    Response response = seatmapDeeplinkService.handleRequest(ORDER_ID, LANGUAGE, deeplinkRequest);

    assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());
  }

  @Test
  void testHandleRequest_returnsContraintViolationResponse() {

    DeeplinkRequestView deeplinkRequest = initDeeplinkRequestView(false, true);

    Response response = seatmapDeeplinkService.handleRequest(ORDER_ID, LANGUAGE, deeplinkRequest);
    DeeplinkReplyView deeplinkReplyView = (DeeplinkReplyView)response.getEntity();
    assertEquals(1, deeplinkReplyView.getErrors().size());
    assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());
  }

  @Test
  void testHandleRequest_returnsErrorResponse() {
    DeeplinkRequestView deeplinkRequest = initDeeplinkRequestView(true, true);
    when(orderReply.getErrors()).thenReturn(Collections.singletonList(new ErrorMessage()));

    Response response = seatmapDeeplinkService.handleRequest(ORDER_ID, LANGUAGE, deeplinkRequest);
    DeeplinkReplyView deeplinkReplyView = (DeeplinkReplyView)response.getEntity();
    assertEquals(1, deeplinkReplyView.getErrors().size());
    assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
  }

  @Test
  void testHandleRequest_returnsInternalServerError() {
    DeeplinkRequestView deeplinkRequest = initDeeplinkRequestView(true, true);

    doThrow(new RuntimeException()).when(dapiClient)
        .getOrder(anyString(), anyString(), anyString(), any(), anyBoolean());

    Response response = seatmapDeeplinkService.handleRequest(ORDER_ID, LANGUAGE, deeplinkRequest);

    assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());
  }
}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\deeplinks\WdkEncryptionServiceTest.java

```
package com.amadeus.dapi.jalext.impl.deeplinks;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class WdkEncryptionServiceTest {

  @Mock
  private HttpURLConnection connection;

  @Test
  void testEncrypt_returnsEncryptedParams() throws Exception {
    String serverUrl = "http://example.com";
    String plainText = "test";
    String lang = "en";
    String expectedEncryptedParams = "encryptedText";

    String responseBody = "callback({\"ENC\":\"" + expectedEncryptedParams + "\"})";
    InputStream responseStream = new ByteArrayInputStream(responseBody.getBytes(StandardCharsets.UTF_8));

    when(connection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);
    when(connection.getInputStream()).thenReturn(responseStream);

    WdkEncryptionService encryptionService = spy(new WdkEncryptionService());
    doReturn(connection).when(encryptionService).createConnection(anyString());
    String result = encryptionService.encrypt(serverUrl, plainText, lang);

    assertEquals(expectedEncryptedParams, result);
  }

  @Test
  void testEncrypt_throwsRuntimeException() throws Exception {
    String serverUrl = "http://example.com";
    String plainText = "test";
    String lang = "en";

    when(connection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_BAD_REQUEST);
    when(connection.getResponseMessage()).thenReturn("Bad Request");

    WdkEncryptionService encryptionService = spy(new WdkEncryptionService());
    doReturn(connection).when(encryptionService).createConnection(anyString());

    assertThrows(RuntimeException.class, () -> {
      encryptionService.encrypt(serverUrl, plainText, lang);
    });
  }

}
```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\order\mapper\OrderRetrievalResponseMapperTest.java

```
package com.amadeus.dapi.jalext.impl.order.mapper;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.Response;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.jal.dapi.mapper.OrderReplyMapper;
import com.amadeus.jal.dapi.model.core.CheckInEligibilityView;
import com.amadeus.jal.dapi.model.core.OrderEligibilitiesView;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.jal.dapi.model.core.OrderView;
import com.amadeus.jal.dapi.model.core.TravelerView;
import com.amadeus.middleware.rfd.CannedMessage;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;

/**
 * Test class for OrderRetrievalResponseMapper
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class OrderRetrievalResponseMapperTest {

  @Mock
  private RfdCannedMessageRepository cannedMessageRepository;

  @Mock
  private OrderReplyMapper orderReplyMapper;

  @InjectMocks
  private OrderRetrievalResponseMapper responseMapper;

  private static final String LANGUAGE_ENGLISH = "EN";

  private static final String GENERIC_ERROR_CODE = "65019";

  private static final String GENERIC_ERROR_TITLE = "UNABLE TO PROCESS";

  @Mock
  private CannedMessage cannedMessage;

  @Test
  public void testBuildResponseWithCheckIn() {
    OrderReplyView replyView = getOrderReplyView();
    Mockito.when(orderReplyMapper.create(getOrderResponse())).thenReturn(replyView);
    Response response = responseMapper.buildResponseWithCheckIn(getCheckInMethodRS(), replyView);
    OrderReplyView actual = response.readEntity(OrderReplyView.class);
    List<CheckInEligibilityView> eligibilities = actual.getData().getOrderEligibilities().getCheckIn();
    assertNotNull(eligibilities, "Should not be NULL");
    assertEquals(1, eligibilities.size(),
        "Only 1 checkin eligibility should be returned after grouping for PT2 and not for PT4");
    assertEquals(34100, eligibilities.get(0).getCheckInMethods().get(0).getReasons().get(0).getCode(),
        "The reason code should be 34100");
    assertEquals(1, eligibilities.get(0).getTravelerIds().size(),
        "Only 1 traveler PT2 should be returned for this group order");
  }

  @Test
  public void testBuildResponseWithCheckInWithoutEligiblities() {
    OrderReplyView replyView = getOrderReplyViewWithoutEligibilites();
    Mockito.when(orderReplyMapper.create(getOrderResponseWithoutEligibilities())).thenReturn(replyView);
    Response response = responseMapper.buildResponseWithCheckIn(getCheckInMethodRS(), replyView);
    OrderReplyView actual = response.readEntity(OrderReplyView.class);
    List<CheckInEligibilityView> eligibilities = actual.getData().getOrderEligibilities().getCheckIn();
    assertNotNull(eligibilities, "Should not be NULL");
    assertEquals(3, eligibilities.size(),
        "3 checkin eligibilities should be returned after grouping based on XML response");
    assertEquals(3, eligibilities.get(1).getCheckInMethods().get(0).getReasons().size(),
        "Multiple reasons should be returned for PT4 (CHLD) & ST3");
  }

  @Test
  public void testBuildInternalServerError() {
    Mockito.when(cannedMessage.getText()).thenReturn(GENERIC_ERROR_TITLE);
    Mockito.when(cannedMessageRepository.getCannedMessage(Long.parseLong(GENERIC_ERROR_CODE), LANGUAGE_ENGLISH))
        .thenReturn(cannedMessage);

    Response response = ErrorResponseUtils.buildInternalErrorResponse(cannedMessageRepository);
    assertEquals(500, response.getStatus(), "The response status should be 500 when building internal server error");
  }

  @Test
  public void testBuildInternalServerErrorNullTitle() {
    Mockito.when(cannedMessageRepository.getCannedMessage(Long.parseLong(GENERIC_ERROR_CODE), LANGUAGE_ENGLISH))
        .thenReturn(null);
    Response response = ErrorResponseUtils.buildInternalErrorResponse(cannedMessageRepository);
    assertEquals(500, response.getStatus(), "The response status should be 500 when building internal server error");
  }

  private OrderReply getOrderResponse() {
    return Format.json().parse(OrderReply.class, this.getClass(), "get-order.json");
  }

  private OrderReply getOrderResponseWithoutEligibilities() {
    return Format.json().parse(OrderReply.class, this.getClass(), "get-order-without-eligibilities.json");
  }

  private AMA_TTR_GetQuiC_CheckInMethodRS getCheckInMethodRS() {
    return Format.xml().parse(AMA_TTR_GetQuiC_CheckInMethodRS.class, this.getClass(), "get-checkin-method.xml");
  }

  private OrderReplyView getOrderReplyView() {
    List<TravelerView> travelers = new ArrayList<>();
    travelers.add(new TravelerView().id("PT2"));
    return new OrderReplyView().data(
        new OrderView().travelers(travelers).isGroupBooking(true).orderEligibilities(new OrderEligibilitiesView()));
  }

  private OrderReplyView getOrderReplyViewWithoutEligibilites() {
    return new OrderReplyView().data(new OrderView());
  }

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\order\OrderRetrievalServiceTest.java

```
package com.amadeus.dapi.jalext.impl.order;

import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.invoker.XmlWebservicesClient;
import com.amadeus.dapi.jalext.impl.order.mapper.OrderRetrievalResponseMapper;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderReply;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandler;
import com.amadeus.digital.api.lib.client.connection.api.ClientConversationHandlerFactory;
import com.amadeus.digital.api.lib.client.connection.api.RestClientCallException;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.digital.api.lib.format.Format;
import com.amadeus.jal.dapi.mapper.OrderReplyMapper;
import com.amadeus.jal.dapi.model.core.OrderReplyView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;
import com.amadeus.xml._2010._06.ttr_analysis_v1.AMA_TTR_GetQuiC_CheckInMethodRS;

/**
 * Test class for OrderRetrievalService
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class OrderRetrievalServiceTest {

	@Mock
	private DapiClient dapiClient;

	@Mock
	private XmlWebservicesClient webservicesClient;

	@Mock
	private ClientConversationHandler clientConversationHandler;

	@Mock
	private ClientConversationHandlerFactory clientConversationHandlerFactory;

	@Mock
	private OrderRetrievalResponseMapper retrievalResponseMapper;

	@Mock
	private RestJsonResponseParser restParser;

	@Mock
	private Response response;

	@Mock
	private OrderReplyMapper orderReplyMapper;

	@Mock
	private RfdCannedMessageRepository rfdCannedMessageRepository;

	@InjectMocks
	private OrderRetrievalService orderRetrievalService;

	@Mock
	private OrderReplyView replyView;

	@Test
	public void testHandleRequest() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = true;
		OrderReply reply = getOrderResponse();
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(reply);
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
		.thenReturn(clientConversationHandler);
		Mockito.when(webservicesClient.checkinMethod(Mockito.any(), any(ClientConversationHandler.class)))
				.thenReturn(getCheckInMethodRS());
		Mockito.when(orderReplyMapper.create(reply)).thenReturn(replyView);
		Mockito.when(retrievalResponseMapper.buildResponseWithCheckIn(getCheckInMethodRS(), replyView))
				.thenReturn(Response.status(Status.OK).entity(replyView).build());
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(200, orderResponse.getStatus());
	}

	@Test
	public void testHandleRequestError() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = true;
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
		.thenReturn(clientConversationHandler);
		Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(getOrderResponseError());
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(response, response);
	}

	@Test
	public void testHandleRequestNullReply() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = true;
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
		.thenReturn(clientConversationHandler);
		Mockito.when(restParser.parse(response, OrderReplyView.class)).thenReturn(null);
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(response, response);
	}

	@Test
	public void testHandleRequestShowEligibilitesFalse() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = false;
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(getOrderResponseError());
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(response, response);
	}

	@Test
	public void testHandleRequestResponseNull() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = true;
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
		.thenReturn(clientConversationHandler);
		Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(getOrderResponse());
		Mockito.when(webservicesClient.checkinMethod(Mockito.any(), any(ClientConversationHandler.class)))
				.thenReturn(null);
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(response, response);
	}

	@Test
	public void testHandleRequestResponseError() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = true;
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
		.thenReturn(clientConversationHandler);
		Mockito.when(restParser.parse(response, OrderReply.class)).thenReturn(getOrderResponse());
		Mockito.when(webservicesClient.checkinMethod(Mockito.any(), any(ClientConversationHandler.class)))
				.thenReturn(getCheckInMethodRSError());
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(response, response);
	}

	@Test
	public void testHandleRequestException() {
		String orderId = "W4DLIP";
		String lang = "EN";
		String lastName = "Tata";
		String firstName = "Ekojuroku";
		Boolean showOrderEligibilities = true;
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenReturn(response);
		Mockito.when(clientConversationHandlerFactory.newConversation(any(), any()))
		.thenReturn(clientConversationHandler);
		Mockito.when(restParser.parse(response, OrderReplyView.class)).thenThrow(new RestClientCallException());
		Response orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName,
				showOrderEligibilities);
		assertNotNull(orderResponse);
		assertEquals(response, response);
		Mockito.when(dapiClient.getOrder(orderId, lang, lastName, firstName, showOrderEligibilities))
				.thenThrow(new NullPointerException());
		orderResponse = orderRetrievalService.handleRequest(orderId, lang, lastName, firstName, showOrderEligibilities);
		assertNotNull(orderResponse);
	}

	private OrderReply getOrderResponse() {
		return Format.json().parse(OrderReply.class, this.getClass(), "get-order.json");
	}

	private OrderReply getOrderResponseError() {
		return Format.json().parse(OrderReply.class, this.getClass(), "get-order-error.json");
	}

	private AMA_TTR_GetQuiC_CheckInMethodRS getCheckInMethodRS() {
		return Format.xml().parse(AMA_TTR_GetQuiC_CheckInMethodRS.class, this.getClass(), "get-checkin-method.xml");
	}

	private AMA_TTR_GetQuiC_CheckInMethodRS getCheckInMethodRSError() {
		return Format.xml().parse(AMA_TTR_GetQuiC_CheckInMethodRS.class, this.getClass(),
				"get-checkin-method-error.xml");
	}

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\refund\CancelAndRefundServiceTest.java

```
package com.amadeus.dapi.jalext.impl.refund;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;

import javax.ws.rs.core.Response;

import org.apache.commons.collections.CollectionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.configuration.ACPRequestHandler;
import com.amadeus.dapi.jalext.common.invoker.DapiClient;
import com.amadeus.dapi.jalext.common.util.ErrorResponseUtils;
import com.amadeus.dapi.jalext.impl.refund.mapper.CancelAndRefundMappers;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.ErrorMessage;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Messages;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.OrderCancelAndRefundRequest;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Remark;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.RemarksListReply;
import com.amadeus.digital.api.cartdapibox.rs.v2.model.Source;
import com.amadeus.digital.api.lib.client.connection.api.RestJsonResponseParser;
import com.amadeus.jal.dapi.model.core.ErrorMessageView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundDataView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundReplyView;
import com.amadeus.jal.dapi.model.core.OrderCancelAndRefundRequestView;
import com.amadeus.jal.dapi.model.core.RemarkView;
import com.amadeus.jal.dapi.model.core.SourceView;
import com.amadeus.jal.dapi.model.core.WarningMessageView;
import com.amadeus.middleware.rfd.RfdCannedMessageRepository;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
  
public class CancelAndRefundServiceTest {
  private static final String ORDERID = "ORDERID";

  private static final String LASTNAME = "LASTNAME";

  private static final String LANG = "LANG";

  private static final String CONFIRMATION_EMAIL_ADDRESS = "confirmation@email.com";

  private static final Integer STATUS = 200;

  private static final String ERROR_DETAIL = "DETAIL";

  private static final String ERROR_POINTER = "POINTER";

  private static final String ASSETS_URI = "ASSETS_URI";
  
  @Mock
  private DapiClient dapiClient;
  
  @Mock
  private RestJsonResponseParser restParser;
  
  @Mock
  private RfdCannedMessageRepository rfdCannedMessageRepository;
  
  @Mock
  private CancelAndRefundMappers cancelAndRefundMappers;
  
  @Mock
  private ACPRequestHandler acpRequestHandler;
  
  @InjectMocks
  private CancelAndRefundService cancelAndRefundService;

  @Mock
  private OrderCancelAndRefundRequestView orderCancelAndRefundRequestView;

  @Mock
  private OrderCancelAndRefundRequest orderCancelAndRefundRequest;

  @Mock
  private Response cancelAndRefundResponse;

  @Mock
  private OrderCancelAndRefundReply orderCancelAndRefundReply;

  @Mock
  private RemarkView remarkView;

  @Mock
  private Remark mappedRemark;

  @Mock
  private Response addRemarksToOrderResponse;

  @Mock
  private Remark returnedRemark;

  @Mock
  private RemarkView mappedReturnedRemark;

  @BeforeEach
  public void setup() {
    
    when(cancelAndRefundMappers.mapRequest(orderCancelAndRefundRequestView))
        .thenReturn(orderCancelAndRefundRequest);
    
    when(dapiClient.cancelAndRefundOrder(ORDERID, LASTNAME, LANG, orderCancelAndRefundRequest))
        .thenReturn(cancelAndRefundResponse);
    
    when(cancelAndRefundResponse.getStatus())
        .thenReturn(STATUS);
    
    when(restParser.parse(cancelAndRefundResponse, OrderCancelAndRefundReply.class))
        .thenReturn(orderCancelAndRefundReply);

    when(dapiClient.addRemarksToOrder(eq(ORDERID), any(), eq(LANG), eq(LASTNAME)))
        .thenReturn(addRemarksToOrderResponse);

  }

  /**
   * Prepares a dummy cancel and refund reply
   * 
   * @param error
   *          Set to true to mark the dummy response as failed
   * @return Dummy reply
   */
  private OrderCancelAndRefundReplyView prepareRefundReply(boolean error) {
    OrderCancelAndRefundReplyView orderCancelAndRefundReplyView = new OrderCancelAndRefundReplyView();
    orderCancelAndRefundReplyView.setData(new OrderCancelAndRefundDataView());
    if (error) {
      orderCancelAndRefundReplyView.setErrors(Collections.singletonList(new ErrorMessageView()));
    }
    when(cancelAndRefundMappers.mapReply(orderCancelAndRefundReply))
        .thenReturn(orderCancelAndRefundReplyView);
    return orderCancelAndRefundReplyView;
  }

  /**
   * Prepares a dummy reply of the add remark service
   * 
   * @param error
   *          True = Add an error message in the reply
   */
  private void prepareRemarksListReply(boolean error) {

    RemarksListReply remarksListReply = new RemarksListReply();
    remarksListReply.setData(Collections.singletonList(returnedRemark));
    if (error) {
      buildRemarksListReplyError(remarksListReply,null);
    }

    when(restParser.parse(addRemarksToOrderResponse, RemarksListReply.class))
        .thenReturn(remarksListReply);
    
  }
  
    /**
   * Prepares a dummy reply of the add remark service
   * 
   * @param errorCode
   *          String = Add an error message with code in the reply
   */
    private void prepareRemarksListReplyWithEotError(String errorCode) {

      RemarksListReply remarksListReply = new RemarksListReply();
      remarksListReply.setData(Collections.singletonList(returnedRemark));
      buildRemarksListReplyError(remarksListReply, errorCode);

      when(restParser.parse(addRemarksToOrderResponse, RemarksListReply.class))
          .thenReturn(remarksListReply);

    }
  private void buildRemarksListReplyError(RemarksListReply remarksListReply, String errorCode) {
  Source errorSource = new Source();
      errorSource.setPointer(ERROR_POINTER);
      ErrorMessage errorMessage = new ErrorMessage();
      errorMessage.setDetail(ERROR_DETAIL);
      errorMessage.setSource(errorSource);
      errorMessage.setCode(errorCode);
      remarksListReply.setErrors(Collections.singletonList(errorMessage));
      SourceView mappedSource = new SourceView();
      mappedSource.setPointer(ERROR_POINTER);
      when(cancelAndRefundMappers.mapSource(errorSource)).thenReturn(mappedSource);
  }
  
  /**
   * Add a remark to the request mock and to the associated mock mappers
   */
  private void prepareRemarks() {
      when(orderCancelAndRefundRequestView.getRemarks())
          .thenReturn(Collections.singletonList(remarkView));

      when(cancelAndRefundMappers.mapRemark(remarkView))
          .thenReturn(mappedRemark);

      when(cancelAndRefundMappers.mapRemark(returnedRemark))
          .thenReturn(mappedReturnedRemark);
  }
  
  private void remarksAllowed(boolean allowed) {
    when(acpRequestHandler.getBooleanValue(eq(CancelAndRefundService.SITE_ALLOW_REMARK_IN_REQUEST), anyBoolean()))
        .thenReturn(allowed);
  }
  
  /**
   * Check that when a remark is specified in the request, then the endpoints are called and the remark is added to the
   * response
   */
  @Test
  public void testAddRemarkSuccess() {
    
    // prepare
    remarksAllowed(true);
    prepareRemarks();
    prepareRefundReply(false);
    prepareRemarksListReply(false);
    
    // execute
    Response response = cancelAndRefundService.handleRequest(ORDERID, LASTNAME, LANG, CONFIRMATION_EMAIL_ADDRESS, orderCancelAndRefundRequestView, ASSETS_URI);
    
    // verify
    assertNotNull(response);
    OrderCancelAndRefundReplyView reply = (OrderCancelAndRefundReplyView)response.getEntity();
    
    assertTrue(CollectionUtils.isEmpty(reply.getWarnings()));
    
    List<RemarkView> remarksInResponse = reply.getData().getRemarks();
    assertEquals(1, remarksInResponse.size());
    assertEquals(mappedReturnedRemark, remarksInResponse.get(0));
    
    verify(dapiClient, times(1))
        .cancelAndRefundOrder(any(), any(), any(), any());

    verify(dapiClient, times(1))
        .addRemarksToOrder(any(), any(), any(), any());
  }

  /**
   * Check that when a remark is specified in the request and the remarks could not be added, then the endpoints are
   * called and a warning is added to the response
   */
  @Test
  public void testAddRemarkFailure() {
    
    // prepare
    remarksAllowed(true);
    prepareRemarks();
    prepareRefundReply(false);
    prepareRemarksListReply(true);
    
    // execute
    Response response = cancelAndRefundService.handleRequest(ORDERID, LASTNAME, LANG, CONFIRMATION_EMAIL_ADDRESS, orderCancelAndRefundRequestView, ASSETS_URI);
    
    // verify
    assertNotNull(response);
    OrderCancelAndRefundReplyView reply = (OrderCancelAndRefundReplyView)response.getEntity();
    
    assertEquals(1, reply.getWarnings().size());
    
    WarningMessageView warning = reply.getWarnings().get(0);
    assertEquals(CancelAndRefundService.ADD_REMARK_ERROR_CODE, warning.getCode());
    assertEquals(CancelAndRefundService.ADD_REMARK_ERROR_TITLE, warning.getTitle());
    assertEquals(ERROR_DETAIL, warning.getDetail());
    assertEquals(ERROR_POINTER, warning.getSource().getPointer());
    
    assertTrue(CollectionUtils.isEmpty(reply.getData().getRemarks()));
    
    verify(dapiClient, times(1))
        .cancelAndRefundOrder(any(), any(), any(), any());
    
    verify(dapiClient, times(1))
        .addRemarksToOrder(any(), any(), any(), any());
  }
  
    /**
   * Check that when a remark is specified in the request and the remarks could not be added, then the endpoints are
   * called and a warning is added to the response
   */
  @Test
  public void testAddRemarkFailure_EOT() {
    
    // prepare
    remarksAllowed(true);
    prepareRemarks();
    prepareRefundReply(false);
    prepareRemarksListReplyWithEotError(CancelAndRefundService.EOT_ERROR);
    
    // execute
    Response response = cancelAndRefundService.handleRequest(ORDERID, LASTNAME, LANG, CONFIRMATION_EMAIL_ADDRESS, orderCancelAndRefundRequestView, ASSETS_URI);
    
    // verify
    assertNotNull(response);
    OrderCancelAndRefundReplyView reply = (OrderCancelAndRefundReplyView)response.getEntity();
    
    assertEquals(1, reply.getWarnings().size());
    
    WarningMessageView warning = reply.getWarnings().get(0);
    assertEquals(CancelAndRefundService.ADD_REMARK_ERROR_CODE, warning.getCode());
    assertEquals(CancelAndRefundService.ADD_REMARK_ERROR_TITLE, warning.getTitle());
    assertEquals(ERROR_DETAIL, warning.getDetail());
    assertEquals(ERROR_POINTER, warning.getSource().getPointer());
    
    assertTrue(CollectionUtils.isEmpty(reply.getData().getRemarks()));
    
    verify(dapiClient, times(1))
        .cancelAndRefundOrder(any(), any(), any(), any());
    
    verify(dapiClient, times(1 + CancelAndRefundService.EOT_MAX_RETRY))
        .addRemarksToOrder(any(), any(), any(), any());
  }
  
  /**
   * Check that when no remarks are specified, the add remark service is not called
   */
  @Test
  public void testNoRemarks() {
    
    // prepare
    remarksAllowed(true);
    prepareRefundReply(false);
    
    // execute
    Response response = cancelAndRefundService.handleRequest(ORDERID, LASTNAME, LANG, CONFIRMATION_EMAIL_ADDRESS, orderCancelAndRefundRequestView, ASSETS_URI);
    
    // verify
    assertNotNull(response);
    OrderCancelAndRefundReplyView reply = (OrderCancelAndRefundReplyView)response.getEntity();
    
    assertTrue(CollectionUtils.isEmpty(reply.getWarnings()));
    assertTrue(CollectionUtils.isEmpty(reply.getData().getRemarks()));

    verify(dapiClient, times(1))
        .cancelAndRefundOrder(any(), any(), any(), any());

    verify(dapiClient, times(0))
        .addRemarksToOrder(any(), any(), any(), any());
  }
  
  /**
   * Check that when the cancel and refund service fails, then the add remark service is not called and the refund
   * response is sent back
   */
  @Test
  public void testRefundError() {

    // prepare
    remarksAllowed(true);
    prepareRemarks();
    OrderCancelAndRefundReplyView expectedReply = prepareRefundReply(true);
    prepareRemarksListReply(false);

    // execute
    Response response = cancelAndRefundService.handleRequest(ORDERID, LASTNAME, LANG, CONFIRMATION_EMAIL_ADDRESS, orderCancelAndRefundRequestView, ASSETS_URI);

    // verify
    assertNotNull(response);

    OrderCancelAndRefundReplyView reply = (OrderCancelAndRefundReplyView)response.getEntity();
    assertEquals(expectedReply, reply);
    
    assertTrue(CollectionUtils.isEmpty(reply.getWarnings()));

    verify(dapiClient, times(1))
        .cancelAndRefundOrder(any(), any(), any(), any());

    verify(dapiClient, times(0))
        .addRemarksToOrder(any(), any(), any(), any());
  }

  /**
   * Check that the refund flow is not executed when remarks are present in the request but are not allowed
   */
  @Test
  public void testRemarksNotAllowed() {
    
    // prepare
    remarksAllowed(false);
    prepareRemarks();
    prepareRefundReply(false);
    prepareRemarksListReply(false);
    
    // execute
    Response response = cancelAndRefundService.handleRequest(ORDERID, LASTNAME, LANG, CONFIRMATION_EMAIL_ADDRESS, orderCancelAndRefundRequestView, ASSETS_URI);
    
    // verify
    assertNotNull(response);
    Messages reply = (Messages)response.getEntity();
    
    assertEquals(1, reply.getErrors().size());
    assertEquals(ErrorResponseUtils.REMARK_NOT_ALLOWED_CODE, reply.getErrors().get(0).getCode());
        
    verify(dapiClient, times(0))
        .cancelAndRefundOrder(any(), any(), any(), any());

    verify(dapiClient, times(0))
        .addRemarksToOrder(any(), any(), any(), any());
  }
  
}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\JalDapiExtensionServerImplTest.java

```
package com.amadeus.dapi.jalext.impl;

import static org.junit.Assert.assertEquals;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import com.amadeus.dapi.jalext.common.service.CommonDapiRetrieveService;
import com.amadeus.dapi.jalext.payment.summary.service.PaymentRecordsHistorySevice;
import com.amadeus.dapi.jalext.impl.disruption.reprice.service.DisruptionRepricingConfirmationService;
import com.amadeus.dapi.jalext.impl.disruption.reprice.service.DisruptionRepricingService;
import com.amadeus.dapi.jalext.impl.order.OrderRetrievalService;
import com.amadeus.dapi.jalext.impl.refund.CancelAndRefundService;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryFactory;
import com.amadeus.shoppingbasket.webservices.commons.helper.api.DataRepositoryHelper;


/**
 * Test class of JalDapiExtensionServerImpl 
 * 
 * @author smallick
 */
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class JalDapiExtensionServerImplTest {

  @Mock
  private OrderRetrievalService orderRetrievalService;

  @Mock
  private DisruptionRepricingService retrieveInformativePricesService;
  
  @Mock
  private DisruptionRepricingConfirmationService disruptionRepricingConfirmationService;

  @Mock
  private CancelAndRefundService cancelAndRefundService;

  @Mock
  private DataRepositoryHelper dataRepositoryHelper;
  
  @Mock
  private DataRepositoryFactory repositoryHelperFactory;

  @Mock
  private CommonDapiRetrieveService commonDapiRetrieveService;

  @InjectMocks
  private JalDapiExtensionServerImpl dapiExtensionServerImpl;
  
  @Mock
  private PaymentRecordsHistorySevice paymentRecordsHistorySevice;

  @BeforeEach
  public void setUp() {
    Mockito.when(repositoryHelperFactory.getDataRepositoryHelper()).thenReturn(dataRepositoryHelper);
  }


  @Test
  public void testRetrieveOrder() {
    String orderId = "W4DLIP";
    String lang = "EN";
    String lastName = "Tata";
    String firstName = "Ekojuroku";
    Boolean showOrderEligibilities = true;
    Mockito.when(orderRetrievalService.handleRequest(orderId, lang, lastName, firstName, showOrderEligibilities))
        .thenReturn(Response.status(Status.OK)
            .build());
    Mockito.when(retrieveInformativePricesService.handleRequest(orderId, lang, lastName, firstName, false, null, null, dataRepositoryHelper))
        .thenReturn(Response.status(Status.OK)
            .build());
    assertEquals(Status.OK.getStatusCode(),
        dapiExtensionServerImpl.retrieveOrder(orderId, lang, lastName, firstName, showOrderEligibilities)
            .getStatus());
  }

  @Test
  public void testDefaultPatch() {
    String request = "";
    dapiExtensionServerImpl.defaultPatch(request);
    Mockito.verify(commonDapiRetrieveService)
        .getCommonDapiResponse(request);
  }

  @Test
  public void testDefaultGet() {
    String request = "";
    dapiExtensionServerImpl.defaultGet(request);
    Mockito.verify(commonDapiRetrieveService)
        .getCommonDapiResponse(request);
  }

  @Test
  public void testDefaultDelete() {
    String request = "";
    dapiExtensionServerImpl.defaultDelete(request);
    Mockito.verify(commonDapiRetrieveService)
        .getCommonDapiResponse(request);
  }

  @Test
  public void testDefaultPost() {
    String request = "";
    dapiExtensionServerImpl.defaultPost(request);
    Mockito.verify(commonDapiRetrieveService)
        .getCommonDapiResponse(request);
  }
}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\interceptor\SetAmaRefInterceptorTest.java

```
package com.amadeus.dapi.jalext.interceptor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.cxf.message.Message;
import org.apache.log4j.MDC;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

/**
 * Test class for SetAmaRefInterceptor
 * 
 * @author smallick
 */

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class SetAmaRefInterceptorTest {

  private static final String AMA_REQUEST_ID = "Ama-Request-Id";

  private static final String AMA_CLIENT_REF = "Ama-Client-Ref";

  private SetAmaRefInterceptor setAmaRefInterceptor;

  private Message message;

  @BeforeEach
  public void setup() {
    MDC.clear();
    setAmaRefInterceptor = new SetAmaRefInterceptor();
    message = Mockito.mock(Message.class);
    Map<String, List<String>> headers = new HashMap<>();
    headers.put(AMA_CLIENT_REF, Arrays.asList("AmaClientRef"));
    headers.put(AMA_REQUEST_ID, Arrays.asList("AmaRequestId"));
    Mockito.when(message.get(Message.PROTOCOL_HEADERS))
        .thenReturn(headers);
  }

  @Test
  public void testHandleMessage() {
    setAmaRefInterceptor.handleMessage(message);
    assertEquals("AmaClientRef", MDC.get(AMA_CLIENT_REF));
    assertEquals("AmaRequestId", MDC.get(AMA_REQUEST_ID));
  }

  @Test
  public void testHandleMessageNull() {
    Map<String, List<String>> headers = new HashMap<>();
    headers.put(AMA_CLIENT_REF, null);
    headers.put(AMA_REQUEST_ID, null);
    Mockito.when(message.get(Message.PROTOCOL_HEADERS))
        .thenReturn(headers);
    setAmaRefInterceptor.handleMessage(message);
    assertNull(MDC.get(AMA_CLIENT_REF));
    assertNull(MDC.get(AMA_REQUEST_ID));
  }

  @Test
  public void testHandleMessageEmpty() {
    Map<String, List<String>> headers = new HashMap<>();
    headers.put(AMA_CLIENT_REF, new ArrayList<String>());
    headers.put(AMA_REQUEST_ID, new ArrayList<String>());
    Mockito.when(message.get(Message.PROTOCOL_HEADERS))
        .thenReturn(headers);
    setAmaRefInterceptor.handleMessage(message);
    assertNull(MDC.get(AMA_CLIENT_REF));
    assertNull(MDC.get(AMA_REQUEST_ID));
  }

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\test\util\ContainerRequestContextImpl.java

```
package com.amadeus.dapi.jalext.test.util;

import java.io.InputStream;
import java.net.URI;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.core.UriInfo;

/**
 * Test implementation class for ContainerRequestContext
 * 
 * @author smallick
 */
public class ContainerRequestContextImpl implements ContainerRequestContext {

  private static final Map<String, Object> map = new HashMap<>();

  @Override
  public Object getProperty(String name) {
    return map.get(name);
  }

  @Override
  public Collection<String> getPropertyNames() {
    return null;
  }

  @Override
  public void setProperty(String name, Object object) {
    map.put(name, object);
  }

  @Override
  public void removeProperty(String name) {

  }

  @Override
  public UriInfo getUriInfo() {
    return null;
  }

  @Override
  public void setRequestUri(URI requestUri) {

  }

  @Override
  public void setRequestUri(URI baseUri, URI requestUri) {

  }

  @Override
  public Request getRequest() {
    return null;
  }

  @Override
  public String getMethod() {
    return null;
  }

  @Override
  public void setMethod(String method) {

  }

  @Override
  public MultivaluedMap<String, String> getHeaders() {
    return null;
  }

  @Override
  public String getHeaderString(String name) {
    return null;
  }

  @Override
  public Date getDate() {
    return null;
  }

  @Override
  public Locale getLanguage() {
    return null;
  }

  @Override
  public int getLength() {
    return 0;
  }

  @Override
  public MediaType getMediaType() {
    return null;
  }

  @Override
  public List<MediaType> getAcceptableMediaTypes() {
    return null;
  }

  @Override
  public List<Locale> getAcceptableLanguages() {
    return null;
  }

  @Override
  public Map<String, Cookie> getCookies() {
    return null;
  }

  @Override
  public boolean hasEntity() {
    return false;
  }

  @Override
  public InputStream getEntityStream() {
    return null;
  }

  @Override
  public void setEntityStream(InputStream input) {

  }

  @Override
  public SecurityContext getSecurityContext() {
    return null;
  }

  @Override
  public void setSecurityContext(SecurityContext context) {

  }

  @Override
  public void abortWith(Response response) {

  }

}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\test\util\ContainerResponseContextImpl.java

```
package com.amadeus.dapi.jalext.test.util;

import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.net.URI;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import javax.ws.rs.container.ContainerResponseContext;
import javax.ws.rs.core.EntityTag;
import javax.ws.rs.core.Link;
import javax.ws.rs.core.Link.Builder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedHashMap;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.NewCookie;
import javax.ws.rs.core.Response.StatusType;

/**
 * Test implementation class for ContainerResponseContext
 * 
 * @author smallick
 */
public class ContainerResponseContextImpl implements ContainerResponseContext {

  private MultivaluedMap<String, Object> map = new MultivaluedHashMap<>();

  @Override
  public int getStatus() {
    return 0;
  }

  @Override
  public void setStatus(int code) {

  }

  @Override
  public StatusType getStatusInfo() {
    return null;
  }

  @Override
  public void setStatusInfo(StatusType statusInfo) {

  }

  @Override
  public MultivaluedMap<String, Object> getHeaders() {
    return map;
  }

  @Override
  public MultivaluedMap<String, String> getStringHeaders() {
    return null;
  }

  @Override
  public String getHeaderString(String name) {
    return null;
  }

  @Override
  public Set<String> getAllowedMethods() {
    return null;
  }

  @Override
  public Date getDate() {
    return null;
  }

  @Override
  public Locale getLanguage() {
    return null;
  }

  @Override
  public int getLength() {
    return 0;
  }

  @Override
  public MediaType getMediaType() {
    return null;
  }

  @Override
  public Map<String, NewCookie> getCookies() {
    return null;
  }

  @Override
  public EntityTag getEntityTag() {
    return null;
  }

  @Override
  public Date getLastModified() {
    return null;
  }

  @Override
  public URI getLocation() {
    return null;
  }

  @Override
  public Set<Link> getLinks() {
    return null;
  }

  @Override
  public boolean hasLink(String relation) {
    return false;
  }

  @Override
  public Link getLink(String relation) {
    return null;
  }

  @Override
  public Builder getLinkBuilder(String relation) {
    return null;
  }

  @Override
  public boolean hasEntity() {
    return false;
  }

  @Override
  public Object getEntity() {
    return null;
  }

  @Override
  public Class<?> getEntityClass() {
    return null;
  }

  @Override
  public Type getEntityType() {
    return null;
  }

  @Override
  public void setEntity(Object entity) {

  }

  @Override
  public void setEntity(Object entity, Annotation[] annotations, MediaType mediaType) {

  }

  @Override
  public Annotation[] getEntityAnnotations() {
    return null;
  }

  @Override
  public OutputStream getEntityStream() {
    return null;
  }

  @Override
  public void setEntityStream(OutputStream outputStream) {

  }


}

```

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\test\util\TestExecutorServiceDecorator.java

```
package com.amadeus.dapi.jalext.test.util;

import java.util.concurrent.ExecutorService;

import com.amadeus.middleware.concurrent.ExecutorServiceDecorator;

/**
 * Test implementation class for ExecutorServiceDecorator
 * 
 * @author smallick
 */
public class TestExecutorServiceDecorator implements ExecutorServiceDecorator {

  @Override
  public ExecutorService decorate(ExecutorService executorService) {
    return null;
  }

}

```

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\deeplinks\validators\Deeplink_Request.json

```
{
   "traveler": {
      "firstName": "TESTER",
      "lastName": "SAMSON"
   },
   "flightInformation": {
      "carrierCode": "AA",
      "flightNumber": "8495"
   },
   "device": {
       "category" :  "DESKTOP"
   },
   "callbackUrl": "https://www.americanairlines.fr/"
}
```

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\deeplinks\validators\Get_Order.json

```
{
    "data": {
        "id": "5KSZWN",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL088L",
            "countryCode": "JP"
        },
        "creationDateTime": "2020-12-30T10:27:00.000Z",
        "lastModificationDateTime": "2020-12-30T10:32:00.000Z",
        "isGroupBooking": false,
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT3"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 22200,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 25520,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 550,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 550,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 2220,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 3320,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PT2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 16650,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 18855,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 270,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 270,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 1665,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2205,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PI3"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "totalTaxes": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 38850,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 44375,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 5525,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "HND",
                    "destinationLocationCode": "ITM",
                    "flights": [
                        {
                            "id": "ST3",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "TK"
                        }
                    ],
                    "duration": 3600
                },
                {
                    "airBoundId": "2",
                    "originLocationCode": "HND",
                    "destinationLocationCode": "ITM",
                    "flights": [
                        {
                            "id": "ST1",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "UN",
                            "fareFamilyCode": "6JPJPYTA"
                        }
                    ],
                    "duration": 3600
                },
                {
                    "airBoundId": "3",
                    "originLocationCode": "ITM",
                    "destinationLocationCode": "HND",
                    "flights": [
                        {
                            "id": "ST2",
                            "cabin": "eco",
                            "bookingClass": "S",
                            "statusCode": "HK",
                            "fareFamilyCode": "6JPJPYTA"
                        }
                    ],
                    "duration": 3600
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PI3"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PI3"
                    ]
                }
            ]
        },
        "travelers": [
            {
                "passengerTypeCode": "CHD",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "San",
                        "lastName": "Sa",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2014-10-01",
                "age": 5
            },
            {
                "passengerTypeCode": "ADT",
                "id": "PT3",
                "names": [
                    {
                        "firstName": "TESTER",
                        "lastName": "SAMSON",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "1990-05-17",
                "age": 30
            },
            {
                "passengerTypeCode": "INF",
                "id": "PI3",
                "names": [
                    {
                        "firstName": "San",
                        "lastName": "Ka",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2020-10-01",
                "age": 1,
                "accompanyingTravelerId": "PT3"
            }
        ],
        "contacts": [
            {
                "id": "OT9",
                "category": "personal",
                "contactType": "Email",
                "purpose": "standard",
                "address": "GREEN@GMAIL.COM",
                "lang": "EN"
            }
        ],
        "travelDocuments": [
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PI3"
                ],
                "id": "1312135660193",
                "documentType": "eticket",
                "price": {
                    "base": 0,
                    "total": 0,
                    "currencyCode": "JPY"
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "IN",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PT2"
                ],
                "id": "1312135660192",
                "documentType": "eticket",
                "price": {
                    "base": 16650,
                    "total": 18855,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 270,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 1665,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 2205
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "ticketDesignator": "CH",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            },
            {
                "flightIds": [
                    "ST2",
                    "ST3"
                ],
                "travelerIds": [
                    "PT3"
                ],
                "id": "1312135660191",
                "documentType": "eticket",
                "price": {
                    "base": 22200,
                    "total": 25520,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 550,
                            "currencyCode": "JPY",
                            "code": "HJ"
                        },
                        {
                            "value": 2220,
                            "currencyCode": "JPY",
                            "code": "JP"
                        }
                    ],
                    "totalTaxes": 3320
                },
                "fareInfos": [
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1418",
                            "departure": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-20T04:30:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-20T05:30:00.000+09:00"
                            }
                        }
                    },
                    {
                        "fareClass": "SRCTHIAB",
                        "fareFamilyCode": "6JPJPYTA",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "marketingFlightNumber": "1028",
                            "departure": {
                                "locationCode": "ITM",
                                "dateTime": "2021-01-25T11:25:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "HND",
                                "dateTime": "2021-01-25T12:25:00.000+09:00"
                            }
                        }
                    }
                ]
            }
        ],
        "specialKeywords": [
            {
                "id": "OT5",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT2"
                ]
            }
        ],
        "specialServiceRequests": [
            {
                "id": "OT3",
                "code": "CHLD",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "01OCT14",
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT4",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "UN",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST1"
                ]
            },
            {
                "id": "OT8",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST2"
                ]
            },
            {
                "id": "OT40",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KA/SANMR 01OCT20",
                "travelerIds": [
                    "PT3"
                ],
                "flightIds": [
                    "ST3"
                ]
            }
        ],
        "paymentRecords": [
            {
                "id": "FPT25",
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "WN",
                            "paymentType": "CustomPayment"
                        }
                    }
                ]
            }
        ]
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "TYO": {
                "type": "city",
                "cityCode": "TYO",
                "cityName": "TOKYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "HND": {
                "type": "airport",
                "airportName": "TOKYO INTL HANEDA",
                "cityCode": "TYO",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "773": "BOEING 777-300",
            "E70": "EMBRAER 170"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "AA",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "8495",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-25T11:25:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-25T12:25:00.000+09:00",
                    "terminal": "1"
                },
                "aircraftCode": "E70",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "1416",
                "operatingAirlineFlightNumber": "1416",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-20T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-20T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "cancelled"
            },
            "ST3": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "JL",
                "marketingFlightNumber": "1418",
                "operatingAirlineFlightNumber": "1418",
                "departure": {
                    "locationCode": "HND",
                    "dateTime": "2021-01-20T04:30:00.000+09:00",
                    "terminal": "1"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-20T05:30:00.000+09:00"
                },
                "aircraftCode": "773",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJ": "HJ",
            "HJLO": "HJLO",
            "JP": "JP",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "specialServiceRequest": {
            "INFT": {
                "name": "INFANT PASSENGER INFORMATION"
            },
            "CHLD": {
                "name": "CHILD PASSENGER INFORMATION"
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            },
            "TK": {
                "name": "Confirmed, timechange"
            },
            "UN": {
                "name": "Unable, does not operate"
            }
        }
    }
}
```

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\mapper\get-order-without-eligibilities.json

```
{
    "data": {
        "id": "W4DLIP",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL088L",
            "countryCode": "JP"
        },
        "creationDateTime": "2020-10-12T10:38:00.000Z",
        "lastModificationDateTime": "2020-10-12T10:38:00.000Z",
        "issuanceTimeLimit": "2020-12-24T23:59:00.000+09:00",
        "isGroupBooking": false,
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 22300,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 25280,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 490,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 260,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 2230,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2980,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PT4"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 16725,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 18777,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 250,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 130,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 1672,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2052,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PI2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "totalTaxes": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 39025,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 44057,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 5032,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "SDJ",
                    "destinationLocationCode": "ASJ",
                    "flights": [
                        {
                            "id": "ST1",
                            "cabin": "business",
                            "bookingClass": "T",
                            "statusCode": "HK",
                            "connectionTime": 1200,
                            "fareFamilyCode": "6JPJPYSA"
                        },
                        {
                            "id": "ST2",
                            "cabin": "business",
                            "bookingClass": "T",
                            "statusCode": "HK",
                            "connectionTime": 1200,
                            "fareFamilyCode": "6JPJPYSA"
                        },
                        {
                            "id": "ST3",
                            "cabin": "eco",
                            "bookingClass": "P",
                            "statusCode": "HK",
                            "fareFamilyCode": "OW"
                        }
                    ],
                    "duration": 15600
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                }
            ]
        },
        "services": [
            {
                "id": "OT19",
                "descriptions": [
                    {
                        "type": "shortText",
                        "content": "BLND"
                    }
                ],
                "quantity": 1,
                "tags": [
                    "PAXINFO"
                ],
                "flightIds": [
                    "ST3"
                ],
                "statusCode": "HN",
                "isChargeable": false
            }
        ],
        "travelers": [
            {
                "passengerTypeCode": "ADT",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "Ekojuroku",
                        "lastName": "Tata",
                        "title": "MS",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "age": 48
            },
            {
                "passengerTypeCode": "INF",
                "id": "PI2",
                "names": [
                    {
                        "firstName": "ãƒãƒŠã‚³",
                        "lastName": "ãƒ‹ãƒƒã‚³ã‚¦",
                        "nameType": "native",
                        "isPreferred": true
                    },
                    {
                        "firstName": "Hanako",
                        "lastName": "Nikkou",
                        "nameType": "romanized"
                    }
                ],
                "dateOfBirth": "2019-06-25",
                "age": 2,
                "accompanyingTravelerId": "PT2"
            },
            {
                "passengerTypeCode": "CHD",
                "id": "PT4",
                "names": [
                    {
                        "firstName": "Charlie",
                        "lastName": "Simmons",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2016-06-25",
                "age": 5
            }
        ],
        "frequentFlyerCards": [
            {
                "id": "OT35",
                "companyCode": "BA",
                "cardNumber": "45764406",
                "travelerId": "PT4",
                "allianceTierLevel": "EMER",
                "alliancePriorityCode": "1"
            },
            {
                "id": "OT34",
                "companyCode": "JL",
                "cardNumber": "770024533",
                "travelerId": "PT2",
                "tierLevel": "JMBM"
            }
        ],
        "contacts": [
            {
                "id": "OT15",
                "category": "personal",
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "standard",
                "countryPhoneExtension": "91",
                "number": "9678887765"
            },
            {
                "id": "OT16",
                "travelerIds": [
                    "PT2"
                ],
                "category": "other",
                "isThirdParty": false,
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "notification",
                "countryPhoneExtension": "91",
                "number": "9578661331"
            },
            {
                "id": "OT17",
                "category": "personal",
                "contactType": "Email",
                "purpose": "standard",
                "address": "SRI@TCS.COM"
            },
            {
                "id": "OT18",
                "travelerIds": [
                    "PT2"
                ],
                "category": "personal",
                "isThirdParty": false,
                "contactType": "Email",
                "purpose": "notification",
                "address": "SRI@AMADEUS.COM"
            }
        ],
        "travelDocuments": [
            {
                "flightIds": [
                    "ST3"
                ],
                "travelerIds": [
                    "PT4"
                ],
                "id": "1311499934553",
                "documentType": "eticket",
                "price": {
                    "base": 16725,
                    "total": 18777,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 250,
                            "currencyCode": "JPY",
                            "code": "HJDE"
                        },
                        {
                            "value": 130,
                            "currencyCode": "JPY",
                            "code": "HJLO"
                        },
                        {
                            "value": 1672,
                            "currencyCode": "JPY",
                            "code": "JPAD"
                        }
                    ],
                    "totalTaxes": 2052
                },
                "fareInfos": [
                    {
                        "fareClass": "YLAOWZO",
                        "fareFamilyCode": "OW",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "operatingAirlineCode": "MZ",
                            "marketingFlightNumber": "1812",
                            "departure": {
                                "locationCode": "KOJ",
                                "dateTime": "2021-01-14T10:55:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ASJ",
                                "dateTime": "2021-01-14T11:55:00.000+09:00"
                            }
                        }
                    }
                ]
            }
        ],
        "specialKeywords": [
            {
                "id": "OT14",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT4"
                ]
            },
            {
                "id": "OT30",
                "keyword": "PGC",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "///PG CARD MEMBER",
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT31",
                "keyword": "WKTR",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KOJ.20251231",
                "travelerIds": [
                    "PT2"
                ]
            }
        ],
        "specialServiceRequests": [
            {
                "id": "OT10",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST1"
                ]
            },
            {
                "id": "OT11",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST2"
                ]
            },
            {
                "id": "OT12",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST3"
                ]
            },
            {
                "id": "OT19",
                "code": "BLND",
                "airlineCode": "JL",
                "statusCode": "HN",
                "quantity": 1,
                "travelerIds": [
                    "PT4"
                ],
                "flightIds": [
                    "ST3"
                ]
            },
            {
                "id": "OT13",
                "code": "CHLD",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "25JUN16",
                "travelerIds": [
                    "PT4"
                ]
            },
            {
                "id": "OT34",
                "code": "FQTV",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "isVerified": true,
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT35",
                "code": "FQTV",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "isVerified": true,
                "travelerIds": [
                    "PT4"
                ]
            }
        ],
        "paymentRecords": [
            {
                "id": "FPT3",
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "CASH",
                            "paymentType": "CustomPayment"
                        }
                    }
                ],
                "travelerIds": [
                    "PT4"
                ],
                "flightIds": [
                    "ST3"
                ]
            }
        ]
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "KOJ": {
                "type": "airport",
                "airportName": "KAGOSHIMA",
                "cityCode": "KOJ",
                "cityName": "KAGOSHIMA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "SDJ": {
                "type": "airport",
                "airportName": "SENDAI",
                "cityCode": "SDJ",
                "cityName": "SENDAI",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "ASJ": {
                "type": "airport",
                "airportName": "AMAMI",
                "cityCode": "ASJ",
                "cityName": "AMAMI",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "MZ": "AMAKUSA AIRLINES",
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "E90": "EMBRAER 190",
            "AT4": "ATR 42"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "2403",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-14T09:20:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "KOJ",
                    "dateTime": "2021-01-14T10:35:00.000+09:00"
                },
                "aircraftCode": "E90",
                "duration": 4500,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "2200",
                "departure": {
                    "locationCode": "SDJ",
                    "dateTime": "2021-01-14T07:35:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-14T09:00:00.000+09:00"
                },
                "aircraftCode": "E90",
                "duration": 5100,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST3": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "MZ",
                "operatingAirlineName": "AMAKUSA AIRLINES",
                "marketingFlightNumber": "1812",
                "operatingAirlineFlightNumber": "1812",
                "departure": {
                    "locationCode": "KOJ",
                    "dateTime": "2021-01-14T10:55:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "ASJ",
                    "dateTime": "2021-01-14T11:55:00.000+09:00"
                },
                "aircraftCode": "AT4",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJLO": "HJLO",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "specialServiceRequest": {
            "INFT": {
                "name": "INFANT PASSENGER INFORMATION"
            },
            "CHLD": {
                "name": "CHILD PASSENGER INFORMATION"
            },
            "BLND": {
                "name": "BLIND PASSENGER INFORMATION"
            },
            "FQTV": {
                "name": "FREQUENT TRAVELLER INFORMATION"
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            },
            "HN": {
                "name": "Holding need"
            }
        }
    }
}
```

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\mapper\get-order.json

```
{
    "data": {
        "id": "W4DLIP",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL088L",
            "countryCode": "JP"
        },
        "creationDateTime": "2020-10-12T10:38:00.000Z",
        "lastModificationDateTime": "2020-10-12T10:38:00.000Z",
        "issuanceTimeLimit": "2020-12-24T23:59:00.000+09:00",
        "isGroupBooking": true,
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 22300,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 25280,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 490,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 260,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 2230,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2980,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PT4"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 16725,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 18777,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 250,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 130,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 1672,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2052,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PI2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "totalTaxes": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 39025,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 44057,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 5032,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "SDJ",
                    "destinationLocationCode": "ASJ",
                    "flights": [
                        {
                            "id": "ST1",
                            "cabin": "business",
                            "bookingClass": "T",
                            "statusCode": "HK",
                            "connectionTime": 1200,
                            "fareFamilyCode": "6JPJPYSA"
                        },
                        {
                            "id": "ST2",
                            "cabin": "business",
                            "bookingClass": "T",
                            "statusCode": "HK",
                            "connectionTime": 1200,
                            "fareFamilyCode": "6JPJPYSA"
                        },
                        {
                            "id": "ST3",
                            "cabin": "eco",
                            "bookingClass": "P",
                            "statusCode": "HK",
                            "fareFamilyCode": "OW"
                        }
                    ],
                    "duration": 15600
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                }
            ]
        },
        "services": [
            {
                "id": "OT19",
                "descriptions": [
                    {
                        "type": "shortText",
                        "content": "BLND"
                    }
                ],
                "quantity": 1,
                "tags": [
                    "PAXINFO"
                ],
                "flightIds": [
                    "ST3"
                ],
                "statusCode": "HN",
                "isChargeable": false
            }
        ],
        "travelers": [
            {
                "passengerTypeCode": "ADT",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "Ekojuroku",
                        "lastName": "Tata",
                        "title": "MS",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "age": 48
            },
            {
                "passengerTypeCode": "INF",
                "id": "PI2",
                "names": [
                    {
                        "firstName": "ãƒãƒŠã‚³",
                        "lastName": "ãƒ‹ãƒƒã‚³ã‚¦",
                        "nameType": "native",
                        "isPreferred": true
                    },
                    {
                        "firstName": "Hanako",
                        "lastName": "Nikkou",
                        "nameType": "romanized"
                    }
                ],
                "dateOfBirth": "2019-06-25",
                "age": 2,
                "accompanyingTravelerId": "PT2"
            },
            {
                "passengerTypeCode": "CHD",
                "id": "PT4",
                "names": [
                    {
                        "firstName": "Charlie",
                        "lastName": "Simmons",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2016-06-25",
                "age": 5
            }
        ],
        "frequentFlyerCards": [
            {
                "id": "OT35",
                "companyCode": "BA",
                "cardNumber": "45764406",
                "travelerId": "PT4",
                "allianceTierLevel": "EMER",
                "alliancePriorityCode": "1"
            },
            {
                "id": "OT34",
                "companyCode": "JL",
                "cardNumber": "770024533",
                "travelerId": "PT2",
                "tierLevel": "JMBM"
            }
        ],
        "contacts": [
            {
                "id": "OT15",
                "category": "personal",
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "standard",
                "countryPhoneExtension": "91",
                "number": "9678887765"
            },
            {
                "id": "OT16",
                "travelerIds": [
                    "PT2"
                ],
                "category": "other",
                "isThirdParty": false,
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "notification",
                "countryPhoneExtension": "91",
                "number": "9578661331"
            },
            {
                "id": "OT17",
                "category": "personal",
                "contactType": "Email",
                "purpose": "standard",
                "address": "SRI@TCS.COM"
            },
            {
                "id": "OT18",
                "travelerIds": [
                    "PT2"
                ],
                "category": "personal",
                "isThirdParty": false,
                "contactType": "Email",
                "purpose": "notification",
                "address": "SRI@AMADEUS.COM"
            }
        ],
        "travelDocuments": [
            {
                "flightIds": [
                    "ST3"
                ],
                "travelerIds": [
                    "PT4"
                ],
                "id": "1311499934553",
                "documentType": "eticket",
                "price": {
                    "base": 16725,
                    "total": 18777,
                    "currencyCode": "JPY",
                    "taxes": [
                        {
                            "value": 250,
                            "currencyCode": "JPY",
                            "code": "HJDE"
                        },
                        {
                            "value": 130,
                            "currencyCode": "JPY",
                            "code": "HJLO"
                        },
                        {
                            "value": 1672,
                            "currencyCode": "JPY",
                            "code": "JPAD"
                        }
                    ],
                    "totalTaxes": 2052
                },
                "fareInfos": [
                    {
                        "fareClass": "YLAOWZO",
                        "fareFamilyCode": "OW",
                        "couponStatus": "open",
                        "flight": {
                            "marketingAirlineCode": "JL",
                            "operatingAirlineCode": "MZ",
                            "marketingFlightNumber": "1812",
                            "departure": {
                                "locationCode": "KOJ",
                                "dateTime": "2021-01-14T10:55:00.000+09:00"
                            },
                            "arrival": {
                                "locationCode": "ASJ",
                                "dateTime": "2021-01-14T11:55:00.000+09:00"
                            }
                        }
                    }
                ]
            }
        ],
        "specialKeywords": [
            {
                "id": "OT14",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT4"
                ]
            },
            {
                "id": "OT30",
                "keyword": "PGC",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "///PG CARD MEMBER",
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT31",
                "keyword": "WKTR",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KOJ.20251231",
                "travelerIds": [
                    "PT2"
                ]
            }
        ],
        "specialServiceRequests": [
            {
                "id": "OT10",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST1"
                ]
            },
            {
                "id": "OT11",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST2"
                ]
            },
            {
                "id": "OT12",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST3"
                ]
            },
            {
                "id": "OT19",
                "code": "BLND",
                "airlineCode": "JL",
                "statusCode": "HN",
                "quantity": 1,
                "travelerIds": [
                    "PT4"
                ],
                "flightIds": [
                    "ST3"
                ]
            },
            {
                "id": "OT13",
                "code": "CHLD",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "25JUN16",
                "travelerIds": [
                    "PT4"
                ]
            },
            {
                "id": "OT34",
                "code": "FQTV",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "isVerified": true,
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT35",
                "code": "FQTV",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "isVerified": true,
                "travelerIds": [
                    "PT4"
                ]
            }
        ],
        "paymentRecords": [
            {
                "id": "FPT3",
                "paymentTransactions": [
                    {
                        "paymentMethod": {
                            "id": "CASH",
                            "paymentType": "CustomPayment"
                        }
                    }
                ],
                "travelerIds": [
                    "PT4"
                ],
                "flightIds": [
                    "ST3"
                ]
            }
        ],
        "orderEligibilities": {
            "acknowledge": [
                {
                    "airBoundId": "1",
                    "disruption": {
                        "isEligible": false,
                        "nonEligibilityReasons": [
                            {
                                "code": "50006",
                                "title": "No disruption to acknowledge."
                            }
                        ]
                    },
                    "waitlistConfirmation": {
                        "isEligible": false,
                        "nonEligibilityReasons": [
                            {
                                "code": "50004",
                                "title": "No flights for waitlist acknowledgement."
                            }
                        ]
                    }
                }
            ],
            "change": [
                {
                    "flightIds": [
                        "ST1",
                        "ST2"
                    ],
                    "isEligible": false,
                    "nonEligibilityReason": "ticketProblem",
                    "isPenaltyApplied": false
                },
                {
                    "flightIds": [
                        "ST3"
                    ],
                    "isEligible": true,
                    "isPenaltyApplied": false
                }
            ],
            "cancel": {
                "isEligible": true
            }
        }
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "KOJ": {
                "type": "airport",
                "airportName": "KAGOSHIMA",
                "cityCode": "KOJ",
                "cityName": "KAGOSHIMA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "SDJ": {
                "type": "airport",
                "airportName": "SENDAI",
                "cityCode": "SDJ",
                "cityName": "SENDAI",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "ASJ": {
                "type": "airport",
                "airportName": "AMAMI",
                "cityCode": "ASJ",
                "cityName": "AMAMI",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "MZ": "AMAKUSA AIRLINES",
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "E90": "EMBRAER 190",
            "AT4": "ATR 42"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "2403",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-14T09:20:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "KOJ",
                    "dateTime": "2021-01-14T10:35:00.000+09:00"
                },
                "aircraftCode": "E90",
                "duration": 4500,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "2200",
                "departure": {
                    "locationCode": "SDJ",
                    "dateTime": "2021-01-14T07:35:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-14T09:00:00.000+09:00"
                },
                "aircraftCode": "E90",
                "duration": 5100,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST3": {
                "marketingAirlineCode": "JL",
                "operatingAirlineCode": "MZ",
                "operatingAirlineName": "AMAKUSA AIRLINES",
                "marketingFlightNumber": "1812",
                "operatingAirlineFlightNumber": "1812",
                "departure": {
                    "locationCode": "KOJ",
                    "dateTime": "2021-01-14T10:55:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "ASJ",
                    "dateTime": "2021-01-14T11:55:00.000+09:00"
                },
                "aircraftCode": "AT4",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJLO": "HJLO",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "specialServiceRequest": {
            "INFT": {
                "name": "INFANT PASSENGER INFORMATION"
            },
            "CHLD": {
                "name": "CHILD PASSENGER INFORMATION"
            },
            "BLND": {
                "name": "BLIND PASSENGER INFORMATION"
            },
            "FQTV": {
                "name": "FREQUENT TRAVELLER INFORMATION"
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            },
            "HN": {
                "name": "Holding need"
            }
        }
    }
}
```

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\get-order-error.json

```
{
    "errors": [
        {
            "code": "36894",
            "title": "ORDER NOT FOUND",
            "detail": "Order not found."
        }
    ]
}
```

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\get-order.json

```
{
    "data": {
        "id": "W4DLIP",
        "creationPointOfSale": {
            "pointOfSaleId": "TYOJL088L",
            "countryCode": "JP"
        },
        "creationDateTime": "2020-10-12T10:38:00.000Z",
        "lastModificationDateTime": "2020-10-12T10:38:00.000Z",
        "issuanceTimeLimit": "2020-12-24T23:59:00.000+09:00",
        "isGroupBooking": false,
        "air": {
            "prices": {
                "unitPrices": [
                    {
                        "travelerIds": [
                            "PT2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 22300,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 25280,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 490,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 260,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 2230,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2980,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PT4"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 16725,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 18777,
                                    "currencyCode": "JPY"
                                },
                                "taxes": [
                                    {
                                        "value": 250,
                                        "currencyCode": "JPY",
                                        "code": "HJDE"
                                    },
                                    {
                                        "value": 130,
                                        "currencyCode": "JPY",
                                        "code": "HJLO"
                                    },
                                    {
                                        "value": 1672,
                                        "currencyCode": "JPY",
                                        "code": "JPAD"
                                    }
                                ],
                                "totalTaxes": {
                                    "value": 2052,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    },
                    {
                        "travelerIds": [
                            "PI2"
                        ],
                        "prices": [
                            {
                                "base": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "total": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                },
                                "totalTaxes": {
                                    "value": 0,
                                    "currencyCode": "JPY"
                                }
                            }
                        ]
                    }
                ],
                "totalPrices": [
                    {
                        "base": {
                            "value": 39025,
                            "currencyCode": "JPY"
                        },
                        "total": {
                            "value": 44057,
                            "currencyCode": "JPY"
                        },
                        "totalTaxes": {
                            "value": 5032,
                            "currencyCode": "JPY"
                        }
                    }
                ]
            },
            "bounds": [
                {
                    "airBoundId": "1",
                    "originLocationCode": "SDJ",
                    "destinationLocationCode": "ASJ",
                    "flights": [
                        {
                            "id": "ST1",
                            "cabin": "business",
                            "bookingClass": "T",
                            "statusCode": "HK",
                            "connectionTime": 1200,
                            "fareFamilyCode": "6JPJPYSA"
                        },
                        {
                            "id": "ST2",
                            "cabin": "business",
                            "bookingClass": "T",
                            "statusCode": "HK",
                            "connectionTime": 1200,
                            "fareFamilyCode": "6JPJPYSA"
                        },
                        {
                            "id": "ST3",
                            "cabin": "eco",
                            "bookingClass": "P",
                            "statusCode": "HK",
                            "fareFamilyCode": "6JPJPYSA"
                        }
                    ],
                    "duration": 15600
                }
            ],
            "freeCheckedBaggageAllowanceItems": [
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PT2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PT4"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST1"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST2"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                },
                {
                    "details": {
                        "type": "weight",
                        "weightUnit": "kilogram",
                        "quantity": 20
                    },
                    "flightIds": [
                        "ST3"
                    ],
                    "travelerIds": [
                        "PI2"
                    ]
                }
            ]
        },
        "travelers": [
            {
                "passengerTypeCode": "ADT",
                "id": "PT2",
                "names": [
                    {
                        "firstName": "Ekojuroku",
                        "lastName": "Tata",
                        "title": "MS",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "age": 48
            },
            {
                "passengerTypeCode": "INF",
                "id": "PI2",
                "names": [
                    {
                        "firstName": "ãƒãƒŠã‚³",
                        "lastName": "ãƒ‹ãƒƒã‚³ã‚¦",
                        "nameType": "native",
                        "isPreferred": true
                    },
                    {
                        "firstName": "Hanako",
                        "lastName": "Nikkou",
                        "nameType": "romanized"
                    }
                ],
                "dateOfBirth": "2019-06-25",
                "age": 2,
                "accompanyingTravelerId": "PT2"
            },
            {
                "passengerTypeCode": "CHD",
                "id": "PT4",
                "names": [
                    {
                        "firstName": "Charlie",
                        "lastName": "Simmons",
                        "title": "MR",
                        "nameType": "universal",
                        "isPreferred": true
                    }
                ],
                "dateOfBirth": "2016-06-25",
                "age": 5
            }
        ],
        "frequentFlyerCards": [
            {
                "id": "OT35",
                "companyCode": "BA",
                "cardNumber": "45764406",
                "travelerId": "PT4",
                "allianceTierLevel": "EMER",
                "alliancePriorityCode": "1"
            },
            {
                "id": "OT34",
                "companyCode": "JL",
                "cardNumber": "770024533",
                "travelerId": "PT2",
                "tierLevel": "JMBM"
            }
        ],
        "contacts": [
            {
                "id": "OT15",
                "category": "personal",
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "standard",
                "countryPhoneExtension": "91",
                "number": "9678887765"
            },
            {
                "id": "OT16",
                "travelerIds": [
                    "PT2"
                ],
                "category": "other",
                "isThirdParty": false,
                "contactType": "Phone",
                "deviceType": "mobile",
                "purpose": "notification",
                "countryPhoneExtension": "91",
                "number": "9578661331"
            },
            {
                "id": "OT17",
                "category": "personal",
                "contactType": "Email",
                "purpose": "standard",
                "address": "SRI@TCS.COM"
            },
            {
                "id": "OT18",
                "travelerIds": [
                    "PT2"
                ],
                "category": "personal",
                "isThirdParty": false,
                "contactType": "Email",
                "purpose": "notification",
                "address": "SRI@AMADEUS.COM"
            }
        ],
        "specialKeywords": [
            {
                "id": "OT14",
                "keyword": "NOEX",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "AUTOMATIC AGE RESTRICTION",
                "travelerIds": [
                    "PT4"
                ]
            },
            {
                "id": "OT30",
                "keyword": "PGC",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "///PG CARD MEMBER",
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT31",
                "keyword": "WKTR",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "KOJ.20251231",
                "travelerIds": [
                    "PT2"
                ]
            }
        ],
        "specialServiceRequests": [
            {
                "id": "OT10",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST1"
                ]
            },
            {
                "id": "OT11",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST2"
                ]
            },
            {
                "id": "OT12",
                "code": "INFT",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "NIKKOU/HANAKOMS 25JUN19",
                "travelerIds": [
                    "PT2"
                ],
                "flightIds": [
                    "ST3"
                ]
            },
            {
                "id": "OT13",
                "code": "CHLD",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "freetext": "25JUN16",
                "travelerIds": [
                    "PT4"
                ]
            },
            {
                "id": "OT34",
                "code": "FQTV",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "isVerified": true,
                "travelerIds": [
                    "PT2"
                ]
            },
            {
                "id": "OT35",
                "code": "FQTV",
                "airlineCode": "JL",
                "statusCode": "HK",
                "quantity": 1,
                "isVerified": true,
                "travelerIds": [
                    "PT4"
                ]
            }
        ],
        "orderEligibilities": {
            "acknowledge": [
                {
                    "airBoundId": "1",
                    "disruption": {
                        "isEligible": false,
                        "nonEligibilityReasons": [
                            {
                                "code": "50006",
                                "title": "No disruption to acknowledge."
                            }
                        ]
                    },
                    "waitlistConfirmation": {
                        "isEligible": false,
                        "nonEligibilityReasons": [
                            {
                                "code": "50004",
                                "title": "No flights for waitlist acknowledgement."
                            }
                        ]
                    }
                }
            ],
            "change": [
                {
                    "flightIds": [
                        "ST1",
                        "ST2",
                        "ST3"
                    ],
                    "isEligible": false,
                    "nonEligibilityReason": "ticketProblem",
                    "isPenaltyApplied": false
                }
            ],
            "cancel": {
                "isEligible": true
            }
        }
    },
    "dictionaries": {
        "location": {
            "ITM": {
                "type": "airport",
                "airportName": "OSAKA INTL (ITAMI)",
                "cityCode": "OSA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "KOJ": {
                "type": "airport",
                "airportName": "KAGOSHIMA",
                "cityCode": "KOJ",
                "cityName": "KAGOSHIMA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "SDJ": {
                "type": "airport",
                "airportName": "SENDAI",
                "cityCode": "SDJ",
                "cityName": "SENDAI",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "ASJ": {
                "type": "airport",
                "airportName": "AMAMI",
                "cityCode": "ASJ",
                "cityName": "AMAMI",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            },
            "OSA": {
                "type": "city",
                "cityCode": "OSA",
                "cityName": "OSAKA",
                "countryCode": "JP",
                "timeZone": "UTC+0900"
            }
        },
        "country": {
            "JP": "JAPAN"
        },
        "airline": {
            "JL": "JAPAN AIRLINES"
        },
        "aircraft": {
            "E90": "EMBRAER 190",
            "E70": "EMBRAER 170"
        },
        "flight": {
            "ST2": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "2403",
                "departure": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-14T09:20:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "KOJ",
                    "dateTime": "2021-01-14T10:35:00.000+09:00"
                },
                "aircraftCode": "E90",
                "duration": 4500,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST1": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "2200",
                "departure": {
                    "locationCode": "SDJ",
                    "dateTime": "2021-01-14T07:35:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "ITM",
                    "dateTime": "2021-01-14T09:00:00.000+09:00"
                },
                "aircraftCode": "E90",
                "duration": 5100,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            },
            "ST3": {
                "marketingAirlineCode": "JL",
                "operatingAirlineName": "J-AIR",
                "marketingFlightNumber": "3729",
                "departure": {
                    "locationCode": "KOJ",
                    "dateTime": "2021-01-14T10:55:00.000+09:00"
                },
                "arrival": {
                    "locationCode": "ASJ",
                    "dateTime": "2021-01-14T11:55:00.000+09:00"
                },
                "aircraftCode": "E70",
                "duration": 3600,
                "isOpenSegment": false,
                "secureFlightIndicator": false,
                "flightStatus": "scheduled"
            }
        },
        "tax": {
            "HJDE": "HJDE",
            "HJLO": "HJLO",
            "JPAD": "JPAD"
        },
        "currency": {
            "JPY": {
                "name": "JAPANESE YEN",
                "decimalPlaces": 0
            }
        },
        "specialServiceRequest": {
            "INFT": {
                "name": "INFANT PASSENGER INFORMATION"
            },
            "CHLD": {
                "name": "CHILD PASSENGER INFORMATION"
            },
            "FQTV": {
                "name": "FREQUENT TRAVELLER INFORMATION"
            }
        },
        "bookingStatus": {
            "HK": {
                "name": "Holding confirmed"
            }
        }
    }
}
```

---

## File: llms.txt

```
# jal-dapi-ext Documentation

Generated: 08/03/2025 15:01:08

## Overview

# JAL-DAPI-EXT

## Explanation of the project

JAL-DAPI-EXT is a project that aims to extend the Digital API. It is a project that is based on the Digital API, and that aims to add new features to it for the JAL project.

## Installation


### Pre-requisites:

- Having Podman installed on your machine, with a machine correclty installed (please refer to jal-int for this part : https://rndwww.nce.amadeus.net/git/projects/DDSJAL/repos/jal-int/browse)
- Java 17 installed on your machine. You can download it from the following link : https://www.oracle.com/java/technologies/javase-jdk17-downloads.html


### How to build the project

First step after cloning the project is to build it. To do so, you need to run the following command. 

For a build with tests performed, run the command  :

``` bash
./dapi.sh build
```

For a build without any test performed, run the command  :

``` bash
./dapi.sh quick-build
```

If the **Java version is not 17** or greater, **the build will fail**.

If the podman environment is not correctly set up, the script will run your machine, ask you to **shutdown jal-int** if it's running and **creating the podman environment** for jal-dapi-ext.

If the script can't find the cloned project **digital-api-helm**, it will ask you to clone it. This project is necessary for the **deployment** of jal-dapi-ext.

Sometimes, the module **mox-compaign** can fail to build. In this case, the script will ask you if you want to skip the build of this module. If you choose to skip it, the **build will continue without this module**. If you choose to not skip it, **the build will fail**.

The build will also load the docker image into the podman environment after the build, and clean old images to save space.

## How to deploy in local

After your build, you can deploy the project in your local environment. To do so, you need to run the following command :

``` bash
./dapi.sh deploy
```

If you want to be alerted when the deployment is finished, you can add the -a option :

``` bash
./dapi.sh deploy -a
```

As for the build, if the podman environment is not correctly set up, the script will run your machine, ask you to **shutdown jal-int** if it's running and **creating the podman environment** for jal-dapi-ext.

If the script can't find the cloned project **digital-api-helm**, it will ask you to clone it. This project is necessary for the **deployment** of jal-dapi-ext.

Then, the script will **clean previous deployments** and **deploy the project** in your local environment using **digital-api-helm**.

In the end, the script will forward the port **2004/TPC of lcl-localsi** to your port 9000, so you can access the project (through http://localhost:9000/1ASIUJLPGENSECS as exemple).


## How to debug in local

As for Jal-int project, you can debug the project in your local environment. To do so, you need to run the following command :

``` bash
./dapi.sh debug
```

It's working the same way as for jal-int in intellij, you can set breakpoints and debug the project.

However, **hot swap is not working for this project**, so you will need to build and deploy again the project after your modifications.

## Troubleshooting

In case of any issue, please run this command before asking for help :

``` bash
./dapi.sh doctor
```

As for jal-int, this command will check if your installation is correct by running a list of tests. Feel free to ask a question if you have any issue.


## Generate Postman collection & environment for your local deployment

To generate the postman collection and environment for your local deployment, you need to run the following command :

``` bash
./dapi.sh postman generate-postman
```

This command will retrieve the swagger file corresponding of the version of the spec you are using. However, the collection generated **will not include endpoint specific to the JAL extension**. This is something we need to fix. 

So, you can also specify the **swagger file path** you want to use to generate the collection :

``` bash
./dapi.sh postman generate-postman --swagger-file <path>
```

This command will generate a postman collection and environment in the root of the project. You can import them in Postman to test the endpoints of the project.

## Display the logs of the project

Logs can be available in the folder **/c/sharedref/helm-logs/**. But you can also display the logs of the project by running the following command :

``` bash
./dapi.sh logs
```

This command will display the logs of the project in your terminal.

## Analyse duplicate dependencies

You can analyse the duplicate dependencies of the project by running the following command :

``` bash
mvn -T 4 duplicate-finder:check  ==> (slow process but checks classes and resources, -T option is for multi-threading process)
mvn dependency:analyze-duplicate  ==> (fast process but checks only declared dependencies)
```

## Source : 

[Podman for JLP - Windows](https://amadeus.atlassian.net/wiki/spaces/JAL/pages/1383880893/Podman+for+JLP+-+Windows)

[Troubleshooting Docker/Helm based environment - Digital API for Airlines - Amadeus Confluence Platform](https://rndwww.nce.amadeus.net/confluence/pages/viewpage.action?pageId=2213183616)



## File: blueprint\src\main\helm\du-helm.tmpl.json

---

## File: blueprint\src\main\os\du.json

---

## File: blueprint\src\main\os\pelican-config.json

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\builder\FrequentFlyerProfileBuilder.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\Authorization.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\JalAuthorizationProperties.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\MemberProfile.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\model\PlatformConfig.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\AuthorizationConfig.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\conf\PlaceHolderResolver.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\retrievememberprofile\RetrieveMemberProfileCommand.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\retrievememberprofile\RetrieveMemberProfileService.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\retrievememberprofile\RetrieveMemberProfileServiceProxy.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\FrequentFlyerProfilesService.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\service\LoginUrlConstructionsService.java

---

## File: jal-authorization\src\main\java\com\amadeus\dapi\jalext\impl\authorization\util\StaticAuthenticationServiceVerbHandler.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\configuration\ACPRequestHandler.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\configuration\SiteParameters.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\CheckInEndpoint.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\EmptyResource.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\FopGetPaymentSummaryEndpoint.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\PnrRetrieveEndpoint.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\endpoint\TicketRepricePNRWithBookingClassEndpoint.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\errors\CannedError.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\invoker\DapiClient.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\invoker\XmlWebservicesClient.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\service\CommonDapiRetrieveService.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\service\PNRRetrieveService.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\util\DateTimeUtils.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\util\ErrorResponseUtils.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\util\RefTimeZoneUtils.java

---

## File: jal-common\src\main\java\com\amadeus\dapi\jalext\common\validator\ValidateLastNameInOrderService.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\configuration\ACPRequestHandlerTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\invoker\DapiClientTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\invoker\XmlWebServicesClientTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\service\CommonDapiRetrieveServiceTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\service\PNRRetrieveServiceTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\util\DateTimeUtilsTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\common\validator\ValidateLastNameInOrderServiceTest.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\impl\common\endpoint\MockPnrRetrieveEndpoint.java

---

## File: jal-common\src\test\java\com\amadeus\dapi\jalext\impl\common\endpoint\MockTicketRepricePNRWithBookingClassEndpoint.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\builder\DisruptionRepriceRecommendationIdBuilder.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirOfferDictionaryViewJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirPricingRecordsViewJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\BoundsViewJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\DisruptionRepricingJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\ExchangePriceDetailsViewJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\TicketRepricePNRWithBookingClassQueryBuilder.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\TotalPricesViewJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\UnitPriceViewJsonResponseMapper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\model\AwardFareHelper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\model\FlightsHelper.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\DocumentsConverter.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\FlightArrivalAndDepartureConverter.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\PricesConverter.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\proto\converters\RequestedFlightDetailsConverter.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingConfirmationService.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingService.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\util\AirPricingRecordsViewUtil.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\util\DisruptionRepricingUtil.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingConfirmationServiceValidator.java

---

## File: jal-disruption\src\main\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingServiceValidator.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\disruption\test\util\DisruptionRepricingServiceHelperTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\endpoint\MockPnrRetrieveEndpoint.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\endpoint\MockTicketRepricePNRWithBookingClassEndpoint.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirOfferDictionaryViewJsonResponseMapperTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\AirPricingRecordsViewJsonResponseMapperTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\DisruptionRepricingJsonResponseMapperTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\mapper\TicketRepricePNRWithBookingClassQueryBuilderTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingConfirmationServiceTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\service\DisruptionRepricingServiceTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingConfirmationServiceValidatorTest.java

---

## File: jal-disruption\src\test\java\com\amadeus\dapi\jalext\impl\disruption\reprice\validators\DisruptionRepricingServiceValidatorTest.java

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Airbound_Exchange_Confirmation.json

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order.json

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order_For_Award_Pnr.json

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order_For_Domestic_Pnr.json

---

## File: jal-disruption\src\test\resources\com\amadeus\dapi\jalext\disruption\test\util\Get_Order_Without_Disruption.json

---

## File: jal-email\src\main\java\com\amadeus\config\FreeMarkerConfig.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\builder\EmailInformationBuilder.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\BoundHelpers.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\EmailHelpers.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\FlightHelpers.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\OrderHelpers.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\PaymentHelpers.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\helpers\RefundHelpers.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\EmailInformation.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLBookingStatus.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLBound.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLFlight.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLFlightEndpoint.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLFlightItem.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLNoBreakdownRefundSummary.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLRefundBreakdown.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLRefundSummary.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\model\JLTraveler.java

---

## File: jal-email\src\main\java\com\amadeus\dapi\jalext\email\service\EmailService.java

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\builder\EmailInformationBuilderTest.java

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\BoundHelpersTest.java

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\FlightHelpersTest.java

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\OrderHelpersTest.java

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\PaymentHelpersTest.java

---

## File: jal-email\src\test\java\com\amadeus\dapi\jalext\email\helpers\RefundHelpersTest.java

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\mappers\PaymentRecordsHistoryJsonResponseMapper.java

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\service\FopGetPaymentSummaryResponseService.java

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\service\PaymentRecordsHistorySevice.java

---

## File: jal-payment-summary\src\main\java\com\amadeus\dapi\jalext\payment\summary\util\PaymentRecordUtils.java

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\mappers\PaymentRecordsHistoryJsonResponseMapperTest.java

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\service\FopGetPaymentSummaryResponseServiceTest.java

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\service\PaymentRecordsHistorySeviceTest.java

---

## File: jal-payment-summary\src\test\java\com\amadeus\dapi\jalext\payment\summary\util\PaymentRecordUtilsTest.java

---

## File: jal-payment-summary\src\test\resources\com\amadeus\dapi\jalext\payment\summary\service\TravelDocumentJsonErrorResponse.json

---

## File: jal-payment-summary\src\test\resources\com\amadeus\dapi\jalext\payment\summary\service\TravelDocumentJsonReply.json

---

## File: mox-campaign\src\main\docker\ghostData\MOX\V2\1-1-1_GetOrderWithCheckInMethodsEligibilities\test-config.json

---

## File: webapp\src\main\java\com\amadeus\config\JlpAppConfig.java

---

## File: webapp\src\main\java\com\amadeus\config\RfdPackConfig.java

---

## File: webapp\src\main\java\com\amadeus\config\TaskExecutorConfig.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\filters\JalRequestTypeAppEventRestFilter.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\configuration\provider\RequestFilter.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\configuration\provider\ResponseTechnicalHeaderFilter.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\config\JalConfig.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\exception\EncryptionException.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\util\DeeplinkResponseUtil.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\util\DeeplinkUtil.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\validators\DeeplinkServiceValidator.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\SeatmapDeeplinkService.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\deeplinks\WdkEncryptionService.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\notification\NotificationByOrderService.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\exception\RetrieveOrderException.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\mapper\OrderRetrievalResponseMapper.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\model\CheckInWrapper.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\order\OrderRetrievalService.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\refund\mapper\CancelAndRefundMappers.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\refund\util\CancelAndRefundUtil.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\refund\CancelAndRefundService.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\request\RequestService.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\impl\JalDapiExtensionServerImpl.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\interceptor\SetAmaRefInterceptor.java

---

## File: webapp\src\main\java\com\amadeus\dapi\jalext\JalDapiExtApi.java

---

## File: webapp\src\test\java\com\amadeus\config\AppConfigTest.java

---

## File: webapp\src\test\java\com\amadeus\config\TaskExecutorConfigTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\authorization\builder\FrequentFlyerProfileBuilderTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\authorization\service\FrequentFlyerProfilesServiceTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\authorization\service\LoginUrlConstructionsServiceTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\configuration\provider\RequestFilterTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\configuration\provider\ResponseTechnicalHeaderFilterTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\deeplinks\validators\DeeplinkServiceValidatorTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\deeplinks\SeatmapDeeplinkServiceTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\deeplinks\WdkEncryptionServiceTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\order\mapper\OrderRetrievalResponseMapperTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\order\OrderRetrievalServiceTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\refund\CancelAndRefundServiceTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\impl\JalDapiExtensionServerImplTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\interceptor\SetAmaRefInterceptorTest.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\test\util\ContainerRequestContextImpl.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\test\util\ContainerResponseContextImpl.java

---

## File: webapp\src\test\java\com\amadeus\dapi\jalext\test\util\TestExecutorServiceDecorator.java

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\deeplinks\validators\Deeplink_Request.json

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\deeplinks\validators\Get_Order.json

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\mapper\get-order-without-eligibilities.json

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\mapper\get-order.json

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\get-order-error.json

---

## File: webapp\src\test\resources\com\amadeus\dapi\jalext\impl\order\get-order.json

---

## File: README.md

---


```

---

## File: README.md

# JAL-DAPI-EXT

## Explanation of the project

JAL-DAPI-EXT is a project that aims to extend the Digital API. It is a project that is based on the Digital API, and that aims to add new features to it for the JAL project.

## Installation


### Pre-requisites:

- Having Podman installed on your machine, with a machine correclty installed (please refer to jal-int for this part : https://rndwww.nce.amadeus.net/git/projects/DDSJAL/repos/jal-int/browse)
- Java 17 installed on your machine. You can download it from the following link : https://www.oracle.com/java/technologies/javase-jdk17-downloads.html


### How to build the project

First step after cloning the project is to build it. To do so, you need to run the following command. 

For a build with tests performed, run the command  :

``` bash
./dapi.sh build
```

For a build without any test performed, run the command  :

``` bash
./dapi.sh quick-build
```

If the **Java version is not 17** or greater, **the build will fail**.

If the podman environment is not correctly set up, the script will run your machine, ask you to **shutdown jal-int** if it's running and **creating the podman environment** for jal-dapi-ext.

If the script can't find the cloned project **digital-api-helm**, it will ask you to clone it. This project is necessary for the **deployment** of jal-dapi-ext.

Sometimes, the module **mox-compaign** can fail to build. In this case, the script will ask you if you want to skip the build of this module. If you choose to skip it, the **build will continue without this module**. If you choose to not skip it, **the build will fail**.

The build will also load the docker image into the podman environment after the build, and clean old images to save space.

## How to deploy in local

After your build, you can deploy the project in your local environment. To do so, you need to run the following command :

``` bash
./dapi.sh deploy
```

If you want to be alerted when the deployment is finished, you can add the -a option :

``` bash
./dapi.sh deploy -a
```

As for the build, if the podman environment is not correctly set up, the script will run your machine, ask you to **shutdown jal-int** if it's running and **creating the podman environment** for jal-dapi-ext.

If the script can't find the cloned project **digital-api-helm**, it will ask you to clone it. This project is necessary for the **deployment** of jal-dapi-ext.

Then, the script will **clean previous deployments** and **deploy the project** in your local environment using **digital-api-helm**.

In the end, the script will forward the port **2004/TPC of lcl-localsi** to your port 9000, so you can access the project (through http://localhost:9000/1ASIUJLPGENSECS as exemple).


## How to debug in local

As for Jal-int project, you can debug the project in your local environment. To do so, you need to run the following command :

``` bash
./dapi.sh debug
```

It's working the same way as for jal-int in intellij, you can set breakpoints and debug the project.

However, **hot swap is not working for this project**, so you will need to build and deploy again the project after your modifications.

## Troubleshooting

In case of any issue, please run this command before asking for help :

``` bash
./dapi.sh doctor
```

As for jal-int, this command will check if your installation is correct by running a list of tests. Feel free to ask a question if you have any issue.


## Generate Postman collection & environment for your local deployment

To generate the postman collection and environment for your local deployment, you need to run the following command :

``` bash
./dapi.sh postman generate-postman
```

This command will retrieve the swagger file corresponding of the version of the spec you are using. However, the collection generated **will not include endpoint specific to the JAL extension**. This is something we need to fix. 

So, you can also specify the **swagger file path** you want to use to generate the collection :

``` bash
./dapi.sh postman generate-postman --swagger-file <path>
```

This command will generate a postman collection and environment in the root of the project. You can import them in Postman to test the endpoints of the project.

## Display the logs of the project

Logs can be available in the folder **/c/sharedref/helm-logs/**. But you can also display the logs of the project by running the following command :

``` bash
./dapi.sh logs
```

This command will display the logs of the project in your terminal.

## Analyse duplicate dependencies

You can analyse the duplicate dependencies of the project by running the following command :

``` bash
mvn -T 4 duplicate-finder:check  ==> (slow process but checks classes and resources, -T option is for multi-threading process)
mvn dependency:analyze-duplicate  ==> (fast process but checks only declared dependencies)
```

## Source : 

[Podman for JLP - Windows](https://amadeus.atlassian.net/wiki/spaces/JAL/pages/1383880893/Podman+for+JLP+-+Windows)

[Troubleshooting Docker/Helm based environment - Digital API for Airlines - Amadeus Confluence Platform](https://rndwww.nce.amadeus.net/confluence/pages/viewpage.action?pageId=2213183616)



---

